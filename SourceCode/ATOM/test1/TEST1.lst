               00001    LIST n=0
  00000009     00002 P9 equ 09h
  01312D00     00003 _MHZ equ 01312D00h
  000001FF     00004 _ADDRESSMASK equ 01FFh
  00000E00     00005 _TYPEMASK equ 0E00h
  00004000     00006 _SIGNMASK equ 04000h
  00007000     00007 _INDEXMASK equ 07000h
  0000000C     00008 _INDEXOFFSET equ 0Ch
  00008000     00009 _ARRAYMASK equ 08000h
  00000E00     00010 _FLOATTYPE equ 0E00h
  00004A00     00011 _SLONGTYPE equ 04A00h
  00000A00     00012 _LONGTYPE equ 0A00h
  00004600     00013 _SWORDTYPE equ 04600h
  00004200     00014 _SBYTETYPE equ 04200h
  00000600     00015 _WORDTYPE equ 0600h
  00000200     00016 _BYTETYPE equ 0200h
  00000400     00017 _NIBTYPE equ 0400h
  00000800     00018 _BITTYPE equ 0800h
  00000020     00019 _BANK0_START equ 020h
  00000070     00020 _BANK0_END equ 070h
  000000A0     00021 _BANK1_START equ 0A0h
  000000F0     00022 _BANK1_END equ 0F0h
  00000110     00023 _BANK2_START equ 0110h
  00000170     00024 _BANK2_END equ 0170h
  00000190     00025 _BANK3_START equ 0190h
  000001F0     00026 _BANK3_END equ 01F0h
  0000007F     00027 _w_temp equ 07Fh
  0000007E     00028 _status_temp equ 07Eh
  0000007D     00029 _pclath_temp equ 07Dh
  0000007C     00030 _fsr_temp equ 07Ch
  0000007B     00031 _INTSTATEH equ 07Bh
  0000007A     00032 _INTSTATE equ 07Ah
  00000079     00033 _DEBUGWORK5 equ 079h
  00000078     00034 _DEBUGWORK4 equ 078h
  00000077     00035 _DEBUGWORK3 equ 077h
  00000076     00036 _DEBUGWORK2 equ 076h
  00000075     00037 _DEBUGWORK equ 075h
  00000079     00038 _CMD5 equ 079h
  00000078     00039 _CMD4 equ 078h
  00000077     00040 _CMD3 equ 077h
  00000076     00041 _CMD2 equ 076h
  00000075     00042 _CMD equ 075h
  00000074     00043 _SP equ 074h
  00000073     00044 _PCSP equ 073h
  00000072     00045 _PCU equ 072h
  00000071     00046 _PCH equ 071h
  00000070     00047 _PC equ 070h
  00000020     00048 _WORK equ 020h
  00000021     00049 _WORK2 equ 021h
  00000022     00050 _WORK3 equ 022h
  00000023     00051 _WORK4 equ 023h
  00000024     00052 _ENHWORK equ 024h
  00000025     00053 _ENHWORK2 equ 025h
  00000026     00054 _ENHWORK3 equ 026h
  00000027     00055 _ENHWORK4 equ 027h
  00000028     00056 _ENHWORK5 equ 028h
  00000029     00057 _ENHWORK6 equ 029h
  0000002A     00058 _ENHWORK7 equ 02Ah
  0000002B     00059 _ENHWORK8 equ 02Bh
  0000002C     00060 _STACK equ 02Ch
  00000070     00061 _PCSTACK equ 070h
               00062 #include "C:\PROGRA~1\BASICA~1\system\PBASIC~2.INC" ;pBASICATOM28.inc
               00001         processor 16F876A
               00002         LIST
               00003 ; P16F876A.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
               00400         LIST
002007 0000    00063       __CONFIG 0
               00064 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB30AD~1.LIB" ;mbasic14\mbasicmac.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 _@DECLSU        macro arg
               00004                                                 movlw   -1
               00005                                                 addwf   arg,F
               00006                                                 skpc
               00007                                                 addwf   arg+1,F
               00008                                                 skpc
               00009                                                 addwf   arg+2,F
               00010                                                 skpc
               00011                                                 addwf   arg+3,F
               00012                                                 skpnc
               00013         endm
               00014 _@ADD   macro source,dest
               00015                                                 movf    source,W
               00016                                                 addwf   dest,F
               00017 
               00018                                                 movf    source+1,W
               00019                                                 btfsc   STATUS,C
               00020                                                  incfsz source+1,W
               00021                                                   addwf dest+1,F
               00022 
               00023                                                 movf    source+2,W
               00024                                                 btfsc   STATUS,C
               00025                                                  incfsz source+2,W
               00026                                                   addwf dest+2,F
               00027 
               00028                                                 movf    source+3,W
               00029                                                 btfsc   STATUS,C
               00030                                                  incfsz source+3,W
               00031                                                   addwf dest+3,F
               00032         endm
               00033         
               00034 _@SUB   macro dest,source
               00035                                                 movfw   source                          ; Add source to dest
               00036                                                 subwf   dest,f
               00037 
               00038                                                 movfw   source+1
               00039                                                 skpc                    
               00040                                                 incfsz  source+1,W
               00041                                                 subwf   dest+1,f
               00042 
               00043                                                 movfw   source+2
               00044                                                 skpc                    
               00045                                                 incfsz  source+2,W
               00046                                                 subwf   dest+2,f
               00047 
               00048                                                 movfw   source+3
               00049                                                 skpc                    
               00050                                                 incfsz  source+3,W
               00051                                                 subwf   dest+3,f
               00052 
               00053                                                 movfw   dest
               00054                                                 movwf   source
               00055                                                 movfw   dest+1
               00056                                                 movwf   source+1
               00057                                                 movfw   dest+2
               00058                                                 movwf   source+2
               00059                                                 movfw   dest+3
               00060                                                 movwf   source+3
               00061         endm
               00062         
               00063 _@MOVE macro source,dest
               00064                                                 movfw   source
               00065                                                 movwf   dest
               00066                                                 movfw   source+1
               00067                                                 movwf   dest+1
               00068                                                 movfw   source+2
               00069                                                 movwf   dest+2
               00070                                                 movfw   source+3
               00071                                                 movwf   dest+3
               00072         endm
               00073                                                         
               00074 _@2COMP macro source,dest
               00075                                                 comf    source,W                        ;1 2's Comp Timeout
               00076                                                 movwf   dest                            ;1
               00077                                                 comf    source+1,W                      ;1
               00078                                                 movwf   dest+1                          ;1
               00079                                                 comf    source+2,W                      ;1
               00080                                                 movwf   dest+2                          ;1
               00081                                                 comf    source+3,W                      ;1
               00082                                                 movwf   dest+3                          ;1
               00083                                                 incf    dest,F                          ;1
               00084                                                 skpnz                                           ;1
               00085                                                 incf    dest+1,F                        ;1
               00086                                                 skpnz                                           ;1
               00087                                                 incf    dest+2,F                        ;1
               00088                                                 skpnz                                           ;1
               00089                                                 incf    dest+3,F                        ;1
               00090         endm
               00091                 
               00092 _@DONE  macro
               00093                                                 return
               00094                 endm
               00095                 
               00096 _@DONECLRIRP    macro
               00097         if _BANK2_START != 0
               00098                                                 bcf     STATUS,IRP
               00099                 endif
               00100                                                 return
               00101                 endm
               00102 
               00103 _@DECSP macro arg
               00104                                                 movlw   -(4*arg)
               00105                                                 addwf   _SP,F
               00106                 endm
               00107                 
               00108 _@CLRSP macro
               00109                                                 movlw   _STACK
               00110                                                 movwf   _SP
               00111                 endm
               00112 
  00000000     00113 _scyclescnt = 0
  00000000     00114 _acyclescnt = 0
  00000000     00115 _cyclescnt = 0
  00000000     00116 _labelnumber = 0
               00117 
               00118 _@SCYCLES macro cycles,type
               00119         errorlevel -207
               00120                 local mhzmul = _MHZ/(4000000/256)
               00121 
               00122                 local cyclecnt = ((cycles<<24)/mhzmul)
               00123                 if (cyclecnt&0xFFFF)>0
               00124 _scyclescnt=(LOW(cyclecnt>>16))
               00125                 else
               00126 _scyclescnt=(LOW(cyclecnt>>16))-1
               00127                 endif
               00128 
               00129                 local fractionlo = LOW (((cycles<<24)/mhzmul)&0xFFFF)
               00130                 local fractionhi = HIGH (((cycles<<24)/mhzmul)&0xFFFF)
               00131                 local integer = LOW (((cycles<<24)/mhzmul)>>16)
               00132 
               00133                 movlw   integer
               00134                 movwf   _CMD+4
               00135                 movlw   fractionhi
               00136                 movwf   _CMD+3
               00137                 movlw   fractionlo
               00138                 movwf   _CMD+2          ;6
               00139         errorlevel +207
               00140         endm
               00141         
               00142 _@SBLOCKCYCLES macro cycles,mhz
               00143         errorlevel -207
               00144                 if (_MHZ < (mhz+1000000)) & (_MHZ >= mhz)
               00145                         _@SCYCLES cycles,4
               00146                 endif
               00147                 if (_MHZ < (mhz+2000000)) & (_MHZ >= (mhz+1000000))
               00148                         _@SCYCLES cycles,2
               00149                 endif
               00150                 if (_MHZ < (mhz+3000000)) & (_MHZ >= (mhz+2000000))
               00151                         _@SCYCLES cycles,4
               00152                 endif
               00153                 if (_MHZ < (mhz+4000000)) & (_MHZ >= (mhz+3000000))
               00154                         _@SCYCLES cycles,1
               00155                 endif
               00156         errorlevel +207
               00157         endm        
               00158 
               00159 _@SETCYCLES macro cycles
               00160         errorlevel -207
               00161                 if _MHZ < 4500000
               00162 _scyclescnt=((cycles*4000000)/_MHZ)-1
               00163                         movlw   (cycles*4000000)/_MHZ                   ; 1
               00164                 endif
               00165                 
               00166                 if (_MHZ < 8500000) & (_MHZ >= 4500000)
               00167                         _@SBLOCKCYCLES cycles,4500000
               00168                 endif
               00169                 
               00170                 if (_MHZ < 12500000) & (_MHZ >= 8500000)
               00171                         _@SBLOCKCYCLES cycles,8500000
               00172                 endif
               00173                 
               00174                 if (_MHZ < 16500000) & (_MHZ >= 12500000)
               00175                         _@SBLOCKCYCLES cycles,12500000
               00176                 endif
               00177                 
               00178                 if (_MHZ < 20500000) & (_MHZ >= 16500000)
               00179                         _@SBLOCKCYCLES cycles,16500000
               00180                 endif
               00181                 
               00182                 if (_MHZ < 24500000) & (_MHZ >= 20500000)
               00183                         _@SBLOCKCYCLES cycles,20500000
               00184                 endif
               00185                 
               00186                 if (_MHZ < 28500000) & (_MHZ >= 24500000)
               00187                         _@SBLOCKCYCLES cycles,24500000
               00188                 endif
               00189                 
               00190                 if (_MHZ < 32500000) & (_MHZ >= 28500000)
               00191                         _@SBLOCKCYCLES cycles,28500000
               00192                 endif
               00193                 
               00194                 if (_MHZ < 36500000) & (_MHZ >= 32500000)
               00195                         _@SBLOCKCYCLES cycles,32500000
               00196                 endif
               00197                 
               00198                 if (_MHZ < 40500000) & (_MHZ >= 36500000)
               00199                         _@SBLOCKCYCLES cycles,36500000
               00200                 endif
               00201         errorlevel +207
               00202         endm
               00203 
               00204 _@ACYCLES macro cycles,type
               00205         errorlevel -207
               00206                 local mhzmul = _MHZ/(4000000/256)
               00207 
               00208                 local cyclecnt = ((cycles<<24)/mhzmul)
               00209                 if (cyclecnt&0xFFFF)>0
               00210 _acyclescnt=(LOW(cyclecnt>>16))
               00211                 else
               00212 _acyclescnt=(LOW(cyclecnt>>16))-1
               00213                 endif
               00214 
               00215                 local fractionlo = LOW (((cycles<<24)/mhzmul)&0xFFFF)
               00216                 local fractionhi = HIGH (((cycles<<24)/mhzmul)&0xFFFF)
               00217                 local integer = LOW (((cycles<<24)/mhzmul)>>16)
               00218 
               00219                 movlw   fractionlo
               00220                 addwf   _CMD+2,F
               00221                 movlw   fractionhi
               00222                 skpnc
               00223                 addlw   1
               00224                 addwf   _CMD+3,F
               00225                 movlw   integer
               00226                 skpnc
               00227                 addlw   1       
               00228                 addwf   _CMD+4,F        ;10
               00229         errorlevel +207
               00230         endm
               00231         
               00232 _@ABLOCKCYCLES macro cycles,mhz
               00233         errorlevel -207
               00234                 if (_MHZ < (mhz+1000000)) & (_MHZ >= mhz)
               00235                         _@ACYCLES cycles,4
               00236                 endif
               00237                 if (_MHZ < (mhz+2000000)) & (_MHZ >= (mhz+1000000))
               00238                         _@ACYCLES cycles,2
               00239                 endif
               00240                 if (_MHZ < (mhz+3000000)) & (_MHZ >= (mhz+2000000))
               00241                         _@ACYCLES cycles,4
               00242                 endif
               00243                 if (_MHZ < (mhz+4000000)) & (_MHZ >= (mhz+3000000))
               00244                         _@ACYCLES cycles,1
               00245                 endif
               00246         errorlevel +207
               00247         endm        
               00248 
               00249 _@ADDCYCLES macro cycles
               00250         errorlevel -207
               00251                 if _MHZ < 4500000
               00252 _acyclescnt=((cycles*4000000)/_MHZ)-1
               00253                         addlw   (cycles*4000000)/_MHZ                   ; 1
               00254                 endif
               00255                 
               00256                 if (_MHZ < 8500000) & (_MHZ >= 4500000)
               00257                         _@ABLOCKCYCLES cycles,4500000
               00258                 endif
               00259                 
               00260                 if (_MHZ < 12500000) & (_MHZ >= 8500000)
               00261                         _@ABLOCKCYCLES cycles,8500000
               00262                 endif
               00263                 
               00264                 if (_MHZ < 16500000) & (_MHZ >= 12500000)
               00265                         _@ABLOCKCYCLES cycles,12500000
               00266                 endif
               00267                 
               00268                 if (_MHZ < 20500000) & (_MHZ >= 16500000)
               00269                         _@ABLOCKCYCLES cycles,16500000
               00270                 endif
               00271                 
               00272                 if (_MHZ < 24500000) & (_MHZ >= 20500000)
               00273                         _@ABLOCKCYCLES cycles,20500000
               00274                 endif
               00275                 
               00276                 if (_MHZ < 28500000) & (_MHZ >= 24500000)
               00277                         _@ABLOCKCYCLES cycles,24500000
               00278                 endif
               00279                 
               00280                 if (_MHZ < 32500000) & (_MHZ >= 28500000)
               00281                         _@ABLOCKCYCLES cycles,28500000
               00282                 endif
               00283                 
               00284                 if (_MHZ < 36500000) & (_MHZ >= 32500000)
               00285                         _@ABLOCKCYCLES cycles,32500000
               00286                 endif
               00287                 
               00288                 if (_MHZ < 40500000) & (_MHZ >= 36500000)
               00289                         _@ABLOCKCYCLES cycles,36500000
               00290                 endif
               00291         errorlevel +207
               00292         endm
               00293 
               00294 _@DELAYBLOCK macro
               00295                 while _cyclescount>0x100
               00296                         goto    $+1
               00297 _cyclescount-=0x200
               00298                 endw
               00299                 if _cyclescount>0
               00300                         nop
               00301 _cyclescount-=0x100
               00302                 endif
               00303         endm
               00304         
               00305 _@DELAYJMPTABLE macro reg
               00306         errorlevel -207
               00307 
               00308         ;***JMP TABLE***
               00309         if _MHZ >= 4000000
               00310 _labelnumber=$
               00311                 comf    reg,f           ;1
               00312                 movlw   HIGH _label#v((_labelnumber<<16) | (_scyclescnt+1))     ;1
               00313                 movwf   PCLATH          ;1
               00314                 movlw   LOW _label#v((_labelnumber<<16) | (_scyclescnt+1))      ;1
               00315                 addwf   reg,w           ;1
               00316                 skpnc                           ;1
               00317                 incf    PCLATH,F        ;1
               00318                 movwf   PCL                     ;2(12)
               00319 _label#v((_labelnumber<<16) | (_scyclescnt+1))
               00320 
               00321                 local mhzmul = _MHZ/(4000000/256)
               00322                 local savescnt=_scyclescnt
               00323                 while _scyclescnt>0
               00324                         if((mhzmul)>=0x200)
               00325                                 goto    _label#v((_labelnumber<<16) | _scyclescnt)
               00326 _scyclescnt--
               00327                         else
               00328                                 nop
               00329 _scyclescnt--
               00330                         endif
               00331                 endw
               00332 _scyclescnt=savescnt
               00333         else
               00334                 return
               00335         endif
               00336         ;***JMP TABLE***
               00337 
               00338         if _MHZ >= 4000000
               00339         ;***RETURN TABLE***
               00340                 while (_acyclescnt-_scyclescnt)>0
               00341                         return
               00342 _acyclescnt-=0x100
               00343                 endw
               00344         ;***RETURN TABLE***
               00345 
               00346         ;***DELAY TABLE***
               00347 _cyclescount = mhzmul
               00348                 while _scyclescnt>0
               00349                         local mhzmul = _MHZ/(4000000/256)
               00350                         if (_cyclescount>0x100)
               00351                                 goto    $+1
               00352 _cyclescount-=0x200
               00353                         endif
               00354 _label#v((_labelnumber<<16) | _scyclescnt)
               00355                         _@DELAYBLOCK
               00356 _scyclescnt--
               00357 _cyclescount = _cyclescount + mhzmul
               00358                 endw
               00359                 return
               00360         ;***DELAY TABLE***
               00361 
               00362         endif
               00363         errorlevel +207
               00364         endm
               00365 
               00366 ;==========================================================================
               00367 ;
               00368 ;       Inline Macro Definition
               00369 ;
               00370 ;==========================================================================
               00371 
               00372 _@ADDLW macro lit
               00373                                 addlw lit
               00374                 endm
               00375 
               00376 _@ANDLW macro lit
               00377                                 andlw lit
               00378                 endm
               00379 
               00380 _@CLRWDT macro
               00381                                 clrwdt
               00382                 endm
               00383 
               00384 _@IORLW macro lit
               00385                                 iorlw lit
               00386                 endm
               00387 
               00388 _@MOVLW macro lit
               00389                                 movlw lit
               00390                 endm
               00391 
               00392 _@OPTION macro
               00393                                 option
               00394                 endm
               00395 
               00396 _@RETFIE macro
               00397                                 retfie
               00398                 endm
               00399 
               00400 _@RETLW  macro lit
               00401                                 retlw lit
               00402                 endm
               00403 
               00404 _@RETURN  macro
               00405                                 return
               00406                 endm
               00407 
               00408 _@SLEEP macro
               00409                                 sleep
               00410                 endm
               00411 
               00412 _@SUBLW macro lit
               00413                                 sublw lit
               00414                 endm
               00415 
               00416 _@TRIS macro reg
               00417                                 tris reg&0x7f
               00418                 endm
               00419 
               00420 _@XORLW macro lit
               00421                                 xorlw lit
               00422                 endm
               00423 
               00424 _@ADDWF  macro reg,wreg
               00425                                 addwf   reg&0x7f,wreg
               00426                 endm
               00427 _@ANDWF  macro reg,wreg
               00428                                 andwf   reg&0x7f,wreg
               00429                 endm
               00430 _@CLRF   macro reg
               00431                                 clrf    reg&0x7f
               00432                 endm
               00433 _@CLRW   macro
               00434                                 clrw
               00435                 endm
               00436 _@COMF   macro reg,wreg
               00437                                 comf    reg&0x7f,wreg
               00438                 endm
               00439 _@DECF   macro reg,wreg
               00440                                 decf    reg&0x7f,wreg
               00441                 endm
               00442 _@DECFSZ macro reg,wreg
               00443                                 decfsz  reg&0x7f,wreg
               00444                 endm
               00445 _@INCF   macro reg,wreg
               00446                                 incf    reg&0x7f,wreg
               00447                 endm
               00448 _@INCFSZ macro reg,wreg
               00449                                 incfsz  reg&0x7f,wreg
               00450                 endm
               00451 _@IORWF  macro reg,wreg
               00452                                 iorwf   reg&0x7f,wreg
               00453                 endm
               00454 _@MOVF   macro reg,wreg
               00455                                 movf    reg&0x7f,wreg
               00456                 endm
               00457 _@MOVFW  macro reg
               00458                                 movfw   reg&0x7f
               00459                 endm
               00460 _@MOVWF  macro reg
               00461                                 movwf   reg&0x7f
               00462                 endm
               00463 _@NOP   macro
               00464                                 nop
               00465                 endm
               00466 _@RLF    macro reg,wreg
               00467                                 rlf     reg&0x7f,wreg
               00468                 endm
               00469 _@RRF    macro reg,wreg
               00470                                 rrf     reg&0x7f,wreg
               00471                 endm
               00472 _@SUBWF  macro reg,wreg
               00473                                 subwf   reg&0x7f,wreg
               00474                 endm
               00475 _@SWAPF  macro reg,wreg
               00476                                 swapf   reg&0x7f,wreg
               00477                 endm
               00478 _@XORWF  macro reg,wreg
               00479                                 xorwf   reg&0x7f,wreg
               00480                 endm
               00481 _@BCF    macro reg,b
               00482                                 bcf     reg&0x7f,b
               00483                 endm
               00484 _@BSF    macro reg,b
               00485                                 bsf     reg&0x7f,b
               00486                 endm
               00487 _@BTFSC  macro reg,b
               00488                                 btfsc   reg&0x7f,b
               00489                 endm
               00490 _@BTFSS  macro reg,b
               00491                                 btfss   reg&0x7f,b
               00492                 endm
               00493 _@ADDCF macro reg,wreg
               00494                                 addcf   reg&0x7f,wreg
               00495                 endm
               00496 _@ADDDCF macro reg,wreg
               00497                                 adddcf  reg&0x7f,wreg
               00498                 endm
               00499 _@B macro lit
               00500                                 b       lit
               00501                 endm
               00502 _@BC macro lit
               00503                                 bc      lit
               00504                 endm
               00505 _@BDC macro lit
               00506                                 bdc     lit
               00507                 endm
               00508 _@BNC macro lit
               00509                                 bnc      lit
               00510                 endm
               00511 _@BNDC macro lit
               00512                                 bndc      lit
               00513                 endm
               00514 _@BNZ macro lit
               00515                                 bnz      lit
               00516                 endm
               00517 _@BZ macro lit
               00518                                 bz      lit
               00519                 endm
               00520 _@CLRC macro
               00521                                 clrc
               00522                 endm
               00523 _@CLRDC macro
               00524                                 clrdc
               00525                 endm
               00526 _@CLRZ macro
               00527                                 clrz
               00528                 endm
               00529 _@LCALL macro lit
               00530                                 lcall      lit
               00531                 endm
               00532 _@LGOTO macro lit
               00533                                 lgoto      lit
               00534                 endm
               00535 _@NEGF macro reg,wreg
               00536                                 negf    reg,wreg
               00537                 endm
               00538 _@SETC macro
               00539                                 setc
               00540                 endm
               00541 _@SETDC macro
               00542                                 setdc
               00543                 endm
               00544 _@SKPC macro
               00545                                 skpc
               00546                 endm
               00547 _@SKPDC macro
               00548                                 skpdc
               00549                 endm
               00550 _@SKPNC macro
               00551                                 skpnc
               00552                 endm
               00553 _@SKPNDC macro
               00554                                 skpndc
               00555                 endm
               00556 _@SKPNZ macro
               00557                                 skpnz
               00558                 endm
               00559 _@SKPZ macro
               00560                                 skpz
               00561                 endm
               00562 _@SUBCF macro reg,wreg
               00563                                 subcf reg&0x7f,wreg
               00564                 endm
               00565 _@SUBDCF macro reg,wreg
               00566                                 subdcf reg&0x7f,wreg
               00567                 endm
               00568 _@TSTF macro reg
               00569                                 tstf reg&0x7f
               00570                 endm
               00571 
               00572 ;==========================================================================
               00573 ;
               00574 ;       Table Jump Macro Definition
               00575 ;
               00576 ;==========================================================================
               00577 
               00578 _@TBLJMP macro tblmask,tbladdress,tempreg
               00579                                 andlw   tblmask
               00580                                 movwf   tempreg
               00581                                 movlw   HIGH tbladdress
               00582                                 movwf   PCLATH
               00583                                 movlw   LOW tbladdress
               00584                                 addwf   tempreg,W
               00585                                 skpnc
               00586                                 incf    PCLATH,F
               00587                                 movwf   PCL
               00588                 endm
               00589 
               00590 ;==========================================================================
               00591 ;
               00592 ;       Clock delay Macro Definition
               00593 ;
               00594 ;==========================================================================
               00595 
               00596 _@CLKDELAY macro val
               00597         local clks = val
               00598         if clks > ((255*4)+2)
               00599                 messg "Error: Clk cycles is too large"
               00600         else            
               00601                 if clks >= 2
               00602 clks = clks - 2
               00603                         movlw   clks / 4                ;1
               00604                         movwf   _DEBUGWORK+2    ;1
               00605                 endif
               00606                 if (clks >= 4)
               00607 clkc = clkc % 4         
               00608                         clrwdt                  ;1
               00609                         decfsz  _DEBUGWORK+2,F  ;1/2
               00610                         goto    $-2             ;2/0
               00611                         nop                                             ;0/1(6n)
               00612                 endif
               00613                 if clks == 1
               00614                         nop
               00615                 endif
               00616                 if clks == 2
               00617                         goto    $+1
               00618                 endif
               00619                 if clks == 3
               00620                         goto    $+1
               00621                         nop
               00622                 endif
               00623         endif           
               00624                 endm
               00625 
               00626 ;==========================================================================
               00627 ;
               00628 ;       Delay Utility macro
               00629 ;
               00630 ;==========================================================================
               00631 
               00632 _@UTILDELAY macro cycles
               00633                 local cnt = cycles
               00634         if cnt >= 10
               00635 cnt = cnt - 4
               00636                                 movlw   LOW (cnt / 6)           ;1
               00637                                 movwf   _DEBUGWORK+2            ;1
               00638                                 movlw   HIGH ((cnt / 6)+1)      ;1
               00639                                 movwf   _DEBUGWORK+3            ;1(4)
               00640                 if (cnt > (255*6))
               00641 cnt = cnt % 6
               00642                                 clrwdt                  ;1
               00643                                 decfsz  _DEBUGWORK+2,F  ;1
               00644                                 incf    _DEBUGWORK+3,F  ;1
               00645                                 decfsz  _DEBUGWORK+3,F  ;1/2
               00646                                 goto    $-4             ;2/0
               00647                                 nop                                             ;0/1(6n)
               00648                 endif                           
               00649                 if cnt >= 6
               00650 cnt = cnt % 6
               00651                                 clrwdt                  ;1
               00652                                 goto    $+1                             ;2
               00653                                 decfsz  _DEBUGWORK+2,F  ;1/2
               00654                                 goto    $-3             ;2/0
               00655                                 nop                                             ;0/1(6n)
               00656                 endif
               00657         endif
               00658         while cnt>1
               00659                                 goto    $+1
               00660 cnt = cnt - 2
               00661         endw
               00662         if cnt>0
               00663                                 nop
               00664         endif
               00665                 endm
               00666 
               00667 ;==========================================================================
               00668 ;
               00669 ;       Rate Delay Macro Definition
               00670 ;
               00671 ;==========================================================================
               00672 
               00673 _@RATEDELAY macro rate,offset
               00674                 local cycles = ((_MHZ/4)/rate)
               00675                 local t1 = (_MHZ/4)/cycles
               00676                 local t2 = (_MHZ/4)/(cycles+1)
               00677                 local t3 = rate-t1
               00678                 local t4 = rate-t2
               00679                 if t3 < 0
               00680 t3 = t3 * -1
               00681                 endif
               00682                 if t4 < 0
               00683 t4 = t4 * -1
               00684                 endif
               00685                 if t4 < t3
               00686 cycles = cycles + 1 
               00687                 endif
               00688         if cycles < offset
               00689                 messg "Error: RateDelay cycles are less than OFFSET"
               00690         endif
               00691 cycles = cycles - offset
               00692                 _@UTILDELAY cycles
               00693                 endm
               00694 
               00695 ;==========================================================================
               00696 ;
               00697 ;       MicroSec delay Macro Definition
               00698 ;
               00699 ;==========================================================================
               00700 
               00701 _@USDELAY macro usec
               00702                 local cycles = usec * (_MHZ/4000000)
               00703         if cycles > ((65535*6)+4)
               00704                 messg "Error: USDELAY cycles is too large"
               00705         else
               00706                 _@UTILDELAY cycles
               00707         endif
               00708                 endm
               00709 
               00710 ;==========================================================================
               00711 ;
               00712 ;       MilliSec Delay Macro Definition
               00713 ;
               00714 ;==========================================================================
               00715 
               00716 _@MSDELAY macro msec
               00717                 local cycles = msec * (_MHZ/4000000) * 1000
               00718         if cycles > ((65535*6)+4)
               00719                 messg "Error: MSDELAY cycles is too large"
               00720         else
               00721                 _@UTILDELAY cycles
               00722         endif
               00723                 endm
               00724 
               00725 ;==========================================================================
               00726 ;
               00727 ;       Bank Select Macro Definition
               00728 ;
               00729 ;==========================================================================
               00730 
               00731 _@BANK  macro oldreg,newreg
               00732                 local oldbank = oldreg >> 7
               00733                 local newbank = newreg >> 7
               00734                 if(oldbank != newbank)
               00735                                 if ((oldbank ^ newbank)&01h)==01h
               00736                                                 if(oldbank & 01h)==01h
               00737                                                                 bcf STATUS,RP0
               00738                                                 else
               00739                                                                 bsf STATUS,RP0
               00740                                                 endif
               00741                                 endif
               00742                                 if ((oldbank ^ newbank)&02h)==02h
               00743                                                 if(oldbank & 02h)==02h
               00744                                                                 bcf STATUS,RP1
               00745                                                 else
               00746                                                                 bsf STATUS,RP1
               00747                                                 endif
               00748                                 endif
               00749                 endif
               00750                 endm
               00751 
               00752 ;==========================================================================
               00753 ;
               00754 ;       Inline Call Macro Definition
               00755 ;
               00756 ;==========================================================================
               00757 
               00758 _@CALL   macro label
               00759                 errorlevel -306
               00760         local address = $ & 0f800h
               00761         local address2 = label & 0f800h
               00762         if address != address2
               00763                 if(address==0x000)
               00764                         if(address2==0x800)
               00765                                 bsf     PCLATH,3
               00766                         endif
               00767                         if(address2==0x1000)
               00768                                 bsf     PCLATH,4
               00769                         endif
               00770                         if(address2==0x1800)
               00771                                 bsf     PCLATH,3
               00772                                 bsf     PCLATH,4
               00773                         endif
               00774                 endif
               00775                 if(address==0x800)
               00776                         if(address2==0x000)
               00777                                 bcf     PCLATH,3
               00778                         endif
               00779                         if(address2==0x1000)
               00780                                 bcf     PCLATH,3
               00781                                 bsf     PCLATH,4
               00782                         endif
               00783                         if(address2==0x1800)
               00784                                 bsf     PCLATH,4
               00785                         endif
               00786                 endif
               00787                 if(address==0x1000)
               00788                         if(address2==0x000)
               00789                                 bcf     PCLATH,4
               00790                         endif
               00791                         if(address2==0x800)
               00792                                 bsf     PCLATH,3
               00793                                 bcf     PCLATH,4
               00794                         endif
               00795                         if(address2==0x1800)
               00796                                 bsf     PCLATH,3
               00797                         endif
               00798                 endif
               00799                 if(address==0x1800)
               00800                         if(address2==0x000)
               00801                                 bcf     PCLATH,3
               00802                                 bcf     PCLATH,4
               00803                         endif
               00804                         if(address2==0x800)
               00805                                 bcf     PCLATH,4
               00806                         endif
               00807                         if(address2==0x1000)
               00808                                 bcf     PCLATH,3
               00809                         endif
               00810                 endif
               00811         endif           
               00812         call    label&0x7ff
               00813         if address != address2
               00814                 if(address==0x000)
               00815                         if(address2==0x800)
               00816                                 bcf     PCLATH,3
               00817                         endif
               00818                         if(address2==0x1000)
               00819                                 bcf     PCLATH,4
               00820                         endif
               00821                         if(address2==0x1800)
               00822                                 bcf     PCLATH,3
               00823                                 bcf     PCLATH,4
               00824                         endif
               00825                 endif
               00826                 if(address==0x800)
               00827                         if(address2==0x000)
               00828                                 bsf     PCLATH,3
               00829                         endif
               00830                         if(address2==0x1000)
               00831                                 bsf     PCLATH,3
               00832                                 bcf     PCLATH,4
               00833                         endif
               00834                         if(address2==0x1800)
               00835                                 bcf     PCLATH,4
               00836                         endif
               00837                 endif
               00838                 if(address==0x1000)
               00839                         if(address2==0x000)
               00840                                 bsf     PCLATH,4
               00841                         endif
               00842                         if(address2==0x800)
               00843                                 bcf     PCLATH,3
               00844                                 bsf     PCLATH,4
               00845                         endif
               00846                         if(address2==0x1800)
               00847                                 bcf     PCLATH,3
               00848                         endif
               00849                 endif
               00850                 if(address==0x1800)
               00851                         if(address2==0x000)
               00852                                 bsf     PCLATH,3
               00853                                 bsf     PCLATH,4
               00854                         endif
               00855                         if(address2==0x800)
               00856                                 bsf     PCLATH,4
               00857                         endif
               00858                         if(address2==0x1000)
               00859                                 bsf     PCLATH,3
               00860                         endif
               00861                 endif
               00862         endif           
               00863                 errorlevel +306
               00864         endm
               00865         
               00866 _@CALLFIXED   macro label
               00867                 errorlevel -306
               00868         if((label&0x0800)==0x0800)
               00869                 bsf     PCLATH,3
               00870         else
               00871                 bcf     PCLATH,3
               00872         endif
               00873         if((label&0x1000)==0x1000)
               00874                 bsf     PCLATH,4
               00875         else
               00876                 bcf     PCLATH,4
               00877         endif
               00878         call    label&0x7ff
               00879         if(($&0x0800)==0x0800)
               00880                 bsf     PCLATH,3
               00881         else
               00882                 bcf     PCLATH,3
               00883         endif
               00884         if(($&0x1000)==0x1000)
               00885                 bsf     PCLATH,4
               00886         else
               00887                 bcf     PCLATH,4
               00888         endif
               00889                 errorlevel +306
               00890         endm
               00891         
               00892 ;==========================================================================
               00893 ;
               00894 ;       GetCmd Macro Definition
               00895 ;
               00896 ;==========================================================================
               00897 
               00898 _@GETCMD   macro 
               00899                 errorlevel -306
               00900         local address = $ & 0f800h
               00901         local address2 = _GETCMD & 0f800h
               00902         if address != address2
               00903                 if(address==0x000)
               00904                         if(address2==0x800)
               00905                                 bsf     PCLATH,3
               00906                         endif
               00907                         if(address2==0x1000)
               00908                                 bsf     PCLATH,4
               00909                         endif
               00910                         if(address2==0x1800)
               00911                                 bsf     PCLATH,3
               00912                                 bsf     PCLATH,4
               00913                         endif
               00914                 endif
               00915                 if(address==0x800)
               00916                         if(address2==0x000)
               00917                                 bcf     PCLATH,3
               00918                         endif
               00919                         if(address2==0x1000)
               00920                                 bcf     PCLATH,3
               00921                                 bsf     PCLATH,4
               00922                         endif
               00923                         if(address2==0x1800)
               00924                                 bsf     PCLATH,4
               00925                         endif
               00926                 endif
               00927                 if(address==0x1000)
               00928                         if(address2==0x000)
               00929                                 bcf     PCLATH,4
               00930                         endif
               00931                         if(address2==0x800)
               00932                                 bsf     PCLATH,3
               00933                                 bcf     PCLATH,4
               00934                         endif
               00935                         if(address2==0x1800)
               00936                                 bsf     PCLATH,3
               00937                         endif
               00938                 endif
               00939                 if(address==0x1800)
               00940                         if(address2==0x000)
               00941                                 bcf     PCLATH,3
               00942                                 bcf     PCLATH,4
               00943                         endif
               00944                         if(address2==0x800)
               00945                                 bcf     PCLATH,4
               00946                         endif
               00947                         if(address2==0x1000)
               00948                                 bcf     PCLATH,3
               00949                         endif
               00950                 endif
               00951         endif           
               00952         call    _GETCMD&0x7ff
               00953         if(($&0x0800)==0x0800)
               00954                 bsf     PCLATH,3
               00955         else
               00956                 bcf     PCLATH,3
               00957         endif
               00958         if(($&0x1000)==0x1000)
               00959                 bsf     PCLATH,4
               00960         else
               00961                 bcf     PCLATH,4
               00962         endif
               00963                 errorlevel +306
               00964         endm
               00965         
               00966 ;==========================================================================
               00967 ;
               00968 ;       Inline Goto Macro Definition
               00969 ;
               00970 ;==========================================================================
               00971 
               00972 _@GOTO   macro label
               00973                 errorlevel -306
               00974         local address = $ & 0f800h
               00975         local address2 = label & 0f800h
               00976         if address != address2
               00977                 if(address==0x000)
               00978                         if(address2==0x800)
               00979                                 bsf     PCLATH,3
               00980                         endif
               00981                         if(address2==0x1000)
               00982                                 bsf     PCLATH,4
               00983                         endif
               00984                         if(address2==0x1800)
               00985                                 bsf     PCLATH,3
               00986                                 bsf     PCLATH,4
               00987                         endif
               00988                 endif
               00989                 if(address==0x800)
               00990                         if(address2==0x000)
               00991                                 bcf     PCLATH,3
               00992                         endif
               00993                         if(address2==0x1000)
               00994                                 bcf     PCLATH,3
               00995                                 bsf     PCLATH,4
               00996                         endif
               00997                         if(address2==0x1800)
               00998                                 bsf     PCLATH,4
               00999                         endif
               01000                 endif
               01001                 if(address==0x1000)
               01002                         if(address2==0x000)
               01003                                 bcf     PCLATH,4
               01004                         endif
               01005                         if(address2==0x800)
               01006                                 bsf     PCLATH,3
               01007                                 bcf     PCLATH,4
               01008                         endif
               01009                         if(address2==0x1800)
               01010                                 bsf     PCLATH,3
               01011                         endif
               01012                 endif
               01013                 if(address==0x1800)
               01014                         if(address2==0x000)
               01015                                 bcf     PCLATH,3
               01016                                 bcf     PCLATH,4
               01017                         endif
               01018                         if(address2==0x800)
               01019                                 bcf     PCLATH,4
               01020                         endif
               01021                         if(address2==0x1000)
               01022                                 bcf     PCLATH,3
               01023                         endif
               01024                 endif
               01025         endif           
               01026         goto    label&0x7ff
               01027                 errorlevel +306
               01028         endm
               01029 
               01030 ;==========================================================================
               01031 ;
               01032 ;       Special Macro Definition
               01033 ;
               01034 ;==========================================================================
               01035 
               01036 _@DECFGZ macro file,dir,label
               01037                 errorlevel -306
               01038         local address = $ & 0f800h
               01039         local address2 = label & 0f800h
               01040         if address != address2
               01041                 if(address==0x000)
               01042                         if(address2==0x800)
               01043                                 bsf     PCLATH,3
               01044                         endif
               01045                         if(address2==0x1000)
               01046                                 bsf     PCLATH,4
               01047                         endif
               01048                         if(address2==0x1800)
               01049                                 bsf     PCLATH,3
               01050                                 bsf     PCLATH,4
               01051                         endif
               01052                 endif
               01053                 if(address==0x800)
               01054                         if(address2==0x000)
               01055                                 bcf     PCLATH,3
               01056                         endif
               01057                         if(address2==0x1000)
               01058                                 bcf     PCLATH,3
               01059                                 bsf     PCLATH,4
               01060                         endif
               01061                         if(address2==0x1800)
               01062                                 bsf     PCLATH,4
               01063                         endif
               01064                 endif
               01065                 if(address==0x1000)
               01066                         if(address2==0x000)
               01067                                 bcf     PCLATH,4
               01068                         endif
               01069                         if(address2==0x800)
               01070                                 bsf     PCLATH,3
               01071                                 bcf     PCLATH,4
               01072                         endif
               01073                         if(address2==0x1800)
               01074                                 bsf     PCLATH,3
               01075                         endif
               01076                 endif
               01077                 if(address==0x1800)
               01078                         if(address2==0x000)
               01079                                 bcf     PCLATH,3
               01080                                 bcf     PCLATH,4
               01081                         endif
               01082                         if(address2==0x800)
               01083                                 bcf     PCLATH,4
               01084                         endif
               01085                         if(address2==0x1000)
               01086                                 bcf     PCLATH,3
               01087                         endif
               01088                 endif
               01089         endif           
               01090                 decfsnz  file,dir
               01091                 goto label   
               01092         if address != address2
               01093                 if(address==0x000)
               01094                         if(address2==0x800)
               01095                                 bcf     PCLATH,3
               01096                         endif
               01097                         if(address2==0x1000)
               01098                                 bcf     PCLATH,4
               01099                         endif
               01100                         if(address2==0x1800)
               01101                                 bcf     PCLATH,3
               01102                                 bcf     PCLATH,4
               01103                         endif
               01104                 endif
               01105                 if(address==0x800)
               01106                         if(address2==0x000)
               01107                                 bsf     PCLATH,3
               01108                         endif
               01109                         if(address2==0x1000)
               01110                                 bsf     PCLATH,3
               01111                                 bcf     PCLATH,4
               01112                         endif
               01113                         if(address2==0x1800)
               01114                                 bcf     PCLATH,4
               01115                         endif
               01116                 endif
               01117                 if(address==0x1000)
               01118                         if(address2==0x000)
               01119                                 bsf     PCLATH,4
               01120                         endif
               01121                         if(address2==0x800)
               01122                                 bcf     PCLATH,3
               01123                                 bsf     PCLATH,4
               01124                         endif
               01125                         if(address2==0x1800)
               01126                                 bcf     PCLATH,3
               01127                         endif
               01128                 endif
               01129                 if(address==0x1800)
               01130                         if(address2==0x000)
               01131                                 bsf     PCLATH,3
               01132                                 bsf     PCLATH,4
               01133                         endif
               01134                         if(address2==0x800)
               01135                                 bsf     PCLATH,4
               01136                         endif
               01137                         if(address2==0x1000)
               01138                                 bsf     PCLATH,3
               01139                         endif
               01140                 endif
               01141         endif           
               01142                 errorlevel +306
               01143                 endm
               01144 
               01145 _@DECFGNZ macro file,dir,label
               01146                 errorlevel -306
               01147         local address = $ & 0f800h
               01148         local address2 = label & 0f800h
               01149         if address != address2
               01150                 if(address==0x000)
               01151                         if(address2==0x800)
               01152                                 bsf     PCLATH,3
               01153                         endif
               01154                         if(address2==0x1000)
               01155                                 bsf     PCLATH,4
               01156                         endif
               01157                         if(address2==0x1800)
               01158                                 bsf     PCLATH,3
               01159                                 bsf     PCLATH,4
               01160                         endif
               01161                 endif
               01162                 if(address==0x800)
               01163                         if(address2==0x000)
               01164                                 bcf     PCLATH,3
               01165                         endif
               01166                         if(address2==0x1000)
               01167                                 bcf     PCLATH,3
               01168                                 bsf     PCLATH,4
               01169                         endif
               01170                         if(address2==0x1800)
               01171                                 bsf     PCLATH,4
               01172                         endif
               01173                 endif
               01174                 if(address==0x1000)
               01175                         if(address2==0x000)
               01176                                 bcf     PCLATH,4
               01177                         endif
               01178                         if(address2==0x800)
               01179                                 bsf     PCLATH,3
               01180                                 bcf     PCLATH,4
               01181                         endif
               01182                         if(address2==0x1800)
               01183                                 bsf     PCLATH,3
               01184                         endif
               01185                 endif
               01186                 if(address==0x1800)
               01187                         if(address2==0x000)
               01188                                 bcf     PCLATH,3
               01189                                 bcf     PCLATH,4
               01190                         endif
               01191                         if(address2==0x800)
               01192                                 bcf     PCLATH,4
               01193                         endif
               01194                         if(address2==0x1000)
               01195                                 bcf     PCLATH,3
               01196                         endif
               01197                 endif
               01198         endif           
               01199                 decfsz  file,dir
               01200                 goto label   
               01201         if address != address2
               01202                 if(address==0x000)
               01203                         if(address2==0x800)
               01204                                 bcf     PCLATH,3
               01205                         endif
               01206                         if(address2==0x1000)
               01207                                 bcf     PCLATH,4
               01208                         endif
               01209                         if(address2==0x1800)
               01210                                 bcf     PCLATH,3
               01211                                 bcf     PCLATH,4
               01212                         endif
               01213                 endif
               01214                 if(address==0x800)
               01215                         if(address2==0x000)
               01216                                 bsf     PCLATH,3
               01217                         endif
               01218                         if(address2==0x1000)
               01219                                 bsf     PCLATH,3
               01220                                 bcf     PCLATH,4
               01221                         endif
               01222                         if(address2==0x1800)
               01223                                 bcf     PCLATH,4
               01224                         endif
               01225                 endif
               01226                 if(address==0x1000)
               01227                         if(address2==0x000)
               01228                                 bsf     PCLATH,4
               01229                         endif
               01230                         if(address2==0x800)
               01231                                 bcf     PCLATH,3
               01232                                 bsf     PCLATH,4
               01233                         endif
               01234                         if(address2==0x1800)
               01235                                 bcf     PCLATH,3
               01236                         endif
               01237                 endif
               01238                 if(address==0x1800)
               01239                         if(address2==0x000)
               01240                                 bsf     PCLATH,3
               01241                                 bsf     PCLATH,4
               01242                         endif
               01243                         if(address2==0x800)
               01244                                 bsf     PCLATH,4
               01245                         endif
               01246                         if(address2==0x1000)
               01247                                 bsf     PCLATH,3
               01248                         endif
               01249                 endif
               01250         endif           
               01251                 errorlevel +306
               01252                 endm
               01253 
               01254 _@DECFCZ macro file,dir,label
               01255                 errorlevel -306
               01256         local address = $ & 0f800h
               01257         local address2 = label & 0f800h
               01258         if address != address2
               01259                 if(address==0x000)
               01260                         if(address2==0x800)
               01261                                 bsf     PCLATH,3
               01262                         endif
               01263                         if(address2==0x1000)
               01264                                 bsf     PCLATH,4
               01265                         endif
               01266                         if(address2==0x1800)
               01267                                 bsf     PCLATH,3
               01268                                 bsf     PCLATH,4
               01269                         endif
               01270                 endif
               01271                 if(address==0x800)
               01272                         if(address2==0x000)
               01273                                 bcf     PCLATH,3
               01274                         endif
               01275                         if(address2==0x1000)
               01276                                 bcf     PCLATH,3
               01277                                 bsf     PCLATH,4
               01278                         endif
               01279                         if(address2==0x1800)
               01280                                 bsf     PCLATH,4
               01281                         endif
               01282                 endif
               01283                 if(address==0x1000)
               01284                         if(address2==0x000)
               01285                                 bcf     PCLATH,4
               01286                         endif
               01287                         if(address2==0x800)
               01288                                 bsf     PCLATH,3
               01289                                 bcf     PCLATH,4
               01290                         endif
               01291                         if(address2==0x1800)
               01292                                 bsf     PCLATH,3
               01293                         endif
               01294                 endif
               01295                 if(address==0x1800)
               01296                         if(address2==0x000)
               01297                                 bcf     PCLATH,3
               01298                                 bcf     PCLATH,4
               01299                         endif
               01300                         if(address2==0x800)
               01301                                 bcf     PCLATH,4
               01302                         endif
               01303                         if(address2==0x1000)
               01304                                 bcf     PCLATH,3
               01305                         endif
               01306                 endif
               01307         endif           
               01308                 decfsnz  file,dir
               01309                 call label   
               01310         if address != address2
               01311                 if(address==0x000)
               01312                         if(address2==0x800)
               01313                                 bcf     PCLATH,3
               01314                         endif
               01315                         if(address2==0x1000)
               01316                                 bcf     PCLATH,4
               01317                         endif
               01318                         if(address2==0x1800)
               01319                                 bcf     PCLATH,3
               01320                                 bcf     PCLATH,4
               01321                         endif
               01322                 endif
               01323                 if(address==0x800)
               01324                         if(address2==0x000)
               01325                                 bsf     PCLATH,3
               01326                         endif
               01327                         if(address2==0x1000)
               01328                                 bsf     PCLATH,3
               01329                                 bcf     PCLATH,4
               01330                         endif
               01331                         if(address2==0x1800)
               01332                                 bcf     PCLATH,4
               01333                         endif
               01334                 endif
               01335                 if(address==0x1000)
               01336                         if(address2==0x000)
               01337                                 bsf     PCLATH,4
               01338                         endif
               01339                         if(address2==0x800)
               01340                                 bcf     PCLATH,3
               01341                                 bsf     PCLATH,4
               01342                         endif
               01343                         if(address2==0x1800)
               01344                                 bcf     PCLATH,3
               01345                         endif
               01346                 endif
               01347                 if(address==0x1800)
               01348                         if(address2==0x000)
               01349                                 bsf     PCLATH,3
               01350                                 bsf     PCLATH,4
               01351                         endif
               01352                         if(address2==0x800)
               01353                                 bsf     PCLATH,4
               01354                         endif
               01355                         if(address2==0x1000)
               01356                                 bsf     PCLATH,3
               01357                         endif
               01358                 endif
               01359         endif           
               01360                 errorlevel +306
               01361                 endm
               01362 
               01363 _@DECFCNZ macro file,dir,label
               01364                 errorlevel -306
               01365         local address = $ & 0f800h
               01366         local address2 = label & 0f800h
               01367         if address != address2
               01368                 if(address==0x000)
               01369                         if(address2==0x800)
               01370                                 bsf     PCLATH,3
               01371                         endif
               01372                         if(address2==0x1000)
               01373                                 bsf     PCLATH,4
               01374                         endif
               01375                         if(address2==0x1800)
               01376                                 bsf     PCLATH,3
               01377                                 bsf     PCLATH,4
               01378                         endif
               01379                 endif
               01380                 if(address==0x800)
               01381                         if(address2==0x000)
               01382                                 bcf     PCLATH,3
               01383                         endif
               01384                         if(address2==0x1000)
               01385                                 bcf     PCLATH,3
               01386                                 bsf     PCLATH,4
               01387                         endif
               01388                         if(address2==0x1800)
               01389                                 bsf     PCLATH,4
               01390                         endif
               01391                 endif
               01392                 if(address==0x1000)
               01393                         if(address2==0x000)
               01394                                 bcf     PCLATH,4
               01395                         endif
               01396                         if(address2==0x800)
               01397                                 bsf     PCLATH,3
               01398                                 bcf     PCLATH,4
               01399                         endif
               01400                         if(address2==0x1800)
               01401                                 bsf     PCLATH,3
               01402                         endif
               01403                 endif
               01404                 if(address==0x1800)
               01405                         if(address2==0x000)
               01406                                 bcf     PCLATH,3
               01407                                 bcf     PCLATH,4
               01408                         endif
               01409                         if(address2==0x800)
               01410                                 bcf     PCLATH,4
               01411                         endif
               01412                         if(address2==0x1000)
               01413                                 bcf     PCLATH,3
               01414                         endif
               01415                 endif
               01416         endif           
               01417                 decfsz  file,dir
               01418                 call label   
               01419         if address != address2
               01420                 if(address==0x000)
               01421                         if(address2==0x800)
               01422                                 bcf     PCLATH,3
               01423                         endif
               01424                         if(address2==0x1000)
               01425                                 bcf     PCLATH,4
               01426                         endif
               01427                         if(address2==0x1800)
               01428                                 bcf     PCLATH,3
               01429                                 bcf     PCLATH,4
               01430                         endif
               01431                 endif
               01432                 if(address==0x800)
               01433                         if(address2==0x000)
               01434                                 bsf     PCLATH,3
               01435                         endif
               01436                         if(address2==0x1000)
               01437                                 bsf     PCLATH,3
               01438                                 bcf     PCLATH,4
               01439                         endif
               01440                         if(address2==0x1800)
               01441                                 bcf     PCLATH,4
               01442                         endif
               01443                 endif
               01444                 if(address==0x1000)
               01445                         if(address2==0x000)
               01446                                 bsf     PCLATH,4
               01447                         endif
               01448                         if(address2==0x800)
               01449                                 bcf     PCLATH,3
               01450                                 bsf     PCLATH,4
               01451                         endif
               01452                         if(address2==0x1800)
               01453                                 bcf     PCLATH,3
               01454                         endif
               01455                 endif
               01456                 if(address==0x1800)
               01457                         if(address2==0x000)
               01458                                 bsf     PCLATH,3
               01459                                 bsf     PCLATH,4
               01460                         endif
               01461                         if(address2==0x800)
               01462                                 bsf     PCLATH,4
               01463                         endif
               01464                         if(address2==0x1000)
               01465                                 bsf     PCLATH,3
               01466                         endif
               01467                 endif
               01468         endif           
               01469                 errorlevel +306
               01470                 endm
               01471 
               01472 _@INCFGZ macro file,dir,label
               01473                 errorlevel -306
               01474         local address = $ & 0f800h
               01475         local address2 = label & 0f800h
               01476         if address != address2
               01477                 if(address==0x000)
               01478                         if(address2==0x800)
               01479                                 bsf     PCLATH,3
               01480                         endif
               01481                         if(address2==0x1000)
               01482                                 bsf     PCLATH,4
               01483                         endif
               01484                         if(address2==0x1800)
               01485                                 bsf     PCLATH,3
               01486                                 bsf     PCLATH,4
               01487                         endif
               01488                 endif
               01489                 if(address==0x800)
               01490                         if(address2==0x000)
               01491                                 bcf     PCLATH,3
               01492                         endif
               01493                         if(address2==0x1000)
               01494                                 bcf     PCLATH,3
               01495                                 bsf     PCLATH,4
               01496                         endif
               01497                         if(address2==0x1800)
               01498                                 bsf     PCLATH,4
               01499                         endif
               01500                 endif
               01501                 if(address==0x1000)
               01502                         if(address2==0x000)
               01503                                 bcf     PCLATH,4
               01504                         endif
               01505                         if(address2==0x800)
               01506                                 bsf     PCLATH,3
               01507                                 bcf     PCLATH,4
               01508                         endif
               01509                         if(address2==0x1800)
               01510                                 bsf     PCLATH,3
               01511                         endif
               01512                 endif
               01513                 if(address==0x1800)
               01514                         if(address2==0x000)
               01515                                 bcf     PCLATH,3
               01516                                 bcf     PCLATH,4
               01517                         endif
               01518                         if(address2==0x800)
               01519                                 bcf     PCLATH,4
               01520                         endif
               01521                         if(address2==0x1000)
               01522                                 bcf     PCLATH,3
               01523                         endif
               01524                 endif
               01525         endif           
               01526                 incfsnz  file,dir
               01527                 goto label   
               01528         if address != address2
               01529                 if(address==0x000)
               01530                         if(address2==0x800)
               01531                                 bcf     PCLATH,3
               01532                         endif
               01533                         if(address2==0x1000)
               01534                                 bcf     PCLATH,4
               01535                         endif
               01536                         if(address2==0x1800)
               01537                                 bcf     PCLATH,3
               01538                                 bcf     PCLATH,4
               01539                         endif
               01540                 endif
               01541                 if(address==0x800)
               01542                         if(address2==0x000)
               01543                                 bsf     PCLATH,3
               01544                         endif
               01545                         if(address2==0x1000)
               01546                                 bsf     PCLATH,3
               01547                                 bcf     PCLATH,4
               01548                         endif
               01549                         if(address2==0x1800)
               01550                                 bcf     PCLATH,4
               01551                         endif
               01552                 endif
               01553                 if(address==0x1000)
               01554                         if(address2==0x000)
               01555                                 bsf     PCLATH,4
               01556                         endif
               01557                         if(address2==0x800)
               01558                                 bcf     PCLATH,3
               01559                                 bsf     PCLATH,4
               01560                         endif
               01561                         if(address2==0x1800)
               01562                                 bcf     PCLATH,3
               01563                         endif
               01564                 endif
               01565                 if(address==0x1800)
               01566                         if(address2==0x000)
               01567                                 bsf     PCLATH,3
               01568                                 bsf     PCLATH,4
               01569                         endif
               01570                         if(address2==0x800)
               01571                                 bsf     PCLATH,4
               01572                         endif
               01573                         if(address2==0x1000)
               01574                                 bsf     PCLATH,3
               01575                         endif
               01576                 endif
               01577         endif           
               01578                 errorlevel +306
               01579                 endm
               01580 
               01581 _@INCFGNZ macro file,dir,label
               01582                 errorlevel -306
               01583         local address = $ & 0f800h
               01584         local address2 = label & 0f800h
               01585         if address != address2
               01586                 if(address==0x000)
               01587                         if(address2==0x800)
               01588                                 bsf     PCLATH,3
               01589                         endif
               01590                         if(address2==0x1000)
               01591                                 bsf     PCLATH,4
               01592                         endif
               01593                         if(address2==0x1800)
               01594                                 bsf     PCLATH,3
               01595                                 bsf     PCLATH,4
               01596                         endif
               01597                 endif
               01598                 if(address==0x800)
               01599                         if(address2==0x000)
               01600                                 bcf     PCLATH,3
               01601                         endif
               01602                         if(address2==0x1000)
               01603                                 bcf     PCLATH,3
               01604                                 bsf     PCLATH,4
               01605                         endif
               01606                         if(address2==0x1800)
               01607                                 bsf     PCLATH,4
               01608                         endif
               01609                 endif
               01610                 if(address==0x1000)
               01611                         if(address2==0x000)
               01612                                 bcf     PCLATH,4
               01613                         endif
               01614                         if(address2==0x800)
               01615                                 bsf     PCLATH,3
               01616                                 bcf     PCLATH,4
               01617                         endif
               01618                         if(address2==0x1800)
               01619                                 bsf     PCLATH,3
               01620                         endif
               01621                 endif
               01622                 if(address==0x1800)
               01623                         if(address2==0x000)
               01624                                 bcf     PCLATH,3
               01625                                 bcf     PCLATH,4
               01626                         endif
               01627                         if(address2==0x800)
               01628                                 bcf     PCLATH,4
               01629                         endif
               01630                         if(address2==0x1000)
               01631                                 bcf     PCLATH,3
               01632                         endif
               01633                 endif
               01634         endif           
               01635                 incfsz  file,dir
               01636                 goto label   
               01637         if address != address2
               01638                 if(address==0x000)
               01639                         if(address2==0x800)
               01640                                 bcf     PCLATH,3
               01641                         endif
               01642                         if(address2==0x1000)
               01643                                 bcf     PCLATH,4
               01644                         endif
               01645                         if(address2==0x1800)
               01646                                 bcf     PCLATH,3
               01647                                 bcf     PCLATH,4
               01648                         endif
               01649                 endif
               01650                 if(address==0x800)
               01651                         if(address2==0x000)
               01652                                 bsf     PCLATH,3
               01653                         endif
               01654                         if(address2==0x1000)
               01655                                 bsf     PCLATH,3
               01656                                 bcf     PCLATH,4
               01657                         endif
               01658                         if(address2==0x1800)
               01659                                 bcf     PCLATH,4
               01660                         endif
               01661                 endif
               01662                 if(address==0x1000)
               01663                         if(address2==0x000)
               01664                                 bsf     PCLATH,4
               01665                         endif
               01666                         if(address2==0x800)
               01667                                 bcf     PCLATH,3
               01668                                 bsf     PCLATH,4
               01669                         endif
               01670                         if(address2==0x1800)
               01671                                 bcf     PCLATH,3
               01672                         endif
               01673                 endif
               01674                 if(address==0x1800)
               01675                         if(address2==0x000)
               01676                                 bsf     PCLATH,3
               01677                                 bsf     PCLATH,4
               01678                         endif
               01679                         if(address2==0x800)
               01680                                 bsf     PCLATH,4
               01681                         endif
               01682                         if(address2==0x1000)
               01683                                 bsf     PCLATH,3
               01684                         endif
               01685                 endif
               01686         endif           
               01687                 errorlevel +306
               01688                 endm
               01689 
               01690 _@INCFCZ macro file,dir,label
               01691                 errorlevel -306
               01692         local address = $ & 0f800h
               01693         local address2 = label & 0f800h
               01694         if address != address2
               01695                 if(address==0x000)
               01696                         if(address2==0x800)
               01697                                 bsf     PCLATH,3
               01698                         endif
               01699                         if(address2==0x1000)
               01700                                 bsf     PCLATH,4
               01701                         endif
               01702                         if(address2==0x1800)
               01703                                 bsf     PCLATH,3
               01704                                 bsf     PCLATH,4
               01705                         endif
               01706                 endif
               01707                 if(address==0x800)
               01708                         if(address2==0x000)
               01709                                 bcf     PCLATH,3
               01710                         endif
               01711                         if(address2==0x1000)
               01712                                 bcf     PCLATH,3
               01713                                 bsf     PCLATH,4
               01714                         endif
               01715                         if(address2==0x1800)
               01716                                 bsf     PCLATH,4
               01717                         endif
               01718                 endif
               01719                 if(address==0x1000)
               01720                         if(address2==0x000)
               01721                                 bcf     PCLATH,4
               01722                         endif
               01723                         if(address2==0x800)
               01724                                 bsf     PCLATH,3
               01725                                 bcf     PCLATH,4
               01726                         endif
               01727                         if(address2==0x1800)
               01728                                 bsf     PCLATH,3
               01729                         endif
               01730                 endif
               01731                 if(address==0x1800)
               01732                         if(address2==0x000)
               01733                                 bcf     PCLATH,3
               01734                                 bcf     PCLATH,4
               01735                         endif
               01736                         if(address2==0x800)
               01737                                 bcf     PCLATH,4
               01738                         endif
               01739                         if(address2==0x1000)
               01740                                 bcf     PCLATH,3
               01741                         endif
               01742                 endif
               01743         endif           
               01744                 incfsnz  file,dir
               01745                 call label   
               01746         if address != address2
               01747                 if(address==0x000)
               01748                         if(address2==0x800)
               01749                                 bcf     PCLATH,3
               01750                         endif
               01751                         if(address2==0x1000)
               01752                                 bcf     PCLATH,4
               01753                         endif
               01754                         if(address2==0x1800)
               01755                                 bcf     PCLATH,3
               01756                                 bcf     PCLATH,4
               01757                         endif
               01758                 endif
               01759                 if(address==0x800)
               01760                         if(address2==0x000)
               01761                                 bsf     PCLATH,3
               01762                         endif
               01763                         if(address2==0x1000)
               01764                                 bsf     PCLATH,3
               01765                                 bcf     PCLATH,4
               01766                         endif
               01767                         if(address2==0x1800)
               01768                                 bcf     PCLATH,4
               01769                         endif
               01770                 endif
               01771                 if(address==0x1000)
               01772                         if(address2==0x000)
               01773                                 bsf     PCLATH,4
               01774                         endif
               01775                         if(address2==0x800)
               01776                                 bcf     PCLATH,3
               01777                                 bsf     PCLATH,4
               01778                         endif
               01779                         if(address2==0x1800)
               01780                                 bcf     PCLATH,3
               01781                         endif
               01782                 endif
               01783                 if(address==0x1800)
               01784                         if(address2==0x000)
               01785                                 bsf     PCLATH,3
               01786                                 bsf     PCLATH,4
               01787                         endif
               01788                         if(address2==0x800)
               01789                                 bsf     PCLATH,4
               01790                         endif
               01791                         if(address2==0x1000)
               01792                                 bsf     PCLATH,3
               01793                         endif
               01794                 endif
               01795         endif           
               01796                 errorlevel +306
               01797                 endm
               01798 
               01799 _@INCFCNZ macro file,dir,label
               01800                 errorlevel -306
               01801         local address = $ & 0f800h
               01802         local address2 = label & 0f800h
               01803         if address != address2
               01804                 if(address==0x000)
               01805                         if(address2==0x800)
               01806                                 bsf     PCLATH,3
               01807                         endif
               01808                         if(address2==0x1000)
               01809                                 bsf     PCLATH,4
               01810                         endif
               01811                         if(address2==0x1800)
               01812                                 bsf     PCLATH,3
               01813                                 bsf     PCLATH,4
               01814                         endif
               01815                 endif
               01816                 if(address==0x800)
               01817                         if(address2==0x000)
               01818                                 bcf     PCLATH,3
               01819                         endif
               01820                         if(address2==0x1000)
               01821                                 bcf     PCLATH,3
               01822                                 bsf     PCLATH,4
               01823                         endif
               01824                         if(address2==0x1800)
               01825                                 bsf     PCLATH,4
               01826                         endif
               01827                 endif
               01828                 if(address==0x1000)
               01829                         if(address2==0x000)
               01830                                 bcf     PCLATH,4
               01831                         endif
               01832                         if(address2==0x800)
               01833                                 bsf     PCLATH,3
               01834                                 bcf     PCLATH,4
               01835                         endif
               01836                         if(address2==0x1800)
               01837                                 bsf     PCLATH,3
               01838                         endif
               01839                 endif
               01840                 if(address==0x1800)
               01841                         if(address2==0x000)
               01842                                 bcf     PCLATH,3
               01843                                 bcf     PCLATH,4
               01844                         endif
               01845                         if(address2==0x800)
               01846                                 bcf     PCLATH,4
               01847                         endif
               01848                         if(address2==0x1000)
               01849                                 bcf     PCLATH,3
               01850                         endif
               01851                 endif
               01852         endif           
               01853                 incfsz  file,dir
               01854                 call label   
               01855         if address != address2
               01856                 if(address==0x000)
               01857                         if(address2==0x800)
               01858                                 bcf     PCLATH,3
               01859                         endif
               01860                         if(address2==0x1000)
               01861                                 bcf     PCLATH,4
               01862                         endif
               01863                         if(address2==0x1800)
               01864                                 bcf     PCLATH,3
               01865                                 bcf     PCLATH,4
               01866                         endif
               01867                 endif
               01868                 if(address==0x800)
               01869                         if(address2==0x000)
               01870                                 bsf     PCLATH,3
               01871                         endif
               01872                         if(address2==0x1000)
               01873                                 bsf     PCLATH,3
               01874                                 bcf     PCLATH,4
               01875                         endif
               01876                         if(address2==0x1800)
               01877                                 bcf     PCLATH,4
               01878                         endif
               01879                 endif
               01880                 if(address==0x1000)
               01881                         if(address2==0x000)
               01882                                 bsf     PCLATH,4
               01883                         endif
               01884                         if(address2==0x800)
               01885                                 bcf     PCLATH,3
               01886                                 bsf     PCLATH,4
               01887                         endif
               01888                         if(address2==0x1800)
               01889                                 bcf     PCLATH,3
               01890                         endif
               01891                 endif
               01892                 if(address==0x1800)
               01893                         if(address2==0x000)
               01894                                 bsf     PCLATH,3
               01895                                 bsf     PCLATH,4
               01896                         endif
               01897                         if(address2==0x800)
               01898                                 bsf     PCLATH,4
               01899                         endif
               01900                         if(address2==0x1000)
               01901                                 bsf     PCLATH,3
               01902                         endif
               01903                 endif
               01904         endif           
               01905                 errorlevel +306
               01906                 endm
               01907 
               01908 _@BTFGC macro file,bit,label
               01909                 errorlevel -306
               01910         local address = $ & 0f800h
               01911         local address2 = label & 0f800h
               01912         if address != address2
               01913                 if(address==0x000)
               01914                         if(address2==0x800)
               01915                                 bsf     PCLATH,3
               01916                         endif
               01917                         if(address2==0x1000)
               01918                                 bsf     PCLATH,4
               01919                         endif
               01920                         if(address2==0x1800)
               01921                                 bsf     PCLATH,3
               01922                                 bsf     PCLATH,4
               01923                         endif
               01924                 endif
               01925                 if(address==0x800)
               01926                         if(address2==0x000)
               01927                                 bcf     PCLATH,3
               01928                         endif
               01929                         if(address2==0x1000)
               01930                                 bcf     PCLATH,3
               01931                                 bsf     PCLATH,4
               01932                         endif
               01933                         if(address2==0x1800)
               01934                                 bsf     PCLATH,4
               01935                         endif
               01936                 endif
               01937                 if(address==0x1000)
               01938                         if(address2==0x000)
               01939                                 bcf     PCLATH,4
               01940                         endif
               01941                         if(address2==0x800)
               01942                                 bsf     PCLATH,3
               01943                                 bcf     PCLATH,4
               01944                         endif
               01945                         if(address2==0x1800)
               01946                                 bsf     PCLATH,3
               01947                         endif
               01948                 endif
               01949                 if(address==0x1800)
               01950                         if(address2==0x000)
               01951                                 bcf     PCLATH,3
               01952                                 bcf     PCLATH,4
               01953                         endif
               01954                         if(address2==0x800)
               01955                                 bcf     PCLATH,4
               01956                         endif
               01957                         if(address2==0x1000)
               01958                                 bcf     PCLATH,3
               01959                         endif
               01960                 endif
               01961         endif           
               01962                 btfss   file,bit
               01963                 goto label   
               01964         if address != address2
               01965                 if(address==0x000)
               01966                         if(address2==0x800)
               01967                                 bcf     PCLATH,3
               01968                         endif
               01969                         if(address2==0x1000)
               01970                                 bcf     PCLATH,4
               01971                         endif
               01972                         if(address2==0x1800)
               01973                                 bcf     PCLATH,3
               01974                                 bcf     PCLATH,4
               01975                         endif
               01976                 endif
               01977                 if(address==0x800)
               01978                         if(address2==0x000)
               01979                                 bsf     PCLATH,3
               01980                         endif
               01981                         if(address2==0x1000)
               01982                                 bsf     PCLATH,3
               01983                                 bcf     PCLATH,4
               01984                         endif
               01985                         if(address2==0x1800)
               01986                                 bcf     PCLATH,4
               01987                         endif
               01988                 endif
               01989                 if(address==0x1000)
               01990                         if(address2==0x000)
               01991                                 bsf     PCLATH,4
               01992                         endif
               01993                         if(address2==0x800)
               01994                                 bcf     PCLATH,3
               01995                                 bsf     PCLATH,4
               01996                         endif
               01997                         if(address2==0x1800)
               01998                                 bcf     PCLATH,3
               01999                         endif
               02000                 endif
               02001                 if(address==0x1800)
               02002                         if(address2==0x000)
               02003                                 bsf     PCLATH,3
               02004                                 bsf     PCLATH,4
               02005                         endif
               02006                         if(address2==0x800)
               02007                                 bsf     PCLATH,4
               02008                         endif
               02009                         if(address2==0x1000)
               02010                                 bsf     PCLATH,3
               02011                         endif
               02012                 endif
               02013         endif           
               02014                 errorlevel +306
               02015                 endm
               02016 
               02017 _@BTFGS macro file,bit,label
               02018                 errorlevel -306
               02019         local address = $ & 0f800h
               02020         local address2 = label & 0f800h
               02021         if address != address2
               02022                 if(address==0x000)
               02023                         if(address2==0x800)
               02024                                 bsf     PCLATH,3
               02025                         endif
               02026                         if(address2==0x1000)
               02027                                 bsf     PCLATH,4
               02028                         endif
               02029                         if(address2==0x1800)
               02030                                 bsf     PCLATH,3
               02031                                 bsf     PCLATH,4
               02032                         endif
               02033                 endif
               02034                 if(address==0x800)
               02035                         if(address2==0x000)
               02036                                 bcf     PCLATH,3
               02037                         endif
               02038                         if(address2==0x1000)
               02039                                 bcf     PCLATH,3
               02040                                 bsf     PCLATH,4
               02041                         endif
               02042                         if(address2==0x1800)
               02043                                 bsf     PCLATH,4
               02044                         endif
               02045                 endif
               02046                 if(address==0x1000)
               02047                         if(address2==0x000)
               02048                                 bcf     PCLATH,4
               02049                         endif
               02050                         if(address2==0x800)
               02051                                 bsf     PCLATH,3
               02052                                 bcf     PCLATH,4
               02053                         endif
               02054                         if(address2==0x1800)
               02055                                 bsf     PCLATH,3
               02056                         endif
               02057                 endif
               02058                 if(address==0x1800)
               02059                         if(address2==0x000)
               02060                                 bcf     PCLATH,3
               02061                                 bcf     PCLATH,4
               02062                         endif
               02063                         if(address2==0x800)
               02064                                 bcf     PCLATH,4
               02065                         endif
               02066                         if(address2==0x1000)
               02067                                 bcf     PCLATH,3
               02068                         endif
               02069                 endif
               02070         endif           
               02071                 btfsc   file,bit
               02072                 goto label   
               02073         if address != address2
               02074                 if(address==0x000)
               02075                         if(address2==0x800)
               02076                                 bcf     PCLATH,3
               02077                         endif
               02078                         if(address2==0x1000)
               02079                                 bcf     PCLATH,4
               02080                         endif
               02081                         if(address2==0x1800)
               02082                                 bcf     PCLATH,3
               02083                                 bcf     PCLATH,4
               02084                         endif
               02085                 endif
               02086                 if(address==0x800)
               02087                         if(address2==0x000)
               02088                                 bsf     PCLATH,3
               02089                         endif
               02090                         if(address2==0x1000)
               02091                                 bsf     PCLATH,3
               02092                                 bcf     PCLATH,4
               02093                         endif
               02094                         if(address2==0x1800)
               02095                                 bcf     PCLATH,4
               02096                         endif
               02097                 endif
               02098                 if(address==0x1000)
               02099                         if(address2==0x000)
               02100                                 bsf     PCLATH,4
               02101                         endif
               02102                         if(address2==0x800)
               02103                                 bcf     PCLATH,3
               02104                                 bsf     PCLATH,4
               02105                         endif
               02106                         if(address2==0x1800)
               02107                                 bcf     PCLATH,3
               02108                         endif
               02109                 endif
               02110                 if(address==0x1800)
               02111                         if(address2==0x000)
               02112                                 bsf     PCLATH,3
               02113                                 bsf     PCLATH,4
               02114                         endif
               02115                         if(address2==0x800)
               02116                                 bsf     PCLATH,4
               02117                         endif
               02118                         if(address2==0x1000)
               02119                                 bsf     PCLATH,3
               02120                         endif
               02121                 endif
               02122         endif           
               02123                 errorlevel +306
               02124                 endm
               02125 
               02126 _@BTFCC macro file,bit,label
               02127                 errorlevel -306
               02128         local address = $ & 0f800h
               02129         local address2 = label & 0f800h
               02130         if address != address2
               02131                 if(address==0x000)
               02132                         if(address2==0x800)
               02133                                 bsf     PCLATH,3
               02134                         endif
               02135                         if(address2==0x1000)
               02136                                 bsf     PCLATH,4
               02137                         endif
               02138                         if(address2==0x1800)
               02139                                 bsf     PCLATH,3
               02140                                 bsf     PCLATH,4
               02141                         endif
               02142                 endif
               02143                 if(address==0x800)
               02144                         if(address2==0x000)
               02145                                 bcf     PCLATH,3
               02146                         endif
               02147                         if(address2==0x1000)
               02148                                 bcf     PCLATH,3
               02149                                 bsf     PCLATH,4
               02150                         endif
               02151                         if(address2==0x1800)
               02152                                 bsf     PCLATH,4
               02153                         endif
               02154                 endif
               02155                 if(address==0x1000)
               02156                         if(address2==0x000)
               02157                                 bcf     PCLATH,4
               02158                         endif
               02159                         if(address2==0x800)
               02160                                 bsf     PCLATH,3
               02161                                 bcf     PCLATH,4
               02162                         endif
               02163                         if(address2==0x1800)
               02164                                 bsf     PCLATH,3
               02165                         endif
               02166                 endif
               02167                 if(address==0x1800)
               02168                         if(address2==0x000)
               02169                                 bcf     PCLATH,3
               02170                                 bcf     PCLATH,4
               02171                         endif
               02172                         if(address2==0x800)
               02173                                 bcf     PCLATH,4
               02174                         endif
               02175                         if(address2==0x1000)
               02176                                 bcf     PCLATH,3
               02177                         endif
               02178                 endif
               02179         endif           
               02180                 btfss   file,bit
               02181                 call label   
               02182         if address != address2
               02183                 if(address==0x000)
               02184                         if(address2==0x800)
               02185                                 bcf     PCLATH,3
               02186                         endif
               02187                         if(address2==0x1000)
               02188                                 bcf     PCLATH,4
               02189                         endif
               02190                         if(address2==0x1800)
               02191                                 bcf     PCLATH,3
               02192                                 bcf     PCLATH,4
               02193                         endif
               02194                 endif
               02195                 if(address==0x800)
               02196                         if(address2==0x000)
               02197                                 bsf     PCLATH,3
               02198                         endif
               02199                         if(address2==0x1000)
               02200                                 bsf     PCLATH,3
               02201                                 bcf     PCLATH,4
               02202                         endif
               02203                         if(address2==0x1800)
               02204                                 bcf     PCLATH,4
               02205                         endif
               02206                 endif
               02207                 if(address==0x1000)
               02208                         if(address2==0x000)
               02209                                 bsf     PCLATH,4
               02210                         endif
               02211                         if(address2==0x800)
               02212                                 bcf     PCLATH,3
               02213                                 bsf     PCLATH,4
               02214                         endif
               02215                         if(address2==0x1800)
               02216                                 bcf     PCLATH,3
               02217                         endif
               02218                 endif
               02219                 if(address==0x1800)
               02220                         if(address2==0x000)
               02221                                 bsf     PCLATH,3
               02222                                 bsf     PCLATH,4
               02223                         endif
               02224                         if(address2==0x800)
               02225                                 bsf     PCLATH,4
               02226                         endif
               02227                         if(address2==0x1000)
               02228                                 bsf     PCLATH,3
               02229                         endif
               02230                 endif
               02231         endif           
               02232                 errorlevel +306
               02233                 endm
               02234 
               02235 _@BTFCS macro file,bit,label
               02236                 errorlevel -306
               02237         local address = $ & 0f800h
               02238         local address2 = label & 0f800h
               02239         if address != address2
               02240                 if(address==0x000)
               02241                         if(address2==0x800)
               02242                                 bsf     PCLATH,3
               02243                         endif
               02244                         if(address2==0x1000)
               02245                                 bsf     PCLATH,4
               02246                         endif
               02247                         if(address2==0x1800)
               02248                                 bsf     PCLATH,3
               02249                                 bsf     PCLATH,4
               02250                         endif
               02251                 endif
               02252                 if(address==0x800)
               02253                         if(address2==0x000)
               02254                                 bcf     PCLATH,3
               02255                         endif
               02256                         if(address2==0x1000)
               02257                                 bcf     PCLATH,3
               02258                                 bsf     PCLATH,4
               02259                         endif
               02260                         if(address2==0x1800)
               02261                                 bsf     PCLATH,4
               02262                         endif
               02263                 endif
               02264                 if(address==0x1000)
               02265                         if(address2==0x000)
               02266                                 bcf     PCLATH,4
               02267                         endif
               02268                         if(address2==0x800)
               02269                                 bsf     PCLATH,3
               02270                                 bcf     PCLATH,4
               02271                         endif
               02272                         if(address2==0x1800)
               02273                                 bsf     PCLATH,3
               02274                         endif
               02275                 endif
               02276                 if(address==0x1800)
               02277                         if(address2==0x000)
               02278                                 bcf     PCLATH,3
               02279                                 bcf     PCLATH,4
               02280                         endif
               02281                         if(address2==0x800)
               02282                                 bcf     PCLATH,4
               02283                         endif
               02284                         if(address2==0x1000)
               02285                                 bcf     PCLATH,3
               02286                         endif
               02287                 endif
               02288         endif           
               02289                 btfsc   file,bit
               02290                 call label   
               02291         if address != address2
               02292                 if(address==0x000)
               02293                         if(address2==0x800)
               02294                                 bcf     PCLATH,3
               02295                         endif
               02296                         if(address2==0x1000)
               02297                                 bcf     PCLATH,4
               02298                         endif
               02299                         if(address2==0x1800)
               02300                                 bcf     PCLATH,3
               02301                                 bcf     PCLATH,4
               02302                         endif
               02303                 endif
               02304                 if(address==0x800)
               02305                         if(address2==0x000)
               02306                                 bsf     PCLATH,3
               02307                         endif
               02308                         if(address2==0x1000)
               02309                                 bsf     PCLATH,3
               02310                                 bcf     PCLATH,4
               02311                         endif
               02312                         if(address2==0x1800)
               02313                                 bcf     PCLATH,4
               02314                         endif
               02315                 endif
               02316                 if(address==0x1000)
               02317                         if(address2==0x000)
               02318                                 bsf     PCLATH,4
               02319                         endif
               02320                         if(address2==0x800)
               02321                                 bcf     PCLATH,3
               02322                                 bsf     PCLATH,4
               02323                         endif
               02324                         if(address2==0x1800)
               02325                                 bcf     PCLATH,3
               02326                         endif
               02327                 endif
               02328                 if(address==0x1800)
               02329                         if(address2==0x000)
               02330                                 bsf     PCLATH,3
               02331                                 bsf     PCLATH,4
               02332                         endif
               02333                         if(address2==0x800)
               02334                                 bsf     PCLATH,4
               02335                         endif
               02336                         if(address2==0x1000)
               02337                                 bsf     PCLATH,3
               02338                         endif
               02339                 endif
               02340         endif           
               02341                 errorlevel +306
               02342                 endm
               02343 
               02344 ;==========================================================================
               02345 ;
               02346 ;       Inline Pin Macro Definition
               02347 ;
               02348 ;==========================================================================
               02349 
               02350 _@HIGH macro pin
               02351                 ifdef GPIO
               02352                                 bsf     STATUS,RP0
               02353                                 bcf     (pin>>3)+GPIO,pin&0x07
               02354                                 bcf     STATUS,RP0
               02355                                 bsf     (pin>>3)+GPIO,pin&0x07
               02356                 endif
               02357                 ifdef PORTA
               02358                                 bsf     STATUS,RP0
               02359                                 bcf     (pin>>3)+PORTA,pin&0x07
               02360                                 bcf     STATUS,RP0
               02361                                 bsf     (pin>>3)+PORTA,pin&0x07
               02362                 endif
               02363                 endm
               02364 _@INPUT macro pin
               02365                 ifdef GPIO
               02366                                 bsf     STATUS,RP0
               02367                                 bsf     (pin>>3)+GPIO,pin&0x07
               02368                                 bcf     STATUS,RP0
               02369                 endif
               02370                 ifdef PORTA
               02371                                 bsf     STATUS,RP0
               02372                                 bsf     (pin>>3)+PORTA,pin&0x07
               02373                                 bcf     STATUS,RP0
               02374                 endif
               02375                 endm
               02376 _@LOW macro pin
               02377                 ifdef GPIO
               02378                                 bsf     STATUS,RP0
               02379                                 bcf     (pin>>3)+GPIO,pin&0x07
               02380                                 bcf     STATUS,RP0
               02381                                 bcf     (pin>>3)+GPIO,pin&0x07
               02382                 endif
               02383                 ifdef PORTA
               02384                                 bsf     STATUS,RP0
               02385                                 bcf     (pin>>3)+PORTA,pin&0x07
               02386                                 bcf     STATUS,RP0
               02387                                 bcf     (pin>>3)+PORTA,pin&0x07
               02388                 endif
               02389                 endm
               02390 _@OUTPUT macro pin
               02391                 ifdef GPIO
               02392                                 bsf     STATUS,RP0
               02393                                 bcf     (pin>>3)+GPIO,pin&0x07
               02394                                 bcf     STATUS,RP0
               02395                 endif
               02396                 ifdef PORTA
               02397                                 bsf     STATUS,RP0
               02398                                 bcf     (pin>>3)+PORTA,pin&0x07
               02399                                 bcf     STATUS,RP0
               02400                 endif
               02401                 endm
               02402 
               02403 ;==========================================================================
               02404 ;
               02405 ;       Generic compiler Macro Definition
               02406 ;
               02407 ;==========================================================================
               02408 
  00000000     02409 _packedpc = 0
               02410 
               02411 _@PACKEDDATA macro arg
               02412                 ifdef _PACKEDTOKENS
               02413                         if _packedpc == 6
               02414 _packeddata4 = arg&0xFF
               02415                                 db _packeddata1h,_packeddata1
               02416                                 db _packeddata2h,_packeddata2
               02417                                 db _packeddata3h,_packeddata3
               02418                                 db _packeddata4h,_packeddata4
               02419 _packedpc=0
               02420                         else
               02421                                 if _packedpc == 5
               02422 _packeddata3h = (arg>>2)&0x3f
               02423 _packeddata4h = _packeddata4h | (arg&0x03)
               02424 _packedpc++
               02425                                 endif
               02426                                 if _packedpc == 4
               02427 _packeddata3 = arg&0xFF
               02428 _packedpc++
               02429                                 endif
               02430                                 if _packedpc == 3
               02431 _packeddata2h = (arg>>2)&0x3f
               02432 _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
               02433 _packedpc++
               02434                                 endif
               02435                                 if _packedpc == 2
               02436 _packeddata2 = arg&0xFF
               02437 _packedpc++
               02438                                 endif
               02439                                 if _packedpc == 1
               02440 _packeddata1h = (arg>>2)&0x3f
               02441 _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
               02442 _packedpc++
               02443                                 endif
               02444                                 if _packedpc == 0
               02445 _packeddata1 = arg&0xFF
               02446 _packeddata1h = 0
               02447 _packeddata2 = 0
               02448 _packeddata2h = 0
               02449 _packeddata3 = 0
               02450 _packeddata3h = 0
               02451 _packeddata4 = 0
               02452 _packeddata4h = 0
               02453 _packedpc++
               02454                                 endif
               02455                         endif
               02456                 else
               02457                         retlw arg
               02458                 endif
               02459         endm
               02460         
               02461 _@PACKEDBUFFER macro
               02462                 ifdef _PACKEDTOKENS
               02463                         if _packedpc != 0
               02464                                 if _packedpc == 1
               02465 _packeddata1h = (_NOP>>2)&0x3f
               02466 _packeddata4h = _packeddata4h | ((_NOP&0x03)<<4)
               02467 _packedpc++
               02468                                 endif
               02469                                 if _packedpc == 2
               02470 _packeddata2 = _NOP&0xFF
               02471 _packedpc++
               02472                                 endif
               02473                                 if _packedpc == 3
               02474 _packeddata2h = (_NOP>>2)&0x3f
               02475 _packeddata4h = _packeddata4h | ((_NOP&0x03)<<2)
               02476 _packedpc++
               02477                                 endif
               02478                                 if _packedpc == 4
               02479 _packeddata3 = _NOP&0xFF
               02480 _packedpc++
               02481                                 endif
               02482                                 if _packedpc == 5
               02483 _packeddata3h = (_NOP>>2)&0x3f
               02484 _packeddata4h = _packeddata4h | (_NOP&0x03)
               02485 _packedpc++
               02486                                 endif
               02487                                 if _packedpc == 6
               02488 _packeddata4 = _NOP&0xFF
               02489 _packedpc++
               02490                                 endif
               02491                                 db _packeddata1h,_packeddata1
               02492                                 db _packeddata2h,_packeddata2
               02493                                 db _packeddata3h,_packeddata3
               02494                                 db _packeddata4h,_packeddata4
               02495 _packedpc = 0
               02496                         endif
               02497                 endif
               02498         endm
               02499 
               02500 _@DEBUGDATA macro line
               02501 _DEBUGLINE = line
               02502 _DEBUGADDRESS = $
               02503 _DEBUGPACKEDPC = _packedpc
               02504         endm
               02505         
               02506 _@CMD macro name
               02507                 _@PACKEDDATA name
               02508         endm
               02509         
               02510 _@ARGB macro value
               02511                 _@PACKEDDATA value
               02512         endm
               02513         
               02514 _@ARGW macro value
               02515                 _@PACKEDDATA ((value>>8)&0xFF)
               02516                 _@PACKEDDATA value&0xFF
               02517         endm
               02518         
               02519 _@ARGL macro value
               02520                 _@PACKEDDATA ((value>>24)&0xFF)
               02521                 _@PACKEDDATA ((value>>16)&0xFF)
               02522                 _@PACKEDDATA ((value>>8)&0xFF)
               02523                 _@PACKEDDATA value&0xFF
               02524         endm
               02525         
               02526 ;Label address macro
               02527 _@ARGLABEL macro value
               02528                 local address
               02529                 ifdef _PACKEDTOKENS
               02530 address = (value<<2) - 1
               02531                 else
               02532 address = value - 1
               02533                 endif
               02534                 _@PACKEDDATA ((address>>8)&0xFF)
               02535                 _@PACKEDDATA address&0xFF
               02536         endm
               02537         
               02538 ;Variable address macro
               02539 _@ARGADDRESS macro value
               02540                 _@PACKEDDATA ((value>>8)&0xFF)
               02541                 _@PACKEDDATA value&0xFF
               02542         endm
               02543         
               02544 ;Program memory address pointer.  Absolute address even in PACKED mode
               02545 _@ARGLABELPTR macro value
               02546                 _@PACKEDDATA ((value>>8)&0xFF)
               02547                 _@PACKEDDATA value&0xFF
               02548         endm
               02549 
               02550 ;Table macros.  Tables are never packed.
               02551 _@ARGTABLE macro value
               02552                 local address
               02553 address = value - 1
               02554                 retlw ((address>>8)&0xFF)
               02555                 retlw address&0xFF
               02556         endm
               02557         
               02558 _@ARGTABLEB macro value
               02559                 retlw value
               02560         endm
               02561         
               02562 _@ARGTABLEW macro value
               02563                 retlw ((value>>8)&0xFF)
               02564                 retlw value&0xFF
               02565         endm
               02566         
               02567 _@ARGTABLEL macro value
               02568                 retlw ((value>>24)&0xFF)
               02569                 retlw ((value>>16)&0xFF)
               02570                 retlw ((value>>8)&0xFF)
               02571                 retlw value&0xFF
               02572         endm
               02573         
               02574 ;End of program macro
               02575 _@END macro
               02576                 _@PACKEDDATA _END
               02577                 _@PACKEDBUFFER
               02578 _CODEEND = $
               02579         endm
               02580         
               02581 ;Update Program Counter macro
               02582 _@UPDATEPC macro
               02583                         ifdef _PACKEDTOKENS
               02584                                 errorlevel -306
               02585                                         movlw   HIGH (((($+10)&0xFFFC)<<2)-1)           ;1 word
               02586                                         movwf   _PCH                                                            ;1 word
               02587                                         movlw   LOW (((($+8)&0xFFFC)<<2)-1)                     ;1 word
               02588                                         movwf   _PC                                                                     ;1 word
               02589                                 if (_procloop&0x800)    
               02590                                         bsf             PCLATH,3                                                        ;1 word
               02591                                 else
               02592                                         bcf             PCLATH,3                                
               02593                                 endif
               02594                                 if (_procloop&0x1000)
               02595                                         bsf             PCLATH,4                                                        ;1 word
               02596                                 else
               02597                                         bcf             PCLATH,4                                
               02598                                 endif
               02599                                         goto    _procloop                                                       ;1 word
               02600                                 if ($&0x3)!=0
               02601                                         nop
               02602                                 endif
               02603                                 if ($&0x3)!=0
               02604                                         nop
               02605                                 endif
               02606                                 if ($&0x3)!=0
               02607                                         nop
               02608                                 endif
               02609                                 errorlevel +306
               02610                         else
               02611                                 movlw   (($+4) & 0ffh)
               02612                                 movwf   _PC
               02613                                 movlw   ((($+2)>>8) & 0ffh)
               02614                                 movwf   _PCH
               02615                         endif
               02616                 endm
               02617 
               02618 ;==========================================================================
               02619 ;
               02620 ;       Check for Int Macro Definition
               02621 ;
               02622 ;==========================================================================
               02623 
               02624 _@CHECKINT macro reg,ebit,fbit,label
               02625                                 if ebit > 0x7
               02626                                                 local enablebit = ebit&0x7
               02627                                                 btfss   _INTSTATEH,enablebit            ;1/2
               02628                                 else
               02629                                                 local enablebit = ebit
               02630                                                 btfss   _INTSTATE,enablebit
               02631                                 endif
               02632                                                 goto    $+10                                            ;2/0
               02633                                                 btfss   reg,fbit                                        ;1/2
               02634                                                 goto    $+8                                                     ;2/0
               02635                                                 bcf     reg,fbit                                        ;1
               02636                                                 call    _PUSHPCCMD                                      ;13
               02637                 ifdef _PACKEDTOKENS
               02638                                                 movlw   HIGH ((label<<2) - 1)           ;1
               02639                                                 movwf   _PCH                                            ;1
               02640                                                 movlw   LOW ((label<<2) - 1)            ;1
               02641                                                 movwf   _PC                                                     ;1
               02642                 else
               02643                                                 movlw   HIGH (label-1)
               02644                                                 movwf   _PCH
               02645                                                 movlw   LOW (label-1)
               02646                                                 movwf   _PC
               02647                 endif
               02648                                                 goto    _intloop                                        ;2(3/5/22)
               02649                 endm
               02650 
               02651 ;==========================================================================
               02652 ;
               02653 ;       Align Page Macro Definition
               02654 ;
               02655 ;==========================================================================
               02656 
               02657 _@ALIGNPAGE macro size
               02658         local startorg = $
               02659         if (($+size)&0xf800)!=($&0xf800)
               02660                 while $ != ((startorg&0xf800)+0x800)
               02661                         nop
               02662                 endw
               02663         endif
               02664         endm
               02665                         
               02666 ;==========================================================================
               02667 ;
               02668 ;       Command Table Macro Definition
               02669 ;
               02670 ;==========================================================================
               02671 
  00000000     02672 _SYS = 0
               02673 
               02674 _xsys    macro label,command
               02675                 errorlevel -306
               02676         local address = $ & 0f800h
               02677         local address2 = label & 0f800h
               02678         if address != address2
               02679                 if(address==0x000)
               02680                         if(address2==0x800)
               02681 command = _SYS
               02682 _SYS+=2
               02683                                 bsf     PCLATH,3
               02684                         endif
               02685                         if(address2=0x1000)
               02686 command = _SYS
               02687 _SYS+=2
               02688                                 bsf     PCLATH,4
               02689                         endif
               02690                         if(address2=0x1800)
               02691 command = _SYS
               02692 _SYS+=3
               02693                                 bsf     PCLATH,3
               02694                                 bsf     PCLATH,4
               02695                         endif
               02696                 endif
               02697                 if(address==0x800)
               02698                         if(address2==0x000)
               02699 command = _SYS
               02700 _SYS+=2
               02701                                 bcf     PCLATH,3
               02702                         endif
               02703                         if(address2==0x1000)
               02704 command = _SYS
               02705 _SYS+=3
               02706                                 bcf     PCLATH,3
               02707                                 bsf     PCLATH,4
               02708                         endif
               02709                         if(address2==0x1800)
               02710 command = _SYS
               02711 _SYS+=2
               02712                                 bsf     PCLATH,4
               02713                         endif
               02714                 endif
               02715                 if(address==0x1000)
               02716                         if(address2==0x000)
               02717 command = _SYS
               02718 _SYS+=2
               02719                                 bcf     PCLATH,4
               02720                         endif
               02721                         if(address2==0x800)
               02722 command = _SYS
               02723 _SYS+=3
               02724                                 bsf     PCLATH,3
               02725                                 bcf     PCLATH,4
               02726                         endif
               02727                         if(address2==0x1800)
               02728 command = _SYS
               02729 _SYS+=2
               02730                                 bsf     PCLATH,3
               02731                         endif
               02732                 endif
               02733                 if(address==0x1800)
               02734                         if(address2==0x000)
               02735 command = _SYS
               02736 _SYS+=3
               02737                                 bcf     PCLATH,3
               02738                                 bcf     PCLATH,4
               02739                         endif
               02740                         if(address2==0x800)
               02741 command = _SYS
               02742 _SYS+=2
               02743                                 bcf     PCLATH,4
               02744                         endif
               02745                         if(address2==0x1000)
               02746 command = _SYS
               02747 _SYS+=2
               02748                                 bcf     PCLATH,3
               02749                         endif
               02750                 endif
               02751                 goto    label&0x7ff
               02752         else
               02753 command = _SYS
               02754 _SYS+=1
               02755                 goto    label&0x7ff
               02756         endif
               02757                 errorlevel +306
               02758         endm
               00065 #include "C:\PROGRA~1\BASICA~1\system\sys.mac" ;sys.mac
               00001         ifndef _DEFFREQOUT
               00002 #define _DEFFREQOUT
               00003         endif
               00004         ifndef _DEFCONBP
               00005 #define _DEFCONBP
               00006         endif
               00007         ifndef _DEFCLRWP1
               00008 #define _DEFCLRWP1
               00009         endif
               00010         ifndef _DEFCONP
               00011 #define _DEFCONP
               00012         endif
               00013         ifndef _DEFCLRW
               00014 #define _DEFCLRW
               00015         endif
               00066 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB3A95~1.LIB" ;mbasic14\mbasicdef.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;==========================================================================
               00004 ;
               00005 ;       DEBUG Definitions
               00006 ;
               00007 ;==========================================================================
               00008 
               00009         ifdef _DEBUGMODE
               00010                 ifdef GPIO
               00011                         ifndef _DEBUGPORT
               00012 #define _DEBUGPORT GPIO     
               00013                         endif
               00014                         ifndef _DEBUGINPIN
               00015 #define _DEBUGINPIN 1
               00016                         endif
               00017                         ifndef _DEBUGOUTPIN
               00018 #define _DEBUGOUTPIN 0
               00019                         endif
               00020                         ifndef _DEBUGBAUD
               00021 #define _DEBUGBAUD 57600
               00022                         endif
               00023                 else
               00024                         ifndef _DEBUGPORT
               00025 #define _DEBUGPORT PORTB
               00026                         endif
               00027                         ifndef _DEBUGINPIN
               00028 #define _DEBUGINPIN 6
               00029                         endif
               00030                         ifndef _DEBUGOUTPIN
               00031 #define _DEBUGOUTPIN 7
               00032                         endif
               00033                         ifndef _DEBUGBAUD
               00034 #define _DEBUGBAUD 57600
               00035                         endif
               00036                 endif
               00037                 ifdef   _DEFDEBUGIN
               00038                         ifndef _DEFDEBUGINFUNC
               00039 #define _DEFDEBUGINFUNC
               00040                         endif
               00041                         ifndef _DEFLETFUNC
               00042 #define _DEFLETFUNC
               00043                         endif
               00044                 endif
               00045         endif
               00046 
               00047 ;==========================================================================
               00048 ;
               00049 ;       Command Definitions
               00050 ;
               00051 ;==========================================================================
               00052 
               00053 ;**PICSTICK commands**
               00054         ifdef _DEFCLOCKGET
               00055                 ifndef _DEFLET
               00056 #define _DEFLET
               00057                 endif
               00058         endif
               00059 
               00060         ifdef   _DEFAD_DIF
               00061                 ifndef _DEFLET
               00062 #define _DEFLET
               00063                 endif
               00064         endif
               00065 
               00066         ifdef   _DEFAD_CH0
               00067                 ifndef _DEFLET
               00068 #define _DEFLET
               00069                 endif
               00070         endif
               00071 
               00072         ifdef   _DEFAD_CH1
               00073                 ifndef _DEFLET
               00074 #define _DEFLET
               00075                 endif
               00076         endif
               00077 
               00078         ifdef   _DEFPASS
               00079                 ifndef _DEFLET
               00080 #define _DEFLET
               00081                 endif
               00082         endif
               00083 
               00084         ifdef   _DEFAD5_DIF01
               00085                 ifndef _DEFLET
               00086 #define _DEFLET
               00087                 endif
               00088         endif
               00089 
               00090         ifdef   _DEFAD5_DIF10
               00091                 ifndef _DEFLET
               00092 #define _DEFLET
               00093                 endif
               00094         endif
               00095 
               00096         ifdef   _DEFAD5_CH0
               00097                 ifndef _DEFLET
               00098 #define _DEFLET
               00099                 endif
               00100         endif
               00101 
               00102         ifdef   _DEFAD5_CH1
               00103                 ifndef _DEFLET
               00104 #define _DEFLET
               00105                 endif
               00106         endif
               00107 ;*********************
               00108 
               00109         ifdef _DEFPOP
               00110                 ifndef _DEFLET
               00111 #define _DEFLET
               00112                 endif
               00113         endif
               00114                 
               00115         ifdef _DEFHSERIN
               00116                 ifndef _DEFHSERINFUNC
               00117 #define _DEFHSERINFUNC
               00118                 endif
               00119                 ifndef _DEFLETFUNC
               00120 #define _DEFLETFUNC
               00121                 endif
               00122         endif
               00123 
               00124         ifdef _DEFHSERINFUNC
               00125                 ifndef _DEFPAUSEUS
               00126 #define _DEFPAUSEUS
               00127                 endif
               00128         endif
               00129 
               00130         ifdef _DEFSETPULLUPS
               00131                 ifndef _DEFSETOPTION_REG
               00132 #define _DEFSETOPTION_REG
               00133                 endif
               00134         endif
               00135 
               00136         ifdef _DEFSETEXTINT
               00137                 ifndef _DEFSETOPTION_REG
               00138 #define _DEFSETOPTION_REG
               00139                 endif
               00140         endif
               00141 
               00142         ifdef _DEFSETTMR0
               00143                 ifndef _DEFSETOPTION_REG
               00144 #define _DEFSETOPTION_REG
               00145                 endif
               00146         endif
               00147 
               00148         ifdef _DEFGETTMR1
               00149                 ifndef _DEFLETFUNC
               00150 #define _DEFLETFUNC
               00151                 endif
               00152         endif
               00153 
               00154         ifdef _DEFGETCAPTURE
               00155                 ifdef CCP1CON
               00156                         ifndef _DEFLETFUNC
               00157 #define _DEFLETFUNC
               00158                         endif
               00159                 endif
               00160         endif
               00161 
               00162         ifdef _DEFXIN
               00163                 ifndef _DEFXINFUNC
               00164 #define _DEFXINFUNC
               00165                 endif
               00166                 ifndef _DEFLETFUNC
               00167 #define _DEFLETFUNC
               00168                 endif
               00169         endif
               00170 
               00171         ifdef _DEFXINFUNC
               00172                 ifndef _DEFPAUSEUS
               00173 #define _DEFPAUSEUS
               00174                 endif
               00175                 ifndef _DEFXZNEXT
               00176 #define _DEFXZNEXT
               00177                 endif
               00178                 ifndef _DEFX10SETUP
               00179 #define _DEFX10SETUP
               00180                 endif
               00181         endif
               00182 
               00183         ifdef _DEFXOUT
               00184                 ifndef _DEFPAUSEUS
               00185 #define _DEFPAUSEUS
               00186                 endif
               00187                 ifndef _DEFXZNEXT
               00188 #define _DEFXZNEXT
               00189                 endif
               00190                 ifndef _DEFX10SETUP
               00191 #define _DEFX10SETUP
               00192                 endif
               00193         endif
               00194 
               00195         ifdef _DEFX10SETUP
               00196                 ifndef _DEFGETPIN
               00197 #define _DEFGETPIN
               00198                 endif
               00199         endif
               00200 
               00201         ifdef _DEFOWIN
               00202                 ifndef _DEFOWINFUNC
               00203 #define _DEFOWINFUNC
               00204                 endif
               00205                 ifndef _DEFLETFUNC
               00206 #define _DEFLETFUNC
               00207                 endif
               00208         endif
               00209 
               00210         ifdef _DEFOWINFUNC                
               00211                 ifndef _DEFOWIRESETUP
               00212 #define _DEFOWIRESETUP
               00213                 endif
               00214                 ifndef _DEFOWIRERESET
               00215 #define _DEFOWIRERESET
               00216                 endif
               00217                 ifndef _DEFPAUSEUS
               00218 #define _DEFPAUSEUS
               00219                 endif
               00220         endif
               00221 
               00222         ifdef _DEFOWOUT
               00223                 ifndef _DEFOWIRESETUP
               00224 #define _DEFOWIRESETUP
               00225                 endif
               00226                 ifndef _DEFOWIRERESET
               00227 #define _DEFOWIRERESET
               00228                 endif
               00229                 ifndef _DEFPAUSEUS
               00230 #define _DEFPAUSEUS
               00231                 endif
               00232         endif
               00233 
               00234         ifdef _DEFOWIRESETUP
               00235                 ifndef _DEFGETPIN
               00236 #define _DEFGETPIN
               00237                 endif
               00238         endif
               00239 
               00240         ifdef _DEFSERDETECT
               00241                 ifndef _DEFGETPIN
               00242 #define _DEFGETPIN
               00243                 endif
               00244                 ifndef _DEFLETFUNC
               00245 #define _DEFLETFUNC
               00246                 endif
               00247         endif
               00248 
               00249         ifdef _DEFGETWATCHDOG
               00250                 ifndef _DEFLETFUNC
               00251 #define _DEFLETFUNC
               00252                 endif
               00253         endif
               00254 
               00255         ifdef _DEFREADPM
               00256                 ifdef EEADRH
               00257                         ifndef _DEFREADPMFUNC
               00258 #DEFINE _DEFREADPMFUNC
               00259                         endif
               00260                         ifndef _DEFLETFUNC
               00261 #DEFINE _DEFLETFUNC
               00262                         endif
               00263                 endif
               00264         endif
               00265 
               00266         ifdef _DEFDTMFOUT2
               00267                 ifndef _DEFPAUSE
               00268 #define _DEFPAUSE
               00269                 endif
               00270                 ifndef _DEFSOUND2
               00271 #define _DEFSOUND2
               00272                 endif
               00273         endif   
               00274 
               00275         ifdef _DEFSOUND
               00276                 ifndef _DEFGETPIN
               00277 #define _DEFGETPIN
               00278                 endif
               00279         endif
               00280 
               00281         ifdef _DEFSOUND2
               00282                 ifndef _DEFGETPIN
               00283 #define _DEFGETPIN
               00284                 endif
               00285         endif
               00286 
               00287         ifdef _DEFI2CIN
               00288                 ifndef  _DEFLETFUNC
               00289 #define _DEFLETFUNC
               00290                 endif
               00291                 ifndef  _DEFI2CINFUNC
               00292 #define _DEFI2CINFUNC
               00293                 endif
               00294         endif
               00295 
               00296         ifdef _DEFI2CINFUNC
               00297                 ifndef  _DEFI2C_UTIL
               00298 #define _DEFI2C_UTIL
               00299                 endif
               00300                 ifndef  _DEFI2C_IN_BYTE
               00301 #define _DEFI2C_IN_BYTE
               00302                 endif
               00303                 ifndef  _DEFI2C_OUT_BYTE
               00304 #define _DEFI2C_OUT_BYTE
               00305                 endif
               00306                 ifndef  _DEFI2C_INIT
               00307 #define _DEFI2C_INIT
               00308                 endif
               00309         endif
               00310 
               00311         ifdef _DEFI2COUT
               00312                 ifndef  _DEFI2C_UTIL
               00313 #define _DEFI2C_UTIL
               00314                 endif
               00315                 ifndef  _DEFI2C_OUT_BYTE
               00316 #define _DEFI2C_OUT_BYTE
               00317                 endif
               00318                 ifndef  _DEFI2C_INIT
               00319 #define _DEFI2C_INIT
               00320                 endif
               00321         endif
               00322 
               00323         ifdef _DEFI2C_UTIL
               00324                 ifndef  _DEFGETPIN
               00325 #define _DEFGETPIN
               00326                 endif
               00327         endif
               00328 
               00329         ifdef _DEFADIN
               00330                 ifndef _DEFADINFUNC
               00331 #define _DEFADINFUNC
               00332                 endif           
               00333                 ifndef _DEFLETFUNC
               00334 #define _DEFLETFUNC
               00335                 endif
               00336                 ifndef _DEFINPUTFUNC
               00337 #define _DEFINPUTFUNC
               00338                 endif
               00339         endif
               00340                 
               00341         ifdef _DEFADIN16
               00342                 ifndef _DEFADINFUNC
               00343 #define _DEFADINFUNC
               00344                 endif           
               00345                 ifndef _DEFLETFUNC
               00346 #define _DEFLETFUNC
               00347                 endif
               00348                 ifndef _DEFINPUTFUNC
               00349 #define _DEFINPUTFUNC
               00350                 endif
               00351         endif
               00352                 
               00353         ifdef _DEFPEEK
               00354                 ifndef _DEFLETFUNC
               00355 #define _DEFLETFUNC
               00356                 endif
               00357         endif
               00358 
               00359         ifdef _DEFSWAP
               00360                 ifndef  _DEFVAL
               00361 #define _DEFVAL
               00362                 endif
               00363                 ifndef  _DEFLETFUNC
               00364 #define _DEFLETFUNC
               00365                 endif
               00366         endif
               00367 
               00368         ifdef _DEFSERVO
               00369                 ifndef _DEFGETPIN
               00370 #define _DEFGETPIN
               00371                 endif
               00372                 ifndef _DEFPAUSEUS
               00373 #define _DEFPAUSEUS
               00374                 endif
               00375         endif
               00376 
               00377         ifdef _DEFSPMOTOR
               00378                 ifndef _DEFPAUSE
               00379 #define _DEFPAUSE
               00380                 endif
               00381                 ifndef _DEFGETPIN
               00382 #define _DEFGETPIN
               00383                 endif
               00384         endif
               00385 
               00386         ifdef _DEFLCDINIT
               00387                 ifndef _DEFLCDSEND
               00388 #define _DEFLCDSEND
               00389                 endif
               00390         endif
               00391 
               00392         ifdef _DEFLCDWRITE
               00393                 ifndef _DEFLCDSEND
               00394 #define _DEFLCDSEND
               00395                 endif
               00396         endif
               00397 
               00398         ifdef _DEFLCDREAD
               00399                 ifndef _DEFLCDREADFUNC
               00400 #define _DEFLCDREADFUNC
               00401                 endif
               00402                 ifndef _DEFLETFUNC
               00403 #define _DEFLETFUNC
               00404                 endif
               00405         endif
               00406 
               00407         ifdef _DEFLCDREADFUNC
               00408                 ifndef _DEFLCDSEND
               00409 #define _DEFLCDSEND
               00410                 endif
               00411         endif
               00412 
               00413         ifdef _DEFLCDSEND
               00414                 ifndef _DEFINPUTFUNC
               00415 #define _DEFINPUTFUNC
               00416                 endif
               00417                 ifndef _DEFHIGHFUNC
               00418 #define _DEFHIGHFUNC
               00419                 endif
               00420                 ifndef _DEFLOWFUNC
               00421 #define _DEFLOWFUNC
               00422                 endif
               00423                 ifndef _DEFPAUSEUSFUNC
               00424 #define _DEFPAUSEUSFUNC
               00425                 endif
               00426         endif
               00427         
               00428         ifdef _DEFBRANCH
               00429                 ifndef  _DEFGOTO
               00430 #define _DEFGOTO
               00431                 endif
               00432         endif
               00433 
               00434         ifdef _DEFBUTTON
               00435                 ifndef  _DEFPAUSE
               00436 #define _DEFPAUSE
               00437                 endif
               00438                 ifndef  _DEFGOTO
               00439 #define _DEFGOTO
               00440                 endif
               00441                 ifndef _DEFGETPIN
               00442 #define _DEFGETPIN
               00443                 endif
               00444         endif
               00445 
               00446         ifdef _DEFCOUNT
               00447                 ifndef _DEFGETPIN
               00448 #define _DEFGETPIN
               00449                 endif
               00450                 ifndef _DEFLETFUNC
               00451 #define _DEFLETFUNC
               00452                 endif
               00453         endif
               00454 
               00455         ifdef _DEFDTMFOUT
               00456                 ifndef _DEFFREQOUT
               00457 #define _DEFFREQOUT
               00458                 endif
               00459                 ifndef _DEFPAUSE
               00460 #define _DEFPAUSE
               00461                 endif
               00462         endif   
               00463 
               00464         ifdef _DEFREAD
               00465                 ifdef EEADR
               00466                         ifndef _DEFREADDMFUNC
               00467 #define _DEFREADDMFUNC
               00468                         endif
               00469                         ifndef _DEFLETFUNC
               00470 #DEFINE _DEFLETFUNC
               00471                         endif
               00472                 endif
               00473         endif
               00474 
               00475         ifdef _DEFREADDM
               00476                 ifdef EEADR
               00477                         ifndef _DEFREADDMFUNC
               00478 #define _DEFREADDMFUNC
               00479                         endif
               00480                         ifndef _DEFLETFUNC
               00481 #DEFINE _DEFLETFUNC
               00482                         endif
               00483                 endif
               00484         endif
               00485 
               00486         ifdef _DEFWRITE
               00487                 ifdef EEADR
               00488                         ifndef _DEFWRITEDMFUNC
               00489 #define _DEFWRITEDMFUNC
               00490                         endif
               00491                 endif
               00492         endif
               00493 
               00494         ifdef _DEFWRITEDM
               00495                 ifdef EEADR
               00496                         ifndef _DEFWRITEDMFUNC
               00497 #define _DEFWRITEDMFUNC
               00498                         endif
               00499                 endif
               00500         endif
               00501 
               00502         ifdef _DEFFREQOUT
               00503                 ifndef _DEFGETPIN
               00504 #define _DEFGETPIN
               00505                 endif
               00506                 ifndef _DEFSIN
               00507 #define _DEFSIN
               00508                 endif
               00509         endif
               00510 
               00511         ifdef _DEFFLFOR
               00512                 ifndef _DEFGOTO
               00513 #define _DEFGOTO
               00514                 endif
               00515                 ifndef _DEFLETFUNC
               00516 #define _DEFLETFUNC
               00517                 endif
               00518                 ifndef _DEFVAL
               00519 #define _DEFVAL
               00520                 endif
               00521                 ifndef _DEFFLESS
               00522 #define _DEFFLESS
               00523                 endif
               00524                 ifndef _DEFFGREAT
               00525 #define _DEFFGREAT
               00526                 endif
               00527         endif
               00528 
               00529         ifdef _DEFFNEXT
               00530                 ifndef _DEFGOTO
               00531 #define _DEFGOTO
               00532                 endif
               00533                 ifndef _DEFLGOFALSE
               00534 #define _DEFLGOFALSE
               00535                 endif
               00536                 ifndef _DEFFADD
               00537 #define _DEFFADD
               00538                 endif
               00539         endif
               00540 
               00541         ifdef _DEFLFOR
               00542                 ifndef _DEFGOTO
               00543 #define _DEFGOTO
               00544                 endif
               00545                 ifndef _DEFLETFUNC
               00546 #define _DEFLETFUNC
               00547                 endif
               00548                 ifndef _DEFVAL
               00549 #define _DEFVAL
               00550                 endif
               00551                 ifndef _DEFLESS
               00552 #define _DEFLESS
               00553                 endif
               00554                 ifndef _DEFGREAT
               00555 #define _DEFGREAT
               00556                 endif
               00557         endif
               00558 
               00559         ifdef _DEFNEXT
               00560                 ifndef _DEFGOTO
               00561 #define _DEFGOTO
               00562                 endif
               00563                 ifndef _DEFLGOFALSE
               00564 #define _DEFLGOFALSE
               00565                 endif
               00566                 ifndef _DEFADD
               00567 #define _DEFADD
               00568                 endif
               00569         endif
               00570 
               00571         ifdef _DEFLGOTO
               00572                 ifndef _DEFGOTO
               00573 #define _DEFGOTO
               00574                 endif
               00575                 ifndef _DEFLGOFALSE
               00576 #define _DEFLGOFALSE
               00577                 endif
               00578         endif
               00579 
               00580         ifdef _DEFLNOTGOTO
               00581                 ifndef _DEFGOTO
               00582 #define _DEFGOTO
               00583                 endif
               00584                 ifndef _DEFLGOFALSE
               00585 #define _DEFLGOFALSE
               00586                 endif
               00587         endif
               00588 
               00589         ifdef _DEFLGOSUB
               00590                 ifndef _DEFGOSUB
               00591 #define _DEFGOSUB
               00592                 endif
               00593                 ifndef _DEFLGOFALSE
               00594 #define _DEFLGOFALSE
               00595                 endif
               00596         endif
               00597 
               00598         ifdef _DEFGOSUB
               00599                 ifndef _DEFPUSHPC
               00600 #define _DEFPUSHPC
               00601                 endif
               00602         endif
               00603 
               00604         ifdef _DEFRESUME
               00605                 ifndef _DEFPOPPC
               00606 #define _DEFPOPPC
               00607                 endif
               00608         endif
               00609 
               00610         ifdef _DEFRETURN
               00611                 ifndef _DEFPOPPC
               00612 #define _DEFPOPPC
               00613                 endif
               00614                 ifndef _DEFLGOFALSE
               00615 #define _DEFLGOFALSE
               00616                 endif
               00617         endif
               00618 
               00619         ifdef _DEFPULSIN
               00620                 ifndef  _DEFGETPIN
               00621 #define _DEFGETPIN
               00622                 endif
               00623                 ifndef  _DEFLETFUNC
               00624 #define _DEFLETFUNC
               00625                 endif
               00626                 ifndef _DEFSTATECNT
               00627 #define _DEFSTATECNT
               00628                 endif
               00629         endif
               00630 
               00631         ifdef _DEFPULSOUT
               00632                 ifndef  _DEFGETPIN
               00633 #define _DEFGETPIN
               00634                 endif
               00635                 ifndef _DEFPAUSEUS
               00636 #define _DEFPAUSEUS
               00637                 endif
               00638         endif
               00639 
               00640         ifdef _DEFPWM
               00641                 ifndef  _DEFGETPIN
               00642 #define _DEFGETPIN
               00643                 endif
               00644         endif
               00645 
               00646         ifdef _DEFRCTIME
               00647                 ifndef  _DEFGETPIN
               00648 #define _DEFGETPIN
               00649                 endif
               00650                 ifndef  _DEFLET
               00651 #define _DEFLET
               00652                 endif
               00653                 ifndef _DEFSTATECNT
               00654 #define _DEFSTATECNT
               00655                 endif
               00656         endif
               00657 
               00658         ifdef _DEFNDECOUT
               00659                 ifndef _DEFDECOUTFUNC
               00660 #define _DEFDECOUTFUNC
               00661                 endif
               00662         endif
               00663 
               00664         ifdef _DEFDECOUT
               00665                 ifndef _DEFDECOUTFUNC
               00666 #define _DEFDECOUTFUNC
               00667                 endif
               00668         endif
               00669 
               00670         ifdef _DEFDECOUTFUNC
               00671                 ifndef _DEFBIN2BCDFUNC
               00672 #define _DEFBIN2BCDFUNC
               00673                 endif
               00674                 ifndef _DEFENHGET_CNT_CMD
               00675 #define _DEFENHGET_CNT_CMD
               00676                 endif
               00677                 ifndef _DEFENHSIGN
               00678 #define _DEFENHSIGN
               00679                 endif
               00680                 ifndef _DEFENHPACKOUT
               00681 #define _DEFENHPACKOUT
               00682                 endif
               00683                 ifndef _DEFENHSIGN
               00684 #define _DEFENHSIGN
               00685                 endif
               00686         endif
               00687 
               00688         ifdef _DEFNHEXOUT
               00689                 ifndef _DEFHEXOUTFUNC
               00690 #define _DEFHEXOUTFUNC
               00691                 endif
               00692         endif
               00693 
               00694         ifdef _DEFHEXOUT
               00695                 ifndef _DEFHEXOUTFUNC
               00696 #define _DEFHEXOUTFUNC
               00697                 endif
               00698         endif
               00699 
               00700         ifdef _DEFHEXOUTFUNC
               00701                 ifndef _DEFENHGET_CNT_CMD
               00702 #define _DEFENHGET_CNT_CMD
               00703                 endif
               00704                 ifndef _DEFENHINDICATE
               00705 #define _DEFENHINDICATE
               00706                 endif
               00707                 ifndef _DEFENHSIGN
               00708 #define _DEFENHSIGN
               00709                 endif
               00710                 ifndef _DEFENHPACKOUT
               00711 #define _DEFENHPACKOUT
               00712                 endif
               00713                 ifndef _DEFSWAPWORK_VAR
               00714 #define _DEFSWAPWORK_VAR
               00715                 endif
               00716         endif
               00717 
               00718         ifdef _DEFNBINOUT
               00719                 ifndef _DEFBINOUTFUNC
               00720 #define _DEFBINOUTFUNC
               00721                 endif
               00722         endif
               00723 
               00724         ifdef _DEFBINOUT
               00725                 ifndef _DEFBINOUTFUNC
               00726 #define _DEFBINOUTFUNC
               00727                 endif
               00728         endif
               00729 
               00730         ifdef _DEFBINOUTFUNC
               00731                 ifndef _DEFENHGET_CNT_CMD
               00732 #define _DEFENHGET_CNT_CMD
               00733                 endif
               00734                 ifndef _DEFENHINDICATE
               00735 #define _DEFENHINDICATE
               00736                 endif
               00737                 ifndef _DEFENHPUT
               00738 #define _DEFENHPUT
               00739                 endif
               00740                 ifndef _DEFENHSIGN
               00741 #define _DEFENHSIGN
               00742                 endif
               00743                 ifndef _DEFSWAPWORK_VAR
               00744 #define _DEFSWAPWORK_VAR
               00745                 endif
               00746         endif
               00747 
               00748         ifdef _DEFREALOUT
               00749                 ifndef _DEFCLRW
               00750 #define _DEFCLRW
               00751                 endif
               00752                 ifndef _DEFSWAPWORK_VAR
               00753 #define _DEFSWAPWORK_VAR
               00754                 endif
               00755                 ifndef _DEFENHGET_CNT_CMD
               00756 #define _DEFENHGET_CNT_CMD
               00757                 endif
               00758                 ifndef _DEFENHPACKOUT
               00759 #define _DEFENHPACKOUT
               00760                 endif
               00761                 ifndef _DEFENHPUT
               00762 #define _DEFENHPUT
               00763                 endif
               00764                 ifndef _DEFBIN2BCDFUNC
               00765 #define _DEFBIN2BCDFUNC
               00766                 endif
               00767         endif
               00768 
               00769         ifdef   _DEFCONSTROUT
               00770                 ifndef _DEFENH_CMD_CNT
               00771 #define _DEFENH_CMD_CNT
               00772                 endif
               00773                 ifndef _DEFENH_CONSTROUT
               00774 #define _DEFENH_CONSTROUT
               00775                 endif
               00776         endif
               00777 
               00778         ifdef   _DEFCONWORDSTROUT
               00779                 ifndef _DEFENH_CMD_CNT
               00780 #define _DEFENH_CMD_CNT
               00781                 endif
               00782                 ifndef _DEFENH_CONSTROUT
               00783 #define _DEFENH_CONSTROUT
               00784                 endif
               00785         endif
               00786 
               00787         ifdef   _DEFCONLONGSTROUT
               00788                 ifndef _DEFENH_CMD_CNT
               00789 #define _DEFENH_CMD_CNT
               00790                 endif
               00791                 ifndef _DEFENH_CONSTROUT
               00792 #define _DEFENH_CONSTROUT
               00793                 endif
               00794         endif
               00795 
               00796         ifdef   _DEFBYTETABLESTROUT
               00797                 ifndef _DEFGETTABLEOFFSET
               00798 #define _DEFGETTABLEOFFSET
               00799                 endif
               00800                 ifndef _DEFGETTABLEVALUE
               00801 #define _DEFGETTABLEVALUE
               00802                 endif
               00803                 ifndef _DEFENH_STRSETUP
               00804 #define _DEFENH_STRSETUP
               00805                 endif
               00806         endif
               00807 
               00808         ifdef   _DEFWORDTABLESTROUT
               00809                 ifndef _DEFGETTABLEOFFSET
               00810 #define _DEFGETTABLEOFFSET
               00811                 endif
               00812                 ifndef _DEFGETTABLEVALUE
               00813 #define _DEFGETTABLEVALUE
               00814                 endif
               00815                 ifndef _DEFENH_STRSETUP
               00816 #define _DEFENH_STRSETUP
               00817                 endif
               00818         endif
               00819 
               00820         ifdef   _DEFFLOATTABLESTROUT
               00821                 ifndef _DEFLONGTABLESTROUT
               00822 #define _DEFLONGTABLESTROUT
               00823                 endif
               00824         endif
               00825 
               00826         ifdef   _DEFLONGTABLESTROUT
               00827                 ifndef _DEFGETTABLEOFFSET
               00828 #define _DEFGETTABLEOFFSET
               00829                 endif
               00830                 ifndef _DEFGETTABLEVALUE
               00831 #define _DEFGETTABLEVALUE
               00832                 endif
               00833                 ifndef _DEFENH_STRSETUP
               00834 #define _DEFENH_STRSETUP
               00835                 endif
               00836         endif
               00837 
               00838         ifdef   _DEFSTROUT
               00839                 ifndef _DEFARRAY
               00840 #define _DEFARRAY
               00841                 endif
               00842                 ifndef _DEFVAL
               00843 #define _DEFVAL
               00844                 endif
               00845                 ifndef _DEFENH_STRSETUP
               00846 #define _DEFENH_STRSETUP
               00847                 endif
               00848                 ifndef _DEFSTR_GETVAL
               00849 #define _DEFSTR_GETVAL
               00850                 endif
               00851         endif
               00852 
               00853         ifdef   _DEFBYTETABLESTROUTEOL
               00854                 ifndef _DEFGETTABLEOFFSET
               00855 #define _DEFGETTABLEOFFSET
               00856                 endif
               00857                 ifndef _DEFGETTABLEVALUE
               00858 #define _DEFGETTABLEVALUE
               00859                 endif
               00860                 ifndef _DEFENH_STRSETUP
               00861 #define _DEFENH_STRSETUP
               00862                 endif
               00863         endif
               00864 
               00865         ifdef   _DEFWORDTABLESTROUTEOL
               00866                 ifndef _DEFGETTABLEOFFSET
               00867 #define _DEFGETTABLEOFFSET
               00868                 endif
               00869                 ifndef _DEFGETTABLEVALUE
               00870 #define _DEFGETTABLEVALUE
               00871                 endif
               00872                 ifndef _DEFENH_STRSETUP
               00873 #define _DEFENH_STRSETUP
               00874                 endif
               00875         endif
               00876 
               00877         ifdef   _DEFFLOATTABLESTROUTEOL
               00878                 ifndef _DEFLONGTABLESTROUTEOL
               00879 #define _DEFLONGTABLESTROUTEOL
               00880                 endif
               00881         endif
               00882 
               00883         ifdef   _DEFLONGTABLESTROUTEOL
               00884                 ifndef _DEFGETTABLEOFFSET
               00885 #define _DEFGETTABLEOFFSET
               00886                 endif
               00887                 ifndef _DEFGETTABLEVALUE
               00888 #define _DEFGETTABLEVALUE
               00889                 endif
               00890                 ifndef _DEFENH_STRSETUP
               00891 #define _DEFENH_STRSETUP
               00892                 endif
               00893         endif
               00894 
               00895         ifdef   _DEFSTROUTEOL
               00896                 ifndef _DEFARRAY
               00897 #define _DEFARRAY
               00898                 endif
               00899                 ifndef _DEFVAL
               00900 #define _DEFVAL
               00901                 endif
               00902                 ifndef _DEFENH_STRSETUP
               00903 #define _DEFENH_STRSETUP
               00904                 endif
               00905                 ifndef _DEFSTR_GETVAL
               00906 #define _DEFSTR_GETVAL
               00907                 endif
               00908         endif
               00909 
               00910         ifdef _DEFDECIN
               00911                 ifndef _DEFSWAPWORK_VAR
               00912 #define _DEFSWAPWORK_VAR
               00913                 endif
               00914                 ifndef _DEFENHPACKROTNIB
               00915 #define _DEFENHPACKROTNIB
               00916                 endif
               00917                 ifndef _DEFENHGET_CMD_FLAG
               00918 #define _DEFENHGET_CMD_FLAG
               00919                 endif
               00920                 ifndef _DEFBCD2BINFUNC
               00921 #define _DEFBCD2BINFUNC
               00922                 endif
               00923                 ifndef _DEFNEG
               00924 #define _DEFNEG
               00925                 endif
               00926                 ifndef _DEFLETFUNC
               00927 #define _DEFLETFUNC
               00928                 endif
               00929         endif
               00930 
               00931         ifdef _DEFHEXIN
               00932                 ifndef _DEFNEG
               00933 #define _DEFNEG
               00934                 endif
               00935                 ifndef _DEFSWAPWORK_VAR
               00936 #define _DEFSWAPWORK_VAR
               00937                 endif
               00938                 ifndef _DEFENHGET_CMD_FLAG
               00939 #define _DEFENHGET_CMD_FLAG
               00940                 endif
               00941                 ifndef _DEFENHGET_INDICATE
               00942 #define _DEFENHGET_INDICATE
               00943                 endif
               00944                 ifndef _DEFENHPACKROTNIB
               00945 #define _DEFENHPACKROTNIB
               00946                 endif
               00947                 ifndef _DEFLETFUNC
               00948 #define _DEFLETFUNC
               00949                 endif
               00950         endif
               00951 
               00952         ifdef _DEFBININ
               00953                 ifndef _DEFNEG
               00954 #define _DEFNEG
               00955                 endif
               00956                 ifndef _DEFSWAPWORK_VAR
               00957 #define _DEFSWAPWORK_VAR
               00958                 endif
               00959                 ifndef _DEFENHGET_CMD_FLAG
               00960 #define _DEFENHGET_CMD_FLAG
               00961                 endif
               00962                 ifndef _DEFENHGET_INDICATE
               00963 #define _DEFENHGET_INDICATE
               00964                 endif
               00965                 ifndef _DEFLETFUNC
               00966 #define _DEFLETFUNC
               00967                 endif
               00968         endif
               00969 
               00970         ifdef   _DEFSTRIN
               00971                 ifndef _DEFENH_STRSETUP
               00972 #define _DEFENH_STRSETUP
               00973                 endif
               00974                 ifndef _DEFARRAY
               00975 #define _DEFARRAY
               00976                 endif
               00977                 ifndef _DEFLETFUNC
               00978 #define _DEFLETFUNC
               00979                 endif
               00980                 ifndef _DEFSTR_SETVAL
               00981 #define _DEFSTR_SETVAL
               00982                 endif
               00983         endif
               00984 
               00985         ifdef   _DEFSTRINEOL
               00986                 ifndef _DEFENH_STRSETUP
               00987 #define _DEFENH_STRSETUP
               00988                 endif
               00989                 ifndef _DEFARRAY
               00990 #define _DEFARRAY
               00991                 endif
               00992                 ifndef _DEFLETFUNC
               00993 #define _DEFLETFUNC
               00994                 endif
               00995                 ifndef _DEFSTR_SETVAL
               00996 #define _DEFSTR_SETVAL
               00997                 endif
               00998         endif
               00999 
               01000         ifdef   _DEFBYTETABLEWAITSTR
               01001                 ifndef _DEFGETTABLEOFFSET
               01002 #define _DEFGETTABLEOFFSET
               01003                 endif
               01004                 ifndef _DEFGETTABLEVALUE
               01005 #define _DEFGETTABLEVALUE
               01006                 endif
               01007                 ifndef _DEFENH_STRSETUP
               01008 #define _DEFENH_STRSETUP
               01009                 endif
               01010         endif
               01011 
               01012         ifdef   _DEFWORDTABLEWAITSTR
               01013                 ifndef _DEFGETTABLEOFFSET
               01014 #define _DEFGETTABLEOFFSET
               01015                 endif
               01016                 ifndef _DEFGETTABLEVALUE
               01017 #define _DEFGETTABLEVALUE
               01018                 endif
               01019                 ifndef _DEFENH_STRSETUP
               01020 #define _DEFENH_STRSETUP
               01021                 endif
               01022         endif
               01023 
               01024         ifdef   _DEFFLOATTABLEWAITSTR
               01025                 ifndef _DEFLONGTABLEWAITSTR
               01026 #define _DEFLONGTABLEWAITSTR
               01027                 endif
               01028         endif
               01029 
               01030         ifdef   _DEFLONGTABLEWAITSTR
               01031                 ifndef _DEFGETTABLEOFFSET
               01032 #define _DEFGETTABLEOFFSET
               01033                 endif
               01034                 ifndef _DEFGETTABLEVALUE
               01035 #define _DEFGETTABLEVALUE
               01036                 endif
               01037                 ifndef _DEFENH_STRSETUP
               01038 #define _DEFENH_STRSETUP
               01039                 endif
               01040         endif
               01041 
               01042         ifdef   _DEFWAITSTR
               01043                 ifndef _DEFENH_STRSETUP
               01044 #define _DEFENH_STRSETUP
               01045                 endif
               01046                 ifndef _DEFSTR_GETVAL
               01047 #define _DEFSTR_GETVAL
               01048                 endif
               01049                 ifndef _DEFARRAY
               01050 #define _DEFARRAY
               01051                 endif
               01052                 ifndef _DEFVAL
               01053 #define _DEFVAL
               01054                 endif
               01055         endif
               01056         
               01057         ifdef   _DEFBYTETABLEWAITSTREOL
               01058                 ifndef _DEFGETTABLEOFFSET
               01059 #define _DEFGETTABLEOFFSET
               01060                 endif
               01061                 ifndef _DEFGETTABLEVALUE
               01062 #define _DEFGETTABLEVALUE
               01063                 endif
               01064                 ifndef _DEFENH_STRSETUP
               01065 #define _DEFENH_STRSETUP
               01066                 endif
               01067         endif
               01068 
               01069         ifdef   _DEFWORDTABLEWAITSTREOL
               01070                 ifndef _DEFGETTABLEOFFSET
               01071 #define _DEFGETTABLEOFFSET
               01072                 endif
               01073                 ifndef _DEFGETTABLEVALUE
               01074 #define _DEFGETTABLEVALUE
               01075                 endif
               01076                 ifndef _DEFENH_STRSETUP
               01077 #define _DEFENH_STRSETUP
               01078                 endif
               01079         endif
               01080 
               01081         ifdef   _DEFFLOATTABLEWAITSTREOL
               01082                 ifndef _DEFLONGTABLEWAITSTREOL
               01083 #define _DEFLONGTABLEWAITSTREOL
               01084                 endif
               01085         endif
               01086 
               01087         ifdef   _DEFLONGTABLEWAITSTREOL
               01088                 ifndef _DEFGETTABLEOFFSET
               01089 #define _DEFGETTABLEOFFSET
               01090                 endif
               01091                 ifndef _DEFGETTABLEVALUE
               01092 #define _DEFGETTABLEVALUE
               01093                 endif
               01094                 ifndef _DEFENH_STRSETUP
               01095 #define _DEFENH_STRSETUP
               01096                 endif
               01097         endif
               01098 
               01099         ifdef   _DEFWAITSTREOL
               01100                 ifndef _DEFENH_STRSETUP
               01101 #define _DEFENH_STRSETUP
               01102                 endif
               01103                 ifndef _DEFSTR_GETVAL
               01104 #define _DEFSTR_GETVAL
               01105                 endif
               01106                 ifndef _DEFARRAY
               01107 #define _DEFARRAY
               01108                 endif
               01109                 ifndef _DEFVAL
               01110 #define _DEFVAL
               01111                 endif
               01112         endif
               01113         
               01114         ifdef _DEFENHINDICATE
               01115                 ifndef _DEFENHPUT
               01116 #define _DEFENHPUT
               01117                 endif
               01118         endif
               01119 
               01120         ifdef _DEFENHSIGN
               01121                 ifndef _DEFENHPUT
               01122 #define _DEFENHPUT
               01123                 endif
               01124                 ifndef _DEFNEG
               01125 #define _DEFNEG
               01126                 endif
               01127         endif
               01128 
               01129         ifdef _DEFENHPACKOUT
               01130                 ifndef _DEFENHPACKROTNIB
               01131 #define _DEFENHPACKROTNIB
               01132                 endif
               01133         endif
               01134 
               01135         ifdef _DEFBCD2BIN
               01136                 ifndef _DEFBCD2BINFUNC
               01137 #define _DEFBCD2BINFUNC
               01138                 endif
               01139                 ifndef _DEFSWAPWORK_VAR
               01140 #define _DEFSWAPWORK_VAR
               01141                 endif
               01142         endif
               01143 
               01144         ifdef _DEFBIN2BCD
               01145                 ifndef _DEFBIN2BCDFUNC
               01146 #define _DEFBIN2BCDFUNC
               01147                 endif
               01148         endif
               01149 
               01150         ifdef _DEFSERIN
               01151                 ifndef _DEFLETFUNC
               01152 #define _DEFLETFUNC
               01153                 endif
               01154                 ifndef _DEFSERINFUNC
               01155 #define _DEFSERINFUNC
               01156                 endif
               01157         endif
               01158 
               01159         ifdef _DEFSERINFUNC
               01160                 ifndef _DEFPAUSECLKFUNC
               01161 #define _DEFPAUSECLKFUNC
               01162                 endif
               01163                 ifndef _DEFGETPIN
               01164 #define _DEFGETPIN
               01165                 endif
               01166                 ifdef _DEFSERINTO
               01167                         ifndef  _DEFSERGOTO
               01168 #define _DEFSERGOTO
               01169                         endif
               01170                 endif
               01171         endif
               01172 
               01173         ifdef _DEFSEROUT
               01174                 ifndef _DEFPAUSECLKFUNC
               01175 #define _DEFPAUSECLKFUNC
               01176                 endif
               01177                 ifndef _DEFGETPIN
               01178 #define _DEFGETPIN
               01179                 endif
               01180                 ifdef   _DEFSEROUTTO
               01181                         ifndef  _DEFSERGOTO
               01182 #define _DEFSERGOTO
               01183                         endif
               01184                 endif
               01185         endif
               01186 
               01187         ifdef _DEFSHIFTIN
               01188                 ifndef _DEFSHIFTINFUNC
               01189 #define _DEFSHIFTINFUNC
               01190                 endif
               01191                 ifndef _DEFLETFUNC
               01192 #define _DEFLETFUNC
               01193                 endif
               01194         endif
               01195 
               01196         ifdef _DEFSHIFTINFUNC
               01197                 ifndef _DEFSHIFTSETUP
               01198 #define _DEFSHIFTSETUP
               01199                 endif
               01200                 ifndef _DEFSHIFTIN_PRE
               01201 #define _DEFSHIFTIN_PRE
               01202                 endif
               01203                 ifndef _DEFSHIFTIN_DATA
               01204 #define _DEFSHIFTIN_DATA
               01205                 endif
               01206                 ifndef _DEFSHIFT_REV
               01207 #define _DEFSHIFT_REV
               01208                 endif
               01209         endif
               01210 
               01211         ifdef _DEFSHIFTOUT
               01212                 ifndef _DEFSHIFTSETUP
               01213 #define _DEFSHIFTSETUP
               01214                 endif
               01215                 ifndef _DEFSHIFTOUT_PRE
               01216 #define _DEFSHIFTOUT_PRE
               01217                 endif
               01218                 ifndef _DEFSHIFTOUT_DATA
               01219 #define _DEFSHIFTOUT_DATA
               01220                 endif
               01221                 ifndef _DEFSHIFT_REV
               01222 #define _DEFSHIFT_REV
               01223                 endif
               01224         endif
               01225 
               01226         ifdef _DEFSHIFTSETUP
               01227                 ifndef _DEFGETPIN
               01228 #define _DEFGETPIN
               01229                 endif
               01230         endif
               01231 
               01232         ifdef _DEFPAUSE
               01233                 ifndef _DEFPAUSEFUNC
               01234 #define _DEFPAUSEFUNC
               01235                 endif
               01236         endif
               01237         
               01238         ifdef _DEFPAUSEFUNC
               01239                 ifndef _DEFPAUSEUSFUNC
               01240 #define _DEFPAUSEUSFUNC
               01241                 endif
               01242         endif
               01243 
               01244         ifdef _DEFPAUSEUS
               01245                 ifndef _DEFPAUSEUSFUNC
               01246 #define _DEFPAUSEUSFUNC
               01247                 endif
               01248         endif
               01249         
               01250         ifdef _DEFPAUSECLK
               01251                 ifndef _DEFPAUSECLKFUNC
               01252 #define _DEFPAUSECLKFUNC
               01253                 endif
               01254         endif
               01255         
               01256         ifdef _DEFBYTETABLEP
               01257                 ifndef  _DEFBYTETABLE
               01258 #define _DEFBYTETABLE
               01259                 endif
               01260         endif
               01261         
               01262         ifdef _DEFBYTETABLE
               01263                 ifndef _DEFGETTABLEOFFSET
               01264 #define _DEFGETTABLEOFFSET
               01265                 endif
               01266                 ifndef _DEFGETTABLEVALUE
               01267 #define _DEFGETTABLEVALUE
               01268                 endif
               01269                 ifndef _DEFGETTABLE
               01270 #define _DEFGETTABLE
               01271                 endif
               01272         endif
               01273 
               01274         ifdef _DEFSBYTETABLEP
               01275                 ifndef  _DEFSBYTETABLE
               01276 #define _DEFSBYTETABLE
               01277                 endif
               01278         endif
               01279         
               01280         ifdef _DEFSBYTETABLE
               01281                 ifndef _DEFGETTABLEOFFSET
               01282 #define _DEFGETTABLEOFFSET
               01283                 endif
               01284                 ifndef _DEFGETTABLEVALUE
               01285 #define _DEFGETTABLEVALUE
               01286                 endif
               01287                 ifndef _DEFGETTABLE
               01288 #define _DEFGETTABLE
               01289                 endif
               01290         endif
               01291 
               01292         ifdef _DEFWORDTABLEP
               01293                 ifndef  _DEFWORDTABLE
               01294 #define _DEFWORDTABLE
               01295                 endif
               01296         endif
               01297         
               01298         ifdef _DEFWORDTABLE
               01299                 ifndef _DEFGETTABLEOFFSET
               01300 #define _DEFGETTABLEOFFSET
               01301                 endif
               01302                 ifndef _DEFGETTABLEVALUE
               01303 #define _DEFGETTABLEVALUE
               01304                 endif
               01305                 ifndef _DEFGETTABLE
               01306 #define _DEFGETTABLE
               01307                 endif
               01308                         endif
               01309 
               01310         ifdef _DEFSWORDTABLEP
               01311                 ifndef  _DEFSWORDTABLE
               01312 #define _DEFSWORDTABLE
               01313                 endif
               01314         endif
               01315         
               01316         ifdef _DEFSWORDTABLE
               01317                 ifndef _DEFGETTABLEOFFSET
               01318 #define _DEFGETTABLEOFFSET
               01319                 endif
               01320                 ifndef _DEFGETTABLEVALUE
               01321 #define _DEFGETTABLEVALUE
               01322                 endif
               01323                 ifndef _DEFGETTABLE
               01324 #define _DEFGETTABLE
               01325                 endif
               01326         endif
               01327 
               01328         ifdef _DEFLONGTABLEP
               01329                 ifndef  _DEFLONGTABLE
               01330 #define _DEFLONGTABLE
               01331                 endif
               01332         endif
               01333 
               01334         ifdef _DEFLONGTABLE
               01335                 ifndef _DEFGETTABLEOFFSET
               01336 #define _DEFGETTABLEOFFSET
               01337                 endif
               01338                 ifndef _DEFGETTABLEVALUE
               01339 #define _DEFGETTABLEVALUE
               01340                 endif
               01341                 ifndef _DEFGETTABLE
               01342 #define _DEFGETTABLE
               01343                 endif
               01344         endif
               01345 
               01346         ifdef _DEFCONBP
               01347                 ifndef  _DEFCONB
               01348 #define _DEFCONB
               01349                 endif
               01350         endif
               01351         
               01352         ifdef _CONLABELP                ;CONLABELP aliased to CONP
               01353                 ifndef _DEFCONP
               01354 #define _DEFCONP
               01355                 endif
               01356         endif
               01357         
               01358         ifdef _DEFCONP
               01359                 ifndef  _DEFCON
               01360 #define _DEFCON
               01361                 endif
               01362         endif
               01363         
               01364         ifdef _CONLABEL                 ;CONLABEL aliased to CON
               01365                 ifndef _DEFCON
               01366 #define _DEFCON
               01367                 endif
               01368         endif
               01369         
               01370         ifdef _DEFCONLP
               01371                 ifndef  _DEFCONL
               01372 #define _DEFCONL
               01373                 endif
               01374         endif
               01375         
               01376         ifdef _DEFVARP
               01377                 ifndef  _DEFVAR
               01378 #define _DEFVAR
               01379                 endif
               01380         endif
               01381         
               01382         ifdef _DEFVAR
               01383                 ifndef _DEFADDRESS
               01384 #define _DEFADDRESS
               01385                 endif
               01386                 ifndef _DEFVAL
               01387 #define _DEFVAL
               01388                 endif
               01389         endif
               01390 
               01391         ifdef _DEFVAL
               01392                 ifdef _DEFBIT
               01393                         ifndef _DEFGETBIT
               01394 #define _DEFGETBIT
               01395                         endif
               01396                 endif
               01397                 ifdef _DEFNIB
               01398                         ifndef _DEFGETNIB
               01399 #define _DEFGETNIB
               01400                         endif
               01401                 endif
               01402                 ifdef _DEFBYTE
               01403                         ifndef _DEFGETBYTE
               01404 #define _DEFGETBYTE
               01405                         endif
               01406                 endif
               01407                 ifdef _DEFSBYTE
               01408                         ifndef _DEFGETSBYTE
               01409 #define _DEFGETSBYTE
               01410                         endif
               01411                 endif
               01412                 ifdef _DEFWORD
               01413                         ifndef _DEFGETWORD
               01414 #define _DEFGETWORD
               01415                         endif
               01416                 endif
               01417                 ifdef _DEFSWORD
               01418                         ifndef _DEFGETSWORD
               01419 #define _DEFGETSWORD
               01420                         endif
               01421                 endif
               01422                 ifdef _DEFLONG
               01423                         ifndef _DEFGETLONG
               01424 #define _DEFGETLONG
               01425                         endif
               01426                 endif
               01427                 ifdef _DEFSLONG
               01428                         ifndef _DEFGETSLONG
               01429 #define _DEFGETSLONG
               01430                         endif
               01431                 endif
               01432                 ifdef _DEFFLOAT
               01433                         ifndef _DEFGETLONG
               01434 #define _DEFGETLONG
               01435                         endif
               01436                 endif
               01437         endif
               01438 
               01439         ifdef _DEFGETBIT
               01440                 ifndef  _DEFBITMASK
               01441 #define _DEFBITMASK
               01442                 endif
               01443         endif
               01444 
               01445         ifdef _DEFILET
               01446                 ifndef _DEFSWAPWORK_VAR
               01447 #define _DEFSWAPWORK_VAR
               01448                 endif
               01449                 ifndef _DEFLETFUNC
               01450 #define _DEFLETFUNC
               01451                 endif
               01452                 ifndef _DEFADDRESSARRAY_LET
               01453 #define _DEFADDRESSARRAY_LET
               01454                 endif
               01455         endif
               01456 
               01457         ifdef _DEFTLET
               01458                 ifndef _DEFLET
               01459 #define _DEFLET
               01460                 endif
               01461         endif
               01462 
               01463         ifdef _DEFLET
               01464                 ifndef _DEFLETFUNC
               01465 #define _DEFLETFUNC
               01466                 endif
               01467         endif
               01468 
               01469         ifdef _DEFLETSTACK
               01470                 ifndef _DEFLETFUNC
               01471 #define _DEFLETFUNC
               01472                 endif
               01473         endif
               01474 
               01475         ifdef _DEFLETFUNC
               01476                 ifdef _DEFBIT
               01477                         ifndef _DEFPUTBIT
               01478 #define _DEFPUTBIT
               01479                         endif
               01480                 endif
               01481                 ifdef _DEFNIB
               01482                         ifndef _DEFPUTNIB
               01483 #define _DEFPUTNIB
               01484                         endif
               01485                 endif
               01486                 ifdef _DEFBYTE
               01487                         ifndef _DEFPUTBYTE
               01488 #define _DEFPUTBYTE
               01489                         endif
               01490                 endif
               01491                 ifdef _DEFSBYTE
               01492                         ifndef _DEFPUTBYTE
               01493 #define _DEFPUTBYTE
               01494                         endif
               01495                 endif
               01496                 ifdef _DEFWORD
               01497                         ifndef _DEFPUTWORD
               01498 #define _DEFPUTWORD
               01499                         endif
               01500                 endif
               01501                 ifdef _DEFSWORD
               01502                         ifndef _DEFPUTWORD
               01503 #define _DEFPUTWORD
               01504                         endif
               01505                 endif
               01506                 ifdef _DEFLONG
               01507                         ifndef _DEFPUTLONG
               01508 #define _DEFPUTLONG
               01509                         endif
               01510                 endif
               01511                 ifdef _DEFSLONG
               01512                         ifndef _DEFPUTLONG
               01513 #define _DEFPUTLONG
               01514                         endif
               01515                 endif
               01516                 ifdef _DEFFLOAT
               01517                         ifndef _DEFPUTLONG
               01518 #define _DEFPUTLONG
               01519                         endif
               01520                 endif
               01521         endif
               01522 
               01523         ifdef _DEFPUTBIT
               01524                 ifndef  _DEFBITMASK
               01525 #define _DEFBITMASK
               01526                 endif
               01527         endif
               01528 
               01529         ifdef _DEFADDRESSP
               01530                 ifndef _DEFADDRESS
               01531 #define _DEFADDRESS
               01532                 endif
               01533         endif
               01534         
               01535         ifdef _DEFADDRESS
               01536                 ifdef _DEFARRAY
               01537                         ifndef _DEFADDRESSARRAY_LET
               01538 #define _DEFADDRESSARRAY_LET
               01539                         endif
               01540                 endif
               01541         endif
               01542 
               01543         ifdef _DEFADDRESSARRAY_LET
               01544                 ifdef _DEFBIT
               01545                         ifndef _DEFBITARRAY
               01546 #define _DEFBITARRAY
               01547                         endif
               01548                 endif
               01549                 ifdef _DEFNIB
               01550                         ifndef _DEFNIBARRAY
               01551 #define _DEFNIBARRAY
               01552                         endif
               01553                 endif
               01554                 ifdef _DEFBYTE
               01555                         ifndef _DEFBYTEARRAY
               01556 #define _DEFBYTEARRAY
               01557                         endif
               01558                 endif
               01559                 ifdef _DEFSBYTE
               01560                         ifndef _DEFSBYTEARRAY
               01561 #define _DEFSBYTEARRAY
               01562                         endif
               01563                 endif
               01564                 ifdef _DEFWORD
               01565                         ifndef _DEFWORDARRAY
               01566 #define _DEFWORDARRAY
               01567                         endif
               01568                 endif
               01569                 ifdef _DEFSWORD
               01570                         ifndef _DEFSWORDARRAY
               01571 #define _DEFSWORDARRAY
               01572                         endif
               01573                 endif
               01574                 ifdef _DEFLONG
               01575                         ifndef _DEFLONGARRAY
               01576 #define _DEFLONGARRAY
               01577                         endif
               01578                 endif
               01579                 ifdef _DEFSLONG
               01580                         ifndef _DEFSLONGARRAY
               01581 #define _DEFSLONGARRAY
               01582                         endif
               01583                 endif
               01584                 ifdef _DEFFLOAT
               01585                         ifndef _DEFFLOATARRAY
               01586 #define _DEFFLOATARRAY
               01587                         endif
               01588                 endif
               01589         endif
               01590 
               01591         ifdef _DEFBYTEARRAY
               01592                 ifndef _DEFARRAYADDROOT
               01593 #define _DEFARRAYADDROOT
               01594                 endif
               01595                 ifndef _DEFADJUSTARRAY
               01596 #define _DEFADJUSTARRAY
               01597                 endif
               01598         endif
               01599 
               01600         ifdef _DEFSBYTEARRAY
               01601                 ifndef _DEFARRAYADDROOT
               01602 #define _DEFARRAYADDROOT
               01603                 endif
               01604                 ifndef _DEFADJUSTARRAY
               01605 #define _DEFADJUSTARRAY
               01606                 endif
               01607         endif
               01608 
               01609         ifdef _DEFWORDARRAY
               01610                 ifndef _DEFARRAYADDROOT
               01611 #define _DEFARRAYADDROOT
               01612                 endif
               01613                 ifndef _DEFADJUSTARRAY
               01614 #define _DEFADJUSTARRAY
               01615                 endif
               01616         endif
               01617 
               01618         ifdef _DEFSWORDARRAY
               01619                 ifndef _DEFARRAYADDROOT
               01620 #define _DEFARRAYADDROOT
               01621                 endif
               01622                 ifndef _DEFADJUSTARRAY
               01623 #define _DEFADJUSTARRAY
               01624                 endif
               01625         endif
               01626 
               01627         ifdef _DEFLONGARRAY
               01628                 ifndef _DEFARRAYADDROOT
               01629 #define _DEFARRAYADDROOT
               01630                 endif
               01631                 ifndef _DEFADJUSTARRAY
               01632 #define _DEFADJUSTARRAY
               01633                 endif
               01634         endif
               01635 
               01636         ifdef _DEFSLONGARRAY
               01637                 ifndef _DEFARRAYADDROOT
               01638 #define _DEFARRAYADDROOT
               01639                 endif
               01640                 ifndef _DEFADJUSTARRAY
               01641 #define _DEFADJUSTARRAY
               01642                 endif
               01643         endif
               01644 
               01645         ifdef _DEFFLOATARRAY
               01646                 ifndef _DEFARRAYADDROOT
               01647 #define _DEFARRAYADDROOT
               01648                 endif
               01649                 ifndef _DEFADJUSTARRAY
               01650 #define _DEFADJUSTARRAY
               01651                 endif
               01652         endif
               01653 
               01654         ifdef _DEFNIBARRAY
               01655                 ifndef _DEFARRAYADDROOT
               01656 #define _DEFARRAYADDROOT
               01657                 endif
               01658                 ifndef _DEFADJUSTARRAY
               01659 #define _DEFADJUSTARRAY
               01660                 endif
               01661         endif
               01662 
               01663         ifdef _DEFBITARRAY
               01664                 ifndef _DEFARRAYADDROOT
               01665 #define _DEFARRAYADDROOT
               01666                 endif
               01667                 ifndef _DEFADJUSTARRAY
               01668 #define _DEFADJUSTARRAY
               01669                 endif
               01670         endif
               01671 
               01672         ifdef _DEFHIGH
               01673                 ifndef _DEFHIGHFUNC
               01674 #define _DEFHIGHFUNC
               01675                 endif
               01676         endif
               01677 
               01678         ifdef _DEFHIGHFUNC
               01679                 ifndef _DEFGETPIN
               01680 #define _DEFGETPIN
               01681                 endif
               01682         endif
               01683 
               01684         ifdef _DEFLOW
               01685                 ifndef _DEFLOWFUNC
               01686 #define _DEFLOWFUNC
               01687                 endif
               01688         endif
               01689 
               01690         ifdef _DEFLOWFUNC
               01691                 ifndef _DEFGETPIN
               01692 #define _DEFGETPIN
               01693                 endif
               01694         endif
               01695 
               01696         ifdef _DEFTOGGLE
               01697                 ifndef _DEFTOGGLEFUNC
               01698 #define _DEFTOGGLEFUNC
               01699                 endif
               01700         endif
               01701 
               01702         ifdef _DEFTOGGLEFUNC
               01703                 ifndef _DEFGETPIN
               01704 #define _DEFGETPIN
               01705                 endif
               01706         endif
               01707 
               01708         ifdef _DEFINPUT
               01709                 ifndef _DEFINPUTFUNC
               01710 #define _DEFINPUTFUNC
               01711                 endif
               01712         endif
               01713 
               01714         ifdef _DEFINPUTFUNC
               01715                 ifndef _DEFGETPIN
               01716 #define _DEFGETPIN
               01717                 endif
               01718         endif
               01719 
               01720         ifdef _DEFOUTPUT
               01721                 ifndef _DEFOUTPUTFUNC
               01722 #define _DEFOUTPUTFUNC
               01723                 endif
               01724         endif
               01725 
               01726         ifdef _DEFOUTPUTFUNC
               01727                 ifndef _DEFGETPIN
               01728 #define _DEFGETPIN
               01729                 endif
               01730         endif
               01731 
               01732         ifdef _DEFREVERSE
               01733                 ifndef _DEFREVERSEFUNC
               01734 #define _DEFREVERSEFUNC
               01735                 endif
               01736         endif
               01737 
               01738         ifdef _DEFREVERSEFUNC
               01739                 ifndef _DEFGETPIN
               01740 #define _DEFGETPIN
               01741                 endif
               01742         endif
               01743 
               01744         ifdef _DEFGETPIN
               01745                 ifndef _DEFBITMASK
               01746 #define _DEFBITMASK
               01747                 endif
               01748         endif
               01749 
               01750         ifdef _DEFCLRWP8
               01751                 ifndef  _DEFCLRWP7
               01752 #define _DEFCLRWP7
               01753                 endif
               01754         endif
               01755 
               01756         ifdef _DEFCLRWP7
               01757                 ifndef  _DEFCLRWP6
               01758 #define _DEFCLRWP6
               01759                 endif
               01760         endif
               01761 
               01762         ifdef _DEFCLRWP6
               01763                 ifndef  _DEFCLRWP5
               01764 #define _DEFCLRWP5
               01765                 endif
               01766         endif
               01767 
               01768         ifdef _DEFCLRWP5
               01769                 ifndef  _DEFCLRWP4
               01770 #define _DEFCLRWP4
               01771                 endif
               01772         endif
               01773 
               01774         ifdef _DEFCLRWP4
               01775                 ifndef  _DEFCLRWP3
               01776 #define _DEFCLRWP3
               01777                 endif
               01778         endif
               01779 
               01780         ifdef _DEFCLRWP3
               01781                 ifndef  _DEFCLRWP2
               01782 #define _DEFCLRWP2
               01783                 endif
               01784         endif
               01785 
               01786         ifdef _DEFCLRWP2
               01787                 ifndef  _DEFCLRWP1
               01788 #define _DEFCLRWP1
               01789                 endif
               01790         endif
               01791 
               01792         ifdef _DEFCLRWP1
               01793                 ifndef _DEFCLRW
               01794 #define _DEFCLRW
               01795                 endif
               01796         endif
               01797 
               01798         ifdef _DEFINTERRUPT
               01799                 ifndef _DEFPUSHPC
               01800 #define _DEFPUSHPC
               01801                 endif
               01802         endif
               01803 
               01804         ifdef _DEFFSUB
               01805                 ifndef _DEFFADD
               01806 #define _DEFFADD
               01807                 endif
               01808                 ifndef _DEFSETUPBARG
               01809 #define _DEFSETUPBARG
               01810                 endif
               01811         endif
               01812 
               01813         ifdef _DEFFADD
               01814                 ifndef _DEFNRM3232
               01815 #define _DEFNRM3232
               01816                 endif
               01817                 ifndef _DEFNRM4032
               01818 #define _DEFNRM4032
               01819                 endif
               01820                 ifndef _DEFSETFOV
               01821 #define _DEFSETFOV
               01822                 endif
               01823                 ifndef _DEFSETUPBARG
               01824 #define _DEFSETUPBARG
               01825                 endif
               01826                 ifndef _DEFFPSWAPARGS
               01827 #define _DEFFPSWAPARGS
               01828                 endif
               01829         endif
               01830 
               01831         ifdef _DEFNRM3232
               01832                 ifndef _DEFRES032
               01833 #define _DEFRES032
               01834                 endif
               01835                 ifndef _DEFSETFUN
               01836 #define _DEFSETFUN
               01837                 endif
               01838                 ifndef _DEFFIXSIGN
               01839 #define _DEFFIXSIGN
               01840                 endif
               01841         endif
               01842 
               01843         ifdef _DEFTOFLOAT
               01844                 ifndef _DEFNRM4032
               01845 #define _DEFNRM4032
               01846                 endif
               01847         endif
               01848 
               01849         ifdef _DEFNRM4032
               01850                 ifndef _DEFRES032
               01851 #define _DEFRES032
               01852                 endif
               01853                 ifndef _DEFSETFUN
               01854 #define _DEFSETFUN
               01855                 endif
               01856                 ifndef _DEFSETFOV
               01857 #define _DEFSETFOV
               01858                 endif
               01859                 ifndef _DEFFIXSIGN
               01860 #define _DEFFIXSIGN
               01861                 endif
               01862         endif
               01863 
               01864         ifdef _DEFTOINT
               01865                 ifndef _DEFSETIOV
               01866 #define _DEFSETIOV
               01867                 endif
               01868         endif
               01869 
               01870         ifdef _DEFFMUL
               01871                 ifndef _DEFRES032
               01872 #define _DEFRES032
               01873                 endif
               01874                 ifndef _DEFSETFOV
               01875 #define _DEFSETFOV
               01876                 endif
               01877                 ifndef _DEFSETFUN
               01878 #define _DEFSETFUN
               01879                 endif
               01880                 ifndef _DEFSETUPBARG
               01881 #define _DEFSETUPBARG
               01882                 endif
               01883         endif
               01884 
               01885         ifdef _DEFFDIV
               01886                 ifndef _DEFRES032
               01887 #define _DEFRES032
               01888                 endif
               01889                 ifndef _DEFSETFDZ
               01890 #define _DEFSETFDZ
               01891                 endif
               01892                 ifndef _DEFSETFOV
               01893 #define _DEFSETFOV
               01894                 endif
               01895                 ifndef _DEFSETFUN
               01896 #define _DEFSETFUN
               01897                 endif
               01898                 ifndef _DEFSETUPBARG
               01899 #define _DEFSETUPBARG
               01900                 endif
               01901                 ifndef _DEFFPSWAPARGS
               01902 #define _DEFFPSWAPARGS
               01903                 endif
               01904         endif
               01905 
               01906         ifdef _DEFSETUPBARG
               01907                 ifndef _DEFMOVSW1
               01908 #define _DEFMOVSW1
               01909                 endif
               01910                 ifndef _DEFMOVSW2
               01911 #define _DEFMOVSW2
               01912                 endif
               01913                 ifndef _DEFMOVSW3
               01914 #define _DEFMOVSW3
               01915                 endif
               01916                 ifndef _DEFMOVSW4
               01917 #define _DEFMOVSW4
               01918                 endif
               01919         endif
               01920 
               01921         ifdef _DEFNXOR
               01922                 ifndef _DEFXOR
               01923 #define _DEFXOR
               01924                 endif
               01925                 ifndef _DEFNOT
               01926 #define _DEFNOT
               01927                 endif
               01928         endif
               01929 
               01930         ifdef _DEFNIOR
               01931                 ifndef _DEFIOR
               01932 #define _DEFIOR
               01933                 endif
               01934                 ifndef _DEFNOT
               01935 #define _DEFNOT
               01936                 endif
               01937         endif
               01938 
               01939         ifdef _DEFNAND
               01940                 ifndef _DEFAND
               01941 #define _DEFAND
               01942                 endif
               01943                 ifndef _DEFNOT
               01944 #define _DEFNOT
               01945                 endif
               01946         endif
               01947 
               01948         ifdef _DEFXOR
               01949                 ifndef _DEFMOVSW1
               01950 #define _DEFMOVSW1
               01951                 endif
               01952                 ifndef _DEFMOVSW2
               01953 #define _DEFMOVSW2
               01954                 endif
               01955                 ifndef _DEFMOVSW3
               01956 #define _DEFMOVSW3
               01957                 endif
               01958                 ifndef _DEFMOVSW4
               01959 #define _DEFMOVSW4
               01960                 endif
               01961         endif
               01962 
               01963         ifdef _DEFIOR
               01964                 ifndef _DEFMOVSW1
               01965 #define _DEFMOVSW1
               01966                 endif
               01967                 ifndef _DEFMOVSW2
               01968 #define _DEFMOVSW2
               01969                 endif
               01970                 ifndef _DEFMOVSW3
               01971 #define _DEFMOVSW3
               01972                 endif
               01973                 ifndef _DEFMOVSW4
               01974 #define _DEFMOVSW4
               01975                 endif
               01976         endif
               01977 
               01978         ifdef _DEFAND
               01979                 ifndef _DEFMOVSW1
               01980 #define _DEFMOVSW1
               01981                 endif
               01982                 ifndef _DEFMOVSW2
               01983 #define _DEFMOVSW2
               01984                 endif
               01985                 ifndef _DEFMOVSW3
               01986 #define _DEFMOVSW3
               01987                 endif
               01988                 ifndef _DEFMOVSW4
               01989 #define _DEFMOVSW4
               01990                 endif
               01991         endif
               01992 
               01993         ifdef _DEFSUB
               01994                 ifndef _DEFNEG
               01995 #define _DEFNEG
               01996                 endif
               01997                 ifndef _DEFADD
               01998 #define _DEFADD
               01999                 endif
               02000         endif
               02001 
               02002         ifdef _DEFADD
               02003                 ifndef _DEFMOVSW1
               02004 #define _DEFMOVSW1
               02005                 endif
               02006                 ifndef _DEFMOVSW2
               02007 #define _DEFMOVSW2
               02008                 endif
               02009                 ifndef _DEFMOVSW3
               02010 #define _DEFMOVSW3
               02011                 endif
               02012                 ifndef _DEFMOVSW4
               02013 #define _DEFMOVSW4
               02014                 endif
               02015         endif
               02016 
               02017         ifdef _DEFDIG
               02018                 ifndef _DEFDIVIDE
               02019 #define _DEFDIVIDE
               02020                 endif
               02021                 ifndef _DEFSET5
               02022 #define _DEFSET5
               02023                 endif
               02024                 ifndef _DEFMOVSW1
               02025 #define _DEFMOVSW1
               02026                 endif
               02027                 ifndef _DEFMOVSW2
               02028 #define _DEFMOVSW2
               02029                 endif
               02030                 ifndef _DEFMOVSW3
               02031 #define _DEFMOVSW3
               02032                 endif
               02033                 ifndef _DEFMOVSW4
               02034 #define _DEFMOVSW4
               02035                 endif
               02036                 ifndef _DEFMOVWS5
               02037 #define _DEFMOVWS5
               02038                 endif
               02039         endif
               02040 
               02041         ifdef _DEFMOD
               02042                 ifndef  _DEFDIVIDE
               02043 #define _DEFDIVIDE
               02044                 endif
               02045         endif
               02046 
               02047         ifdef _DEFDIV
               02048                 ifndef  _DEFDIVIDE
               02049 #define _DEFDIVIDE
               02050                 endif
               02051         endif
               02052 
               02053         ifdef _DEFDIVIDE
               02054                 ifndef _DEFNEG
               02055 #define _DEFNEG
               02056                 endif
               02057                 ifndef _DEFMOVSW1
               02058 #define _DEFMOVSW1
               02059                 endif
               02060                 ifndef _DEFMOVSW2
               02061 #define _DEFMOVSW2
               02062                 endif
               02063                 ifndef _DEFMOVSW3
               02064 #define _DEFMOVSW3
               02065                 endif
               02066                 ifndef _DEFMOVSW4
               02067 #define _DEFMOVSW4
               02068                 endif
               02069         endif
               02070 
               02071         ifdef _DEFMULH
               02072                 ifndef  _DEFMUL
               02073 #define _DEFMUL
               02074                 endif
               02075         endif
               02076 
               02077         ifdef _DEFMULM
               02078                 ifndef  _DEFMUL
               02079 #define _DEFMUL
               02080                 endif
               02081         endif
               02082 
               02083         ifdef _DEFMULL
               02084                 ifndef  _DEFMUL
               02085 #define _DEFMUL
               02086                 endif
               02087         endif
               02088 
               02089         ifdef _DEFMUL
               02090                 ifndef _DEFMOVSW1
               02091 #define _DEFMOVSW1
               02092                 endif
               02093                 ifndef _DEFMOVSW2
               02094 #define _DEFMOVSW2
               02095                 endif
               02096                 ifndef _DEFMOVSW3
               02097 #define _DEFMOVSW3
               02098                 endif
               02099                 ifndef _DEFMOVSW4
               02100 #define _DEFMOVSW4
               02101                 endif
               02102         endif
               02103 
               02104         ifdef _DEFSHR
               02105                 ifndef _DEFMOVSW1
               02106 #define _DEFMOVSW1
               02107                 endif
               02108                 ifndef _DEFMOVSW2
               02109 #define _DEFMOVSW2
               02110                 endif
               02111                 ifndef _DEFMOVSW3
               02112 #define _DEFMOVSW3
               02113                 endif
               02114                 ifndef _DEFMOVSW4
               02115 #define _DEFMOVSW4
               02116                 endif
               02117         endif
               02118 
               02119         ifdef _DEFSHL
               02120                 ifndef _DEFMOVSW1
               02121 #define _DEFMOVSW1
               02122                 endif
               02123                 ifndef _DEFMOVSW2
               02124 #define _DEFMOVSW2
               02125                 endif
               02126                 ifndef _DEFMOVSW3
               02127 #define _DEFMOVSW3
               02128                 endif
               02129                 ifndef _DEFMOVSW4
               02130 #define _DEFMOVSW4
               02131                 endif
               02132         endif
               02133 
               02134         ifdef _DEFFMAX
               02135                 ifndef _DEFFCMP
               02136 #define _DEFFCMP
               02137                 endif
               02138                 ifndef _DEFMINMAX
               02139 #define _DEFMINMAX
               02140                 endif
               02141         endif
               02142 
               02143         ifdef _DEFFMIN
               02144                 ifndef _DEFFCMP
               02145 #define _DEFFCMP
               02146                 endif
               02147                 ifndef _DEFMINMAX
               02148 #define _DEFMINMAX
               02149                 endif
               02150         endif
               02151 
               02152         ifdef _DEFMAX
               02153                 ifndef _DEFCMP
               02154 #define _DEFCMP
               02155                 endif
               02156                 ifndef _DEFMINMAX
               02157 #define _DEFMINMAX
               02158                 endif
               02159         endif
               02160 
               02161         ifdef _DEFMIN
               02162                 ifndef _DEFCMP
               02163 #define _DEFCMP
               02164                 endif
               02165                 ifndef _DEFMINMAX
               02166 #define _DEFMINMAX
               02167                 endif
               02168         endif
               02169 
               02170         ifdef _DEFMINMAX
               02171                 ifndef _DEFMOVSW1
               02172 #define _DEFMOVSW1
               02173                 endif
               02174                 ifndef _DEFMOVSW2
               02175 #define _DEFMOVSW2
               02176                 endif
               02177                 ifndef _DEFMOVSW3
               02178 #define _DEFMOVSW3
               02179                 endif
               02180                 ifndef _DEFMOVSW4
               02181 #define _DEFMOVSW4
               02182                 endif
               02183         endif
               02184 
               02185         ifdef _DEFREV
               02186                 ifndef _DEFMOVSW1
               02187 #define _DEFMOVSW1
               02188                 endif
               02189                 ifndef _DEFMOVSW2
               02190 #define _DEFMOVSW2
               02191                 endif
               02192                 ifndef _DEFMOVSW3
               02193 #define _DEFMOVSW3
               02194                 endif
               02195                 ifndef _DEFMOVSW4
               02196 #define _DEFMOVSW4
               02197                 endif
               02198         endif
               02199 
               02200         ifdef _DEFCOS
               02201                 ifndef _DEFSIN
               02202 #define _DEFSIN
               02203                 endif
               02204         endif
               02205 
               02206         ifdef _DEFABS
               02207                 ifndef _DEFNEG
               02208 #define _DEFNEG
               02209                 endif
               02210         endif
               02211 
               02212         ifdef _DEFLNOT
               02213                 ifndef _DEFFALSE
               02214 #define _DEFFALSE
               02215                 endif
               02216                 ifndef _DEFTRUE
               02217 #define _DEFTRUE
               02218                 endif
               02219         endif
               02220 
               02221         ifdef _DEFLAND
               02222                 ifndef _DEFTRUE
               02223 #define _DEFTRUE
               02224                 endif
               02225                 ifndef _DEFFALSE
               02226 #define _DEFFALSE
               02227                 endif
               02228         endif
               02229 
               02230         ifdef _DEFLOR
               02231                 ifndef _DEFTRUE
               02232 #define _DEFTRUE
               02233                 endif
               02234                 ifndef _DEFFALSE
               02235 #define _DEFFALSE
               02236                 endif
               02237         endif
               02238 
               02239         ifdef _DEFLXOR
               02240                 ifndef _DEFTRUE
               02241 #define _DEFTRUE
               02242                 endif
               02243                 ifndef _DEFXORTRUE
               02244 #define _DEFXORTRUE
               02245                 endif
               02246         endif   
               02247 
               02248         ifdef _DEFFLESS
               02249                 ifndef _DEFFCMP
               02250 #define _DEFFCMP
               02251                 endif
               02252                 ifndef _DEFCMPEND
               02253 #define _DEFCMPEND
               02254                 endif
               02255         endif
               02256 
               02257         ifdef _DEFFLESSEQUAL
               02258                 ifndef _DEFFCMP
               02259 #define _DEFFCMP
               02260                 endif
               02261                 ifndef _DEFCMPEND
               02262 #define _DEFCMPEND
               02263                 endif
               02264         endif
               02265 
               02266         ifdef _DEFFEQUAL
               02267                 ifndef _DEFFCMP
               02268 #define _DEFFCMP
               02269                 endif
               02270                 ifndef _DEFCMPEND
               02271 #define _DEFCMPEND
               02272                 endif
               02273         endif
               02274 
               02275         ifdef _DEFFGREATEQUAL
               02276                 ifndef _DEFFCMP
               02277 #define _DEFFCMP
               02278                 endif
               02279                 ifndef _DEFCMPEND
               02280 #define _DEFCMPEND
               02281                 endif
               02282         endif
               02283 
               02284         ifdef _DEFFGREAT
               02285                 ifndef _DEFFCMP
               02286 #define _DEFFCMP
               02287                 endif
               02288                 ifndef _DEFCMPEND
               02289 #define _DEFCMPEND
               02290                 endif
               02291         endif
               02292 
               02293         ifdef _DEFFNOTEQUAL
               02294                 ifndef _DEFFCMP
               02295 #define _DEFFCMP
               02296                 endif
               02297                 ifndef _DEFCMPEND
               02298 #define _DEFCMPEND
               02299                 endif
               02300         endif
               02301 
               02302         ifdef _DEFLESS
               02303                 ifndef _DEFCMP
               02304 #define _DEFCMP
               02305                 endif
               02306                 ifndef _DEFCMPEND
               02307 #define _DEFCMPEND
               02308                 endif
               02309         endif
               02310 
               02311         ifdef _DEFLESSEQUAL
               02312                 ifndef _DEFCMP
               02313 #define _DEFCMP
               02314                 endif
               02315                 ifndef _DEFCMPEND
               02316 #define _DEFCMPEND
               02317                 endif
               02318         endif
               02319 
               02320         ifdef _DEFEQUAL
               02321                 ifndef _DEFCMP
               02322 #define _DEFCMP
               02323                 endif
               02324                 ifndef _DEFCMPEND
               02325 #define _DEFCMPEND
               02326                 endif
               02327         endif
               02328 
               02329         ifdef _DEFGREATEQUAL
               02330                 ifndef _DEFCMP
               02331 #define _DEFCMP
               02332                 endif
               02333                 ifndef _DEFCMPEND
               02334 #define _DEFCMPEND
               02335                 endif
               02336         endif
               02337 
               02338         ifdef _DEFGREAT
               02339                 ifndef _DEFCMP
               02340 #define _DEFCMP
               02341                 endif
               02342                 ifndef _DEFCMPEND
               02343 #define _DEFCMPEND
               02344                 endif
               02345         endif
               02346 
               02347         ifdef _DEFNOTEQUAL
               02348                 ifndef _DEFCMP
               02349 #define _DEFCMP
               02350                 endif
               02351                 ifndef _DEFCMPEND
               02352 #define _DEFCMPEND
               02353                 endif
               02354         endif
               02355 
               02356         ifdef _DEFFCMP
               02357                 ifndef _DEFMOVSW1
               02358 #define _DEFMOVSW1
               02359                 endif
               02360                 ifndef _DEFMOVSW2
               02361 #define _DEFMOVSW2
               02362                 endif
               02363                 ifndef _DEFMOVSW3
               02364 #define _DEFMOVSW3
               02365                 endif
               02366                 ifndef _DEFMOVSW4
               02367 #define _DEFMOVSW4
               02368                 endif
               02369         endif
               02370 
               02371         ifdef _DEFCMP
               02372                 ifndef _DEFMOVSW1
               02373 #define _DEFMOVSW1
               02374                 endif
               02375                 ifndef _DEFMOVSW2
               02376 #define _DEFMOVSW2
               02377                 endif
               02378                 ifndef _DEFMOVSW3
               02379 #define _DEFMOVSW3
               02380                 endif
               02381                 ifndef _DEFMOVSW4
               02382 #define _DEFMOVSW4
               02383                 endif
               02384         endif
               02385 
               02386         ifdef _DEFCMPEND
               02387                 ifndef _DEFTRUE
               02388 #define _DEFTRUE
               02389                 endif
               02390                 ifndef _DEFFALSE
               02391 #define _DEFFALSE
               02392                 endif
               02393         endif
               02394 
               02395         ifdef _DEFMOVSW4
               02396                 ifndef _DEFSET0
               02397 #define _DEFSET0
               02398                 endif
               02399         endif
               02400 
               02401         ifdef _DEFMOVSW3
               02402                 ifndef _DEFSET0
               02403 #define _DEFSET0
               02404                 endif
               02405         endif
               02406 
               02407         ifdef _DEFMOVSW2
               02408                 ifndef _DEFSET0
               02409 #define _DEFSET0
               02410                 endif
               02411         endif
               02412 
               02413         ifdef _DEFMOVSW1
               02414                 ifndef _DEFSET0
               02415 #define _DEFSET0
               02416                 endif
               02417         endif
               00067 ;********************************************************************************
               00068 ;       Basic Micro MBasic generated assembly file
               00069 ;********************************************************************************
0000           00070                 ORG     0x000             ; processor reset vector
               00071         errorlevel -306
0000 0000      00072                 nop                       ; ICD support
0001 3000      00073                 movlw   (_PROCSETUP>>8)
0002 008A      00074                 movwf   PCLATH
0003 2829      00075                 goto    _PROCSETUP        ; go to beginning of program
               00076         errorlevel +306
               00077 
0004           00078                 ORG     0x004             ; interrupt vector location
0004 00FF      00079                 movwf   _w_temp           ; save off current W register contents
0005 0803      00080                 movfw   STATUS            ; move status register into W register
0006 0183      00081                 clrf    STATUS            ; Select bank0
0007 00FE      00082                 movwf   _status_temp      ; save off contents of STATUS register
0008 080A      00083                 movfw   PCLATH            ; move PCLATH register into W register
0009 018A      00084                 clrf    PCLATH            ; Select Page0
000A 00FD      00085                 movwf   _pclath_temp      ; save off contents of PCLATH register
000B 0804      00086                 movfw   FSR               ; move FSR register into W register
000C 00FC      00087                 movwf   _fsr_temp         ; save off contents of FSR register
000D           00088 _ISRSTART                                 ; ISR Start
               00089 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB5CDB~1.LIB" ;mbasic14\mbasicint.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;==========================================================================
               00004 ;
               00005 ;       Interrupt Handlers
               00006 ;
               00007 ;==========================================================================
               00008 
               00009 ;==========================================================================
               00010 ;
               00011 ;       Video Handlers(must be first)
               00012 ;
               00013 ;==========================================================================
               00014 
               00015                 ifdef _DEFENABLEVIDEO
               00016 #define _HSIZE          16      ;characters
               00017 
               00018                 ifndef SYNCPORT
               00019 #define SYNCPORT PORTC
               00020                 endif
               00021                 ifndef SYNCPIN
               00022 #define SYNCPIN 0
               00023                 endif
               00024                 ifndef VIDPORT
               00025 #define VIDPORT PORTB
               00026                 endif
               00027                 ifndef VIDPIN
               00028 #define VIDPIN 0
               00029                 endif
               00030 
               00031                 ifndef LINECYCLES
               00032 #define LINECYCLES              318     ;cycles
               00033                 endif
               00034 #define _HALFLINECYCLES (LINECYCLES>>1) ;cycles
               00035                 ifndef VSYNCWIDTH
               00036 #define VSYNCWIDTH              81      ;.2n usec
               00037                 endif
               00038 
               00039 ;Horizontal timings
               00040                 ifndef HSYNC
               00041 #define HSYNC           9       ;cycles
               00042                 endif
               00043                 ifndef HBLANK
               00044 #define HBLANK          40      ;cycles
               00045                 endif
               00046                 ifndef HBPORCH
               00047 #define HBPORCH         22      ;cycles
               00048                 endif
               00049 
               00050 ;Vertical timings
               00051                 ifndef VPRESYNC
               00052 #define VPRESYNC        6       ;1/2 lines
               00053                 endif
               00054                 ifndef VSYNC
               00055 #define VSYNC           6       ;1/2 lines
               00056                 endif
               00057                 ifndef VPOSTSYNC
               00058 #define VPOSTSYNC       6       ;1/2 lines
               00059                 endif
               00060                 ifndef VBLANK
               00061 #define VBLANK          45      ;lines
               00062                 endif
               00063                 ifndef VSIZE
               00064 #define VSIZE           192     ;lines
               00065                 endif
               00066                 ifndef VBPORCH
               00067 #define VBPORCH         87      ;lines
               00068                 endif
               00069 
               00070         errorlevel -302
               00071         errorlevel -306
               00072         errorlevel -307
               00073 
               00074 _TVWORK1        equ             0xEF
               00075 _TVWORK2        equ             0xEE
               00076 _TVWORK3        equ             0xED
               00077 _TVWORK4        equ             0xEC
               00078 _TVWORK5        equ             0xEB
               00079 _TVFIELD        equ             0xEA
               00080 _TVFLAGS        equ             0XE9
               00081 _TVSCROLL       equ             0xE8
               00082 
               00083 _TVBUFFER       equ             0xD8;to E7
               00084 
               00085 _TVTEXTL        equ             0x110
               00086 _TVTEXTH        equ             0x190
               00087 
               00088 _TVpref         equ             0
               00089 _TVsyncf        equ             1
               00090 _TVpostf        equ             2
               00091 _TVblank1f      equ             3
               00092 _TVactivef      equ             4
               00093 _TVblank2f      equ             5
               00094 
               00095 ;==========================================================================
               00096 ;       Video Macro Definitions
               00097 ;==========================================================================
               00098 
               00099 _TVdelay macro delay    ;.2n usec
               00100 _TVcnt = delay          
               00101         if _TVcnt >= 6
               00102 _TVcnt=_TVcnt-2
               00103                 movlw   _TVcnt/4        ;1
               00104                 movwf   _TVWORK3        ;1(2)
               00105 _TVcnt=_TVcnt%4
               00106                 nop                             ;1
               00107                 decfsz  _TVWORK3,f;1/2
               00108                 goto    $-2             ;2/0(4n)
               00109                 nop                             ;1(4)
               00110         endif
               00111         if _TVcnt == 5
               00112                 goto    $+1             ;2
               00113                 goto    $+1             ;2
               00114                 nop                             ;1
               00115         endif
               00116         if _TVcnt == 4
               00117                 goto    $+1             ;2
               00118                 goto    $+1             ;2
               00119         endif
               00120         if _TVcnt == 3
               00121                 goto    $+1             ;2
               00122                 nop                             ;1
               00123         endif
               00124         if _TVcnt == 2
               00125                 goto    $+1             ;2
               00126         endif
               00127         if _TVcnt == 1
               00128                 nop                             ;1
               00129         endif
               00130           endm                          
               00131           
               00132 _TVdisplaybyte macro reg
               00133                 nop                                     ;1
               00134                 movwf   INDF            ;1
               00135                 nop                                     ;1
               00136                 rrf             INDF,F          ;1
               00137                 rrf             INDF,F          ;1
               00138                 nop                                     ;1
               00139                 rrf             INDF,F          ;1
               00140                 nop                                     ;1
               00141                 rrf             INDF,F          ;1
               00142                 nop                                     ;1
               00143                 rrf             INDF,F          ;1
               00144                 rrf             INDF,F          ;1
               00145                 movfw   reg                     ;1
               00146                 rrf             INDF,F          ;1(14)
               00147         endm            
               00148 
               00149 _TVGetLine macro label
               00150                 movlw   label>>8                        ;1
               00151                 movwf   PCLATH                          ;1(2)
               00152 _TVcnt=0;
               00153         while (_TVcnt<_HSIZE)
               00154                 movfw   INDF                            ;1
               00155                 incf    FSR,F                           ;1
               00156                 call    label                           ;5
               00157                 movwf   _TVBUFFER+_TVcnt        ;1(128)
               00158 _TVcnt++
               00159         endw
               00160                 clrf    PCLATH                          ;1
               00161                 GOTO    _NormalInt                      ;2(3)(Total = 133)
               00162         endm
               00163         
               00164 ;==========================================================================
               00165 ;       Video Interrupt Entrance
               00166 ;==========================================================================
               00167 
               00168         movlw   SYNCPORT                                        ;1
               00169         movwf   FSR                                                     ;1
               00170         bcf     INDF,SYNCPIN                            ;1 Start Sync
               00171         clrwdt                                                          ;1
               00172 
               00173                 banksel _TVWORK1                                        ;2
               00174                 movfw   _TVWORK1                                        ;1
               00175                 addwf   PCL,F                                           ;1
               00176                 goto    _TV6_3pre               
               00177                 goto    _TV6_3sync
               00178         goto    _TV6_3post
               00179                 goto    _TV26blank1
               00180                 goto    _TV213active
               00181                 goto    _TV14blank2                                     ;2(10)
               00182 
               00183 ;==========================================================================
               00184 ;       Video Active
               00185 ;==========================================================================
               00186 _TV213active
               00187         movlw   VSIZE>>1                                        ;1
               00188         btfss   _TVFLAGS,_TVactivef                     ;1
               00189         movwf   _TVWORK2                                        ;1
               00190         bsf     _TVFLAGS,_TVactivef                     ;1
               00191                 _TVdelay HSYNC                                          ;HSYNC
               00192         bsf     INDF,SYNCPIN                            ;1(5+HSYNC)
               00193 
               00194 ;==========================================================================
               00195 ;       Video DisplayLines
               00196 ;==========================================================================
               00197 _TVdisplaylines
               00198                 _TVdelay HBLANK                                         ;HBLANK
               00199                 movlw   VIDPORT                                         ;1
               00200                 movwf   FSR                                                     ;1
               00201                 movfw   _TVBUFFER                                       ;1
               00202                 _TVdisplaybyte _TVBUFFER+1      
               00203                 _TVdisplaybyte _TVBUFFER+2
               00204                 _TVdisplaybyte _TVBUFFER+3
               00205                 _TVdisplaybyte _TVBUFFER+4
               00206                 _TVdisplaybyte _TVBUFFER+5
               00207                 _TVdisplaybyte _TVBUFFER+6
               00208                 _TVdisplaybyte _TVBUFFER+7
               00209                 _TVdisplaybyte _TVBUFFER+8
               00210                 _TVdisplaybyte _TVBUFFER+9
               00211                 _TVdisplaybyte _TVBUFFER+10
               00212                 _TVdisplaybyte _TVBUFFER+11
               00213                 _TVdisplaybyte _TVBUFFER+12
               00214                 _TVdisplaybyte _TVBUFFER+13
               00215                 _TVdisplaybyte _TVBUFFER+14
               00216                 _TVdisplaybyte _TVBUFFER+15
               00217                 _TVdisplaybyte _TVBUFFER                        ;224
               00218                 nop                                                                     ;1
               00219                 bcf             INDF,VIDPIN                                     ;1(229+HBLANK)
               00220 
               00221 ;==========================================================================
               00222 ;       Video Reset TIMER1 for next INT during BackPorch
               00223 ;==========================================================================
               00224                 clrf    STATUS                                          ;1
               00225                 MOVFW   TMR1L                                           ;1
               00226                 ADDLW   0xff-(LOW ((LINECYCLES)+1))     ;1
               00227                 MOVWF   TMR1L                                           ;1
               00228                 MOVFW   TMR1H                                           ;1
               00229                 SKPNC                                                           ;1
               00230                 ADDLW   1                                                       ;1
               00231                 ADDLW   0xff-(HIGH ((LINECYCLES)+6));1
               00232                 MOVWF   TMR1H                                           ;1
               00233                 banksel _TVWORK1                                        ;2
               00234                 _TVdelay HBPORCH                                        ;HBPORCH(11+HBPORCH)
               00235 
               00236 ;==========================================================================
               00237 ;       Video NonINT HSYNC
               00238 ;==========================================================================
               00239         _TVdelay 2
               00240         
               00241         movlw   SYNCPORT                                        ;1
               00242         movwf   FSR                                                     ;1
               00243         bcf     INDF,SYNCPIN                            ;1 Start Sync
               00244         clrwdt                                                          ;1
               00245                 _TVdelay HSYNC                                          ;HSYNC
               00246         bsf     INDF,SYNCPIN                            ;1(5+HSYNC)
               00247         
               00248 ;==========================================================================
               00249 ;       Video Load Lines
               00250 ;==========================================================================
               00251 _TVloadlines
               00252                 movlw   _TVlinetbl>>8                           ;1
               00253                 movwf   PCLATH                                          ;1
               00254                 rrf             _TVWORK4,W                                      ;1
               00255                 movwf   _TVWORK5                                        ;1
               00256                 rrf             _TVWORK5,W                                      ;1
               00257                 andlw   0x1E                                            ;1
               00258                 addwf   PCL,F                                           ;1
               00259 
               00260 _TVlinetbl              
               00261                 movlw   LOW (_TVTEXTL+(0*_HSIZE))
               00262                 goto    _TVfinishtext
               00263                 movlw   LOW (_TVTEXTL+(1*_HSIZE))
               00264                 goto    _TVfinishtext
               00265                 movlw   LOW (_TVTEXTL+(2*_HSIZE))
               00266                 goto    _TVfinishtext
               00267                 movlw   LOW (_TVTEXTL+(3*_HSIZE))
               00268                 goto    _TVfinishtext
               00269                 movlw   LOW (_TVTEXTL+(4*_HSIZE))
               00270                 goto    _TVfinishtext
               00271                 movlw   LOW (_TVTEXTL+(5*_HSIZE))
               00272                 goto    _TVfinishtext
               00273                 movlw   LOW (_TVTEXTH+(0*_HSIZE))
               00274                 goto    _TVfinishtext
               00275                 movlw   LOW (_TVTEXTH+(1*_HSIZE))
               00276                 goto    _TVfinishtext
               00277                 movlw   LOW (_TVTEXTH+(2*_HSIZE))
               00278                 goto    _TVfinishtext
               00279                 movlw   LOW (_TVTEXTH+(3*_HSIZE))
               00280                 goto    _TVfinishtext
               00281                 movlw   LOW (_TVTEXTH+(4*_HSIZE))
               00282                 goto    _TVfinishtext
               00283                 movlw   LOW (_TVTEXTH+(5*_HSIZE))       ;1
               00284                 goto    _TVfinishtext                           ;2
               00285 _TVfinishtext
               00286                 bsf             STATUS,IRP                                      ;1
               00287                 movwf   FSR                                                     ;1
               00288                 incf    _TVWORK4,F                                      ;1
               00289 
               00290                 movlw   _TVCALCTBL>>8                           ;1
               00291                 movwf   PCLATH                                          ;1
               00292 
               00293                 movfw   _TVSCROLL                                       ;1
               00294                 andlw   0x07                                            ;1
               00295                 addwf   _TVWORK2,W                                      ;1
               00296                 andlw   0x07                                            ;1
               00297                 addwf   PCL,F                                           ;1
               00298 _TVCALCTBL              
               00299                 goto    _TVCalcLine0
               00300                 goto    _TVCalcLine7
               00301                 goto    _TVCalcLine6
               00302                 goto    _TVCalcLine5
               00303                 goto    _TVCalcLine4
               00304                 goto    _TVCalcLine3
               00305                 goto    _TVCalcLine2
               00306                 goto    _TVCalcLine1                            ;2
               00307 
               00308 _TVCalcLine0    _TVGetLine _TV_TABLE_0
               00309 _TVCalcLine1    _TVGetLine _TV_TABLE_1
               00310 _TVCalcLine2    _TVGetLine _TV_TABLE_2
               00311 _TVCalcLine3    _TVGetLine _TV_TABLE_3
               00312 _TVCalcLine4    _TVGetLine _TV_TABLE_4
               00313 _TVCalcLine5    _TVGetLine _TV_TABLE_5
               00314 _TVCalcLine6    _TVGetLine _TV_TABLE_6
               00315 _TVCalcLine7    _TVGetLine _TV_TABLE_7          ;133(155)
               00316 
               00317 ;==========================================================================
               00318 ;       Video PRE Sync
               00319 ;==========================================================================
               00320 _TV6_3pre
               00321         movlw   VPRESYNC                                        ;1
               00322         btfss   _TVFLAGS,_TVpref                        ;1
               00323         movwf   _TVWORK2                                        ;1
               00324         bsf     _TVFLAGS,_TVpref                        ;1(25/12)
               00325                 _TVdelay HSYNC
               00326         bsf     INDF,SYNCPIN
               00327                 goto    _HalfInt
               00328 
               00329 ;==========================================================================
               00330 ;       Video Sync
               00331 ;==========================================================================
               00332 _TV6_3sync
               00333         movlw   VSYNC                                           ;1
               00334         btfss   _TVFLAGS,_TVsyncf                       ;1
               00335         movwf   _TVWORK2                                        ;1
               00336         bsf     _TVFLAGS,_TVsyncf                       ;1(25/12)
               00337         _TVdelay VSYNCWIDTH
               00338         bsf     INDF,SYNCPIN
               00339         goto    _HalfInt
               00340 
               00341 ;==========================================================================
               00342 ;       Video POST Sync
               00343 ;==========================================================================
               00344 _TV6_3post
               00345         movlw   VPOSTSYNC                                       ;1
               00346         btfsc   _TVFIELD,0                                      ;1
               00347         movlw   VPOSTSYNC+1                                     ;1
               00348         btfss   _TVFLAGS,_TVpostf                       ;1
               00349         movwf   _TVWORK2                                        ;1
               00350         bsf     _TVFLAGS,_TVpostf                       ;1(27/14)
               00351                 _TVdelay HSYNC
               00352         bsf     INDF,SYNCPIN
               00353         goto    _HalfInt
               00354 
               00355 ;==========================================================================
               00356 ;       Video Front Porch
               00357 ;==========================================================================
               00358 _TV26blank1
               00359         movlw   VBLANK                                          ;1
               00360         btfss   _TVFLAGS,_TVblank1f                     ;1
               00361         movwf   _TVWORK2                                        ;1
               00362         bsf     _TVFLAGS,_TVblank1f                     ;1(25/12)
               00363                 _TVdelay HSYNC                                          ;.2us*n
               00364         bsf     INDF,SYNCPIN                            ;1(3)
               00365         goto    _NormalInt
               00366 
               00367 ;==========================================================================
               00368 ;       Video Back Porch 
               00369 ;==========================================================================
               00370 _TV14blank2
               00371         movlw   VBPORCH                                         ;1
               00372         btfss   _TVFLAGS,_TVblank2f                     ;1
               00373         movwf   _TVWORK2                                        ;1
               00374         bsf     _TVFLAGS,_TVblank2f                     ;1(25/12)
               00375                 _TVdelay HSYNC
               00376         bsf     INDF,SYNCPIN
               00377 
               00378                 decfsz  _TVWORK2,F      
               00379                 goto    _NormalInt
               00380                 clrf    _TVWORK1
               00381                 clrf    _TVWORK4
               00382                 clrf    _TVFLAGS
               00383                 incf    _TVFIELD,F
               00384         btfsc   _TVFIELD,0
               00385                 goto    _HalfInt
               00386                 
               00387 ;==========================================================================
               00388 ;       Video NormalInt
               00389 ;==========================================================================
               00390 _NormalInt
               00391         decf    _TVWORK2,F
               00392         skpnz
               00393                 incf    _TVWORK1,F
               00394                 clrf    STATUS
               00395                 MOVFW   TMR1L
               00396                 ADDLW   0xff-(LOW ((LINECYCLES)+1))
               00397                 MOVWF   TMR1L
               00398                 MOVFW   TMR1H
               00399                 SKPNC
               00400                 ADDLW   1
               00401                 ADDLW   0xff-(HIGH ((LINECYCLES)+6))
               00402                 MOVWF   TMR1H
               00403                 
               00404                 BCF             PIR1,TMR1IF     
               00405                 GOTO    _TV_ISREND
               00406 
               00407 ;==========================================================================
               00408 ;       Video HalfInt
               00409 ;==========================================================================
               00410 _HalfInt
               00411         decf    _TVWORK2,F
               00412         skpnz
               00413                 incf    _TVWORK1,F
               00414                 clrf    STATUS
               00415                 MOVFW   TMR1L
               00416                 ADDLW   0xff-(LOW (_HALFLINECYCLES+1))
               00417                 MOVWF   TMR1L
               00418                 MOVFW   TMR1H
               00419                 SKPNC
               00420                 ADDLW   1
               00421                 ADDLW   0xff-(HIGH (_HALFLINECYCLES+6))
               00422                 MOVWF   TMR1H
               00423                 
               00424                 BCF             PIR1,TMR1IF
               00425 ;               GOTO    _TV_ISREND
               00426 _TV_ISREND
               00427         errorlevel +302
               00428         errorlevel +306
               00429         errorlevel +307
               00430                 endif
               00431 
               00432 ;==========================================================================
               00433 ;
               00434 ;       HSerial handlers
               00435 ;
               00436 ;==========================================================================
               00437                         errorlevel -307
               00438         ifdef _DEFENABLEHSERIAL
               00439         if _BANK3_START != 0
               00440 _HSERINSTART         equ     _BANK3_START
               00441 _HSERINEND           equ     _BANK3_START+1
               00442 _HSERINBUFFERSTART   equ     _BANK3_START+2
               00443 _HSERINBUFFEREND     equ     (_BANK3_START+((_BANK3_END-_BANK3_START)>>1))-2
               00444 _HSEROUTSTART        equ     (_BANK3_START+((_BANK3_END-_BANK3_START)>>1))-1
               00445 _HSEROUTEND          equ     (_BANK3_START+((_BANK3_END-_BANK3_START)>>1))
               00446 _HSEROUTBUFFERSTART  equ     (_BANK3_START+((_BANK3_END-_BANK3_START)>>1))+1
               00447 _HSEROUTBUFFEREND    equ     _BANK3_END-1
               00448         else
               00449                 if _BANK2_START != 0
               00450 _HSERINSTART         equ     _BANK2_START
               00451 _HSERINEND           equ     _BANK2_START+1
               00452 _HSERINBUFFERSTART   equ     _BANK2_START+2
               00453 _HSERINBUFFEREND     equ     (_BANK2_START+((_BANK2_END-_BANK2_START)>>1))-2
               00454 _HSEROUTSTART        equ     (_BANK2_START+((_BANK2_END-_BANK2_START)>>1))-1
               00455 _HSEROUTEND          equ     (_BANK2_START+((_BANK2_END-_BANK2_START)>>1))
               00456 _HSEROUTBUFFERSTART  equ     (_BANK2_START+((_BANK2_END-_BANK2_START)>>1))+1
               00457 _HSEROUTBUFFEREND    equ     _BANK2_END-1
               00458                 else
               00459                         if _BANK1_START != 0
               00460 _HSERINSTART         equ     _BANK1_START
               00461 _HSERINEND           equ     _BANK1_START+1
               00462 _HSERINBUFFERSTART   equ     _BANK1_START+2
               00463 _HSERINBUFFEREND     equ     (_BANK1_START+((_BANK1_END-_BANK1_START)>>1))-2
               00464 _HSEROUTSTART        equ     (_BANK1_START+((_BANK1_END-_BANK1_START)>>1))-1
               00465 _HSEROUTEND          equ     (_BANK1_START+((_BANK1_END-_BANK1_START)>>1))
               00466 _HSEROUTBUFFERSTART  equ     (_BANK1_START+((_BANK1_END-_BANK1_START)>>1))+1
               00467 _HSEROUTBUFFEREND    equ     _BANK1_END-1
               00468                                                 else
               00469                                                         messg "Processors with only one BANK of ram cannot use HSERIAL commands"
               00470                         endif
               00471                 endif
               00472         endif
               00473                 ;Check Interrupt Flag
               00474                 btfss   PIR1,RCIF
               00475                 goto    _HSERIALTESTTX
               00476                 ;Check Interrupt Enabled
               00477                 clrc
               00478                                 _@BANK 0,PIE1
               00479                 btfsc   PIE1&0x7F,RCIE
               00480                 setc
               00481                                 _@BANK PIE1,0
               00482                                 skpc
               00483                 goto    _HSERIALTESTTX
               00484 
               00485 ;==========================================================================
               00486 ;
               00487 ;       HSerin Interrupt Entrance
               00488 ;
               00489 ;==========================================================================
               00490 _HSERINHANDLER
               00491                 if _BANK3_START != 0
               00492                                 bsf     STATUS,IRP
               00493                 else
               00494                         if _BANK2_START != 0
               00495                                 bsf     STATUS,IRP
               00496                         else
               00497                                 bcf             STATUS,IRP
               00498                         endif
               00499                 endif
               00500                 _@BANK 0,_HSERINSTART
               00501                 movfw   _HSERINSTART&0x7f
               00502                 _@BANK _HSERINSTART,0
               00503                 movwf   FSR
               00504                 movfw   RCREG
               00505                 movwf   INDF
               00506 
               00507                 _@BANK 0,_HSERINSTART
               00508                 movlw   _HSERINBUFFEREND&0xff        ;Incr to next output byte
               00509                 subwf   _HSERINSTART&0x7f,w
               00510                 movlw   _HSERINBUFFERSTART&0xff
               00511                 skpz
               00512                 incf    _HSERINSTART&0x7f,w
               00513                 movwf   _HSERINSTART&0x7f
               00514                 _@BANK _HSERINSTART,0
               00515                 goto    _HSERIALISREND
               00516                 
               00517 _HSERIALTESTTX                
               00518                 ;Check Interrupt Flag
               00519                 btfss   PIR1,TXIF
               00520                 goto    _HSERIALISREND
               00521                 ;Check Interrupt Enabled
               00522                 clrc
               00523                                 _@BANK 0,PIE1
               00524                 btfsc   PIE1&0x7F,TXIE
               00525                 setc
               00526                                 _@BANK PIE1,0
               00527                                 skpc
               00528                 goto    _HSERIALISREND
               00529                                 
               00530 ;==========================================================================
               00531 ;
               00532 ;       HSerout Interrupt Entrance
               00533 ;
               00534 ;==========================================================================
               00535 _HSEROUTHANDLER
               00536                 if _BANK3_START != 0
               00537                                 bsf     STATUS,IRP
               00538                 else
               00539                         if _BANK2_START != 0
               00540                                 bsf     STATUS,IRP
               00541                         else
               00542                                 bcf             STATUS,IRP
               00543                         endif
               00544                 endif
               00545                 _@BANK 0,_HSEROUTSTART
               00546 
               00547                 movfw   _HSEROUTSTART&0x7f   ;Check for byte to send
               00548                 subwf   _HSEROUTEND&0x7f,w
               00549                                 skpz
               00550                                 goto    _HSEROUTSKIPDISABLE
               00551                 _@BANK _HSEROUTSTART,PIE1
               00552                 bcf     PIE1&0x7f,TXIE
               00553                 goto    _HSERIALISREND
               00554 _HSEROUTSKIPDISABLE
               00555 
               00556                 movfw   _HSEROUTEND&0x7f        ;Send byte
               00557                 movwf   FSR
               00558                 movfw   INDF
               00559                 _@BANK _HSEROUTSTART,TXREG
               00560                 movwf   TXREG
               00561                 _@BANK TXREG,_HSEROUTSTART
               00562         
               00563                 movlw   _HSEROUTBUFFEREND&0xff       ;Incr to next output byte
               00564                 subwf   _HSEROUTEND&0x7f,w
               00565                 movlw   _HSEROUTBUFFERSTART&0xff
               00566                 skpz
               00567                 incf    _HSEROUTEND&0x7f,w
               00568                 movwf   _HSEROUTEND&0x7f
               00569 _HSERIALISREND
               00570         endif
               00571                 errorlevel +307
               00572 
               00573 ;==========================================================================
               00574 ;
               00575 ;       HTimer0 Handler
               00576 ;
               00577 ;==========================================================================
               00578                         errorlevel -307
               00579         ifdef _DEFENABLEHTIMER0
               00580                 ;Check Interrupt Flag
               00581                 btfss   INTCON,T0IF
               00582                 goto    _HTIMER0ISREND
               00583                 ;Check Interrupt Enabled
               00584                 btfss   INTCON,T0IE
               00585                 goto    _HTIMER0ISREND
               00586 
               00587                         _@BANK  0,HTIMER0
               00588                 incf    HTIMER0&0x7F,F
               00589                         skpnz
               00590                         incf    (HTIMER0&0x7F)+1,F
               00591                         skpnz
               00592                 incf    (HTIMER0&0x7F)+2,F
               00593                         skpnz
               00594                         incf    (HTIMER0&0x7F)+3,F
               00595                         _@BANK  HTIMER0,0
               00596                         
               00597                         bcf             INTCON,T0IF
               00598 _HTIMER0ISREND
               00599                 endif
               00600                         errorlevel +307
               00601                         
               00602 ;==========================================================================
               00603 ;
               00604 ;       HTimer1 handler
               00605 ;
               00606 ;==========================================================================
               00607                         errorlevel -307
               00608         ifdef _DEFENABLEHTIMER1
               00609                 ;Check Interrupt Flag
               00610                 btfss   PIR1,TMR1IF
               00611                 goto    _HTIMER1ISREND
               00612                 ;Check Interrupt Enabled
               00613                 clrc
               00614                                 _@BANK 0,PIE1
               00615                 btfsc   PIE1&0x7F,TMR1IE
               00616                 setc
               00617                                 _@BANK PIE1,0
               00618                                 skpc
               00619                 goto    _HTIMER1ISREND
               00620 
               00621                         _@BANK  0,HTIMER1
               00622                 incf    HTIMER1&0x7F,F
               00623                         skpnz
               00624                         incf    (HTIMER1&0x7F)+1,F
               00625                         skpnz
               00626                 incf    (HTIMER1&0x7F)+2,F
               00627                         skpnz
               00628                         incf    (HTIMER1&0x7F)+3,F
               00629                         _@BANK  HTIMER1,0
               00630                         
               00631                         bcf             PIR1,TMR1IF
               00632 _HTIMER1ISREND
               00633                 endif
               00634                         errorlevel +307
               00635 
               00636 ;==========================================================================
               00637 ;
               00638 ;       Interrupt Exit
               00639 ;
               00640 ;==========================================================================
               00641 
000D           00642 _ISREND
000D 0183      00643                 clrf    STATUS            ; Select bank0
000E 087C      00644                 movfw   _fsr_temp         ; retrieve copy of STATUS register
000F 0084      00645                 movwf   FSR               ; restore pre-isr STATUS register contents
0010 087D      00646                 movfw   _pclath_temp      ; retrieve copy of STATUS register
0011 008A      00647                 movwf   PCLATH            ; restore pre-isr STATUS register contents
0012 087E      00648                 movfw   _status_temp      ; retrieve copy of STATUS register
0013 0083      00649                 movwf   STATUS            ; restore pre-isr STATUS register contents
0014 0EFF      00650                 swapf   _w_temp,f
0015 0E7F      00651                 swapf   _w_temp,w         ; restore pre-isr W register contents
0016 0064      00652                                 clrwdt
0017 0009      00653                 retfie                    ; return from ASM interrupt
               00090 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB7774~1.LIB" ;mbasic14\mbasicwork.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;Commands in Work library are guaranteed to be in Page0 
               00004 
               00005                 ifdef _DEBUGMODE
               00006 _DBWORK         equ     _DEBUGWORK
               00007 _DBBITCT        equ     _DEBUGWORK+1
               00008 _DBINTSAVE      equ     _DEBUGWORK+4
               00009 
               00010 _RXDEBUGFUNC
               00011                                                 bsf             STATUS,RP0
               00012                                                 bsf             _DEBUGPORT,_DEBUGINPIN
               00013                                                 bcf             STATUS,RP0
               00014                                                 movlw           8                       ;Set bit count
               00015                                                 movwf           _DBBITCT            
               00016 _RXdebugwait
               00017                                                 clrwdt                                  ;1
               00018                                                 btfsc           _DEBUGPORT,_DEBUGINPIN  ;1/2 Wait for START
               00019                                                 goto            _RXdebugwait            ;2/0
               00020                                                 _@RATEDELAY     ((_DEBUGBAUD*2)/3),0    ;_MHZ delay
               00021 _RXdebugLP  
               00022                                                 clrc                                    ;1
               00023                                                 btfsc           _DEBUGPORT,_DEBUGINPIN  ;2
               00024                                                 setc                                    ;0
               00025                                                 rrf             _DBWORK,F               ;1
               00026                                                 _@RATEDELAY     _DEBUGBAUD,7                    ;_MHZ delay
               00027                                                 decfsz          _DBBITCT,F              ;1
               00028                                                 goto            _RXdebugLP              ;2
               00029                                                 _@RATEDELAY     _DEBUGBAUD,0                    ;_MHZ delay
               00030                                                 movfw           _DBWORK
               00031                                                 return
               00032 
               00033 _TXDEBUGFUNC
               00034                                                 bsf             STATUS,RP0
               00035                                                 bcf             _DEBUGPORT,_DEBUGOUTPIN
               00036                                                 bcf             STATUS,RP0
               00037                                                 movwf           _DBWORK
               00038 
               00039                                                 movlw                   8                               
               00040                                                 movwf           _DBBITCT            
               00041                                                 bcf             _DEBUGPORT,_DEBUGOUTPIN ;1 Set START
               00042 _TXdebugLP  
               00043                                                 _@RATEDELAY     _DEBUGBAUD,8                    ;_MHZ delay
               00044                                                 rrf             _DBWORK,F               ;1
               00045                                                 skpnc                                   ;2
               00046                                                 bsf             _DEBUGPORT,_DEBUGOUTPIN ;0
               00047                                                 skpc                                    ;2
               00048                                                 bcf             _DEBUGPORT,_DEBUGOUTPIN ;0
               00049                                                 decfsz          _DBBITCT,F              ;1
               00050                                                 goto            _TXdebugLP              ;2
               00051 
               00052                                                 _@RATEDELAY     _DEBUGBAUD,1                    ;_MHZ delay
               00053                                                 bsf             _DEBUGPORT,_DEBUGOUTPIN ;1 Set Stop
               00054                                                 _@RATEDELAY     _DEBUGBAUD,0                    ;_MHZ delay
               00055                                                 return
               00056 
               00057 _DBDUMPRAM
               00058                                                 clrf    FSR
               00059                                                 bcf     STATUS,IRP
               00060 _dbdumplplow
               00061                                                 movfw   INDF
               00062                                                 call    _TXDEBUGFUNC
               00063                                                 incfsz  FSR,F
               00064                                                 goto    _dbdumplplow
               00065                                                 bsf     STATUS,IRP
               00066 _dbdumplphigh
               00067                                                 movfw   INDF
               00068                                                 call    _TXDEBUGFUNC
               00069                                                 incfsz  FSR,F
               00070                                                 goto    _dbdumplphigh
               00071                                                 bcf     STATUS,IRP
               00072                                                 goto    _DEBUGEX
               00073 _DBRESET
               00074                                                 call    _RESETPROC
               00075                                                 goto    _DEBUGEX
               00076 
               00077 _DEBUGEX
               00078                                                 movfw   _DBINTSAVE
               00079                                                 andlw   0x80
               00080                                                 iorwf   INTCON,F
               00081 _DEBUGEXCMD
               00082                                                 movfw   INTCON
               00083                                                 movwf   _DBINTSAVE
               00084 _DEBUGINTLP
               00085                                                 bcf             INTCON,GIE
               00086                                                 btfsc   INTCON,GIE
               00087                                                 goto    _DEBUGINTLP
               00088                                                 movlw   0xAA
               00089                                                 call    _TXDEBUGFUNC
               00090                                                 
               00091                                                 movfw   _PC
               00092                                                 call    _TXDEBUGFUNC
               00093                                                 movfw   _PCH
               00094                                                 call    _TXDEBUGFUNC
               00095                                                 call    _RXDEBUGFUNC
               00096                                                 _@TBLJMP h'03',_DBCMDLST,_CMD
               00097 _DBCMDLST
               00098                                                 goto    _DEBUGEX                ;0x0
               00099                                                 goto    _DBDUMPRAM              ;0x1
               00100                                                 goto    _DBRESET                ;0x2
               00101 _DEBUGRUN                                                                               ;0x3
               00102                                                 movfw   _DBINTSAVE
               00103                                                 andlw   0x80
               00104                                                 iorwf   INTCON,F
               00105                                                 return
               00106 
               00107                 ifdef   _DEFDEBUG
               00108 _DEBUGCMD
               00109                                                 movlw   01h
               00110                                                 call    _TXDEBUGFUNC
               00111                                                 movlw   0ffh
               00112                                                 call    _TXDEBUGFUNC
               00113 
               00114                                                 call    _RXDEBUGFUNC
               00115                                                 movfw   _WORK
               00116                                                 call    _TXDEBUGFUNC
               00117                                                 
               00118                                                 goto    _DEBUGEX
               00119                 endif
               00120                 
               00121                 ifdef _DEFDEBUGINFUNC
               00122 _DEBUGINFUNC
               00123                                                 call    _PUSHCMD
               00124                                                 call    _DEBUGEX
               00125                                                 movlw   06h
               00126                                                 call    _TXDEBUGFUNC
               00127                                                 movlw   0fah
               00128                                                 call    _TXDEBUGFUNC
               00129 
               00130                                                 call    _RXDEBUGFUNC
               00131                                                 movwf   _STACK
               00132                                                 call    _TXDEBUGFUNC
               00133 
               00134                                                 clrf    _STACK+1
               00135                                                 clrf    _STACK+2
               00136                                                 clrf    _STACK+3
               00137                                                 return
               00138                 endif
               00139 
               00140                 ifdef _DEFDEBUGIN
               00141 _DEBUGINCMD
               00142                                                 call    _DEBUGINFUNC
               00143                                                 goto    _LETFUNC
               00144                 endif
               00145 
               00146                 endif
               00147                 
0018           00148 _RESETPROC
               00149                 ifdef   ADCON1
0018 3007      00150                                                 movlw   h'07'
               00151                                                 _@BANK  _WORK,ADCON1
                   M                 local oldbank = oldreg >> 7
                   M                 local newbank = newreg >> 7
                   M                 if(oldbank != newbank)
                   M                                 if ((oldbank ^ newbank)&01h)==01h
                   M                                                 if(oldbank & 01h)==01h
                   M                                                                 bcf STATUS,RP0
                   M                                                 else
0019 1683          M                                                                 bsf STATUS,RP0
                   M                                                 endif
                   M                                 endif
                   M                                 if ((oldbank ^ newbank)&02h)==02h
                   M                                                 if(oldbank & 02h)==02h
                   M                                                                 bcf STATUS,RP1
                   M                                                 else
                   M                                                                 bsf STATUS,RP1
                   M                                                 endif
                   M                                 endif
                   M                 endif
001A 009F      00152                                                 movwf   (ADCON1&0x7f)
               00153                                                 _@BANK  ADCON1,_WORK
                   M                 local oldbank = oldreg >> 7
                   M                 local newbank = newreg >> 7
                   M                 if(oldbank != newbank)
                   M                                 if ((oldbank ^ newbank)&01h)==01h
                   M                                                 if(oldbank & 01h)==01h
001B 1283          M                                                                 bcf STATUS,RP0
                   M                                                 else
                   M                                                                 bsf STATUS,RP0
                   M                                                 endif
                   M                                 endif
                   M                                 if ((oldbank ^ newbank)&02h)==02h
                   M                                                 if(oldbank & 02h)==02h
                   M                                                                 bcf STATUS,RP1
                   M                                                 else
                   M                                                                 bsf STATUS,RP1
                   M                                                 endif
                   M                                 endif
                   M                 endif
               00154                 endif
               00155                 ifdef   ANSEL
               00156                                                 errorlevel -219
               00157                                                 _@BANK  _WORK,ANSEL
               00158                                                 clrf    (ANSEL&0x7f)
               00159                                                 _@BANK  ANSEL,_WORK
               00160                                                 errorlevel +219
               00161                 endif
               00162                 ifdef   CMCON
001C 3007      00163                                                 movlw   h'07'
               00164                                                 _@BANK  _WORK,CMCON
                   M                 local oldbank = oldreg >> 7
                   M                 local newbank = newreg >> 7
                   M                 if(oldbank != newbank)
                   M                                 if ((oldbank ^ newbank)&01h)==01h
                   M                                                 if(oldbank & 01h)==01h
                   M                                                                 bcf STATUS,RP0
                   M                                                 else
001D 1683          M                                                                 bsf STATUS,RP0
                   M                                                 endif
                   M                                 endif
                   M                                 if ((oldbank ^ newbank)&02h)==02h
                   M                                                 if(oldbank & 02h)==02h
                   M                                                                 bcf STATUS,RP1
                   M                                                 else
                   M                                                                 bsf STATUS,RP1
                   M                                                 endif
                   M                                 endif
                   M                 endif
001E 009C      00165                                                 movwf   (CMCON&0x7f)
               00166                                                 _@BANK  CMCON,_WORK
                   M                 local oldbank = oldreg >> 7
                   M                 local newbank = newreg >> 7
                   M                 if(oldbank != newbank)
                   M                                 if ((oldbank ^ newbank)&01h)==01h
                   M                                                 if(oldbank & 01h)==01h
001F 1283          M                                                                 bcf STATUS,RP0
                   M                                                 else
                   M                                                                 bsf STATUS,RP0
                   M                                                 endif
                   M                                 endif
                   M                                 if ((oldbank ^ newbank)&02h)==02h
                   M                                                 if(oldbank & 02h)==02h
                   M                                                                 bcf STATUS,RP1
                   M                                                 else
                   M                                                                 bsf STATUS,RP1
                   M                                                 endif
                   M                                 endif
                   M                 endif
               00167                 endif
               00168                 ifdef _PACKEDTOKENS
               00169                                                 movlw   LOW ((_START<<2) - 1)
               00170                                                 movwf   _PC
               00171                                                 movlw   HIGH ((_START<<2) - 1)
               00172                                                 movwf   _PCH
               00173                 else
0020 30AE      00174                                                 movlw   LOW (_START-1)
0021 00F0      00175                                                 movwf   _PC
0022 3001      00176                                                 movlw   HIGH (_START-1)
0023 00F1      00177                                                 movwf   _PCH
               00178                 endif
0024 302C      00179                                                 movlw   _STACK
0025 00F4      00180                                                 movwf   _SP
0026 3070      00181                                                 movlw   _PCSTACK
0027 00F3      00182                                                 movwf   _PCSP
0028 0008      00183                                                 return
               00184 
               00185                         _@ALIGNPAGE D'40'
                   M         local startorg = $
                   M         if (($+size)&0xf800)!=($&0xf800)
                   M                 while $ != ((startorg&0xf800)+0x800)
                   M                         nop
                   M                 endw
                   M         endif
0029           00186 _PROCSETUP
0029 2018      00187                         call    _RESETPROC
               00188                 ifdef _DEFENABLEVIDEO
               00189                                                 bsf             T1CON,TMR1ON
               00190                                                 bsf             STATUS,RP0
               00191                                                 clrf    _TVWORK1&0x7F
               00192                                                 clrf    _TVWORK2&0x7F
               00193                                                 clrf    _TVWORK3&0x7F
               00194                                                 clrf    _TVWORK4&0x7F
               00195                                                 clrf    _TVWORK5&0x7F
               00196                                                 clrf    _TVFIELD&0x7F
               00197                                                 clrf    _TVFLAGS&0x7F
               00198                                                 clrf    _TVSCROLL&0x7F
               00199                                                 bcf             SYNCPORT,SYNCPIN
               00200                                                 clrf    VIDPORT
               00201                                                 bsf             PIE1&0x7F,TMR1IE
               00202                                                 bsf             INTCON&0x7F,PEIE
               00203                                                 bsf             INTCON&0x7F,GIE
               00204                                                 bcf             STATUS,RP0
               00205                                                 
               00206                                                 bsf             STATUS,IRP      ;Indirect Point to high banks(2 and 3)
               00207 
               00208                                                 ;Clear Low Video buffer
               00209                                                 movlw   h'10'
               00210                                                 movwf   FSR
               00211                                                 movlw   96
               00212                                                 movwf   _WORK
               00213                                                 movlw   ' '
               00214 _VIDEORAM_INIT1
               00215                                                 movwf   INDF
               00216                                                 incf    FSR,F
               00217                                                 decf    _WORK,F
               00218                                                 skpz
               00219                                                 goto    _VIDEORAM_INIT1
               00220 
               00221                                                 ;Clear High Video buffer
               00222                                                 movlw   h'90'
               00223                                                 movwf   FSR
               00224                                                 movlw   96
               00225                                                 movwf   _WORK
               00226                                                 movlw   ' '
               00227 _VIDEORAM_INIT2
               00228                                                 movwf   INDF
               00229                                                 incf    FSR,F
               00230                                                 decf    _WORK,F
               00231                                                 skpz
               00232                                                 goto    _VIDEORAM_INIT2
               00233                                         
               00234                                                 bcf             STATUS,IRP      ;Indirect Point to low banks(0 and 1)
               00235                 endif
               00236 
               00237         ifdef PCON
               00238         errorlevel -219
002A 1683 1303 00239                         banksel PCON
002C 188E      00240                         btfsc   PCON&0x7f,NOT_POR
002D 282F      00241                         goto    _POR_SKIP
002E 148E      00242                         bsf     PCON&0x7f,NOT_POR
               00243         ifdef _BORLABEL
               00244                         bsf     PCON&0x7f,NOT_BOR
               00245         endif
               00246         errorlevel +219
               00247         ifdef _PORLABEL
               00248                         _@BANK PCON,_WORK
               00249                 ifdef _PACKEDTOKENS
               00250                         movlw   HIGH ((_PORLABEL<<2) - 1)
               00251                         movwf   _PCH
               00252                         movlw   LOW ((_PORLABEL<<2) - 1)
               00253                         movwf   _PC
               00254                 else
               00255                         movlw   HIGH (_PORLABEL-1)
               00256                         movwf   _PCH
               00257                         movlw   LOW (_PORLABEL-1)
               00258                         movwf   _PC
               00259                 endif
               00260                         goto    _procloop
               00261         endif
002F           00262 _POR_SKIP
               00263         ifdef _BORLABEL
               00264                         btfsc   PCON&0x7f,NOT_BOR
               00265                         goto    _BOR_SKIP
               00266                         bsf     PCON&0x7f,NOT_BOR
               00267                         _@BANK PCON,_WORK
               00268                 ifdef _PACKEDTOKENS
               00269                         movlw   HIGH ((_BORLABEL<<2) - 1)
               00270                         movwf   _PCH
               00271                         movlw   LOW ((_BORLABEL<<2) - 1)
               00272                         movwf   _PC
               00273                 else
               00274                         movlw   HIGH (_BORLABEL-1)
               00275                         movwf   _PCH
               00276                         movlw   LOW (_BORLABEL-1)
               00277                         movwf   _PC
               00278                 endif
               00279                         goto    _procloop
               00280 _BOR_SKIP
               00281         endif
               00282                         _@BANK PCON,_WORK
                   M                 local oldbank = oldreg >> 7
                   M                 local newbank = newreg >> 7
                   M                 if(oldbank != newbank)
                   M                                 if ((oldbank ^ newbank)&01h)==01h
                   M                                                 if(oldbank & 01h)==01h
002F 1283          M                                                                 bcf STATUS,RP0
                   M                                                 else
                   M                                                                 bsf STATUS,RP0
                   M                                                 endif
                   M                                 endif
                   M                                 if ((oldbank ^ newbank)&02h)==02h
                   M                                                 if(oldbank & 02h)==02h
                   M                                                                 bcf STATUS,RP1
                   M                                                 else
                   M                                                                 bsf STATUS,RP1
                   M                                                 endif
                   M                                 endif
                   M                 endif
               00283         endif
               00284         ifdef _TORLABEL
               00285                         btfsc   STATUS,NOT_TO
               00286                         goto    _TOR_SKIP
               00287                 ifdef _PACKEDTOKENS
               00288                         movlw   HIGH ((_TORLABEL<<2) - 1)
               00289                         movwf   _PCH
               00290                         movlw   LOW ((_TORLABEL<<2) - 1)
               00291                         movwf   _PC
               00292                 else
               00293                         movlw   HIGH (_TORLABEL-1)
               00294                         movwf   _PCH
               00295                         movlw   LOW (_TORLABEL-1)
               00296                         movwf   _PC
               00297                 endif
               00298                         goto    _procloop
               00299 _TOR_SKIP
               00300         endif
               00301         ifdef _MORLABEL
               00302                 ifdef _PACKEDTOKENS
               00303                         movlw   HIGH ((_MORLABEL<<2) - 1)
               00304                         movwf   _PCH
               00305                         movlw   LOW ((_MORLABEL<<2) - 1)
               00306                         movwf   _PC
               00307                 else
               00308                         movlw   HIGH (_MORLABEL-1)
               00309                         movwf   _PCH
               00310                         movlw   LOW (_MORLABEL-1)
               00311                         movwf   _PC
               00312                 endif
               00313         endif
0030           00314 _procloop
0030 0064      00315                                                 clrwdt                  ;1 Hit Watchdog timer
               00316                 ifdef _DEBUGMODE                                                ;
               00317                                                 call    _DEBUGEXCMD             ;
               00318                 endif                                                                   ;
0031 203E      00319                                                 call    _GETCMD                 ;12
0032 018A      00320                                                 clrf    PCLATH                  ;1 force BANK0
0033 2036      00321                                                 call    _CALLCMD                ;9(+command cycles)
0034 018A      00322                                                 clrf    PCLATH                  ;1 force BANK0
0035 2830      00323                                                 goto    _procloop               ;2(26)
               00324 
0036 00F5      00325 _CALLCMD                movwf   _CMD                    ;3
0037 3001      00326                                                 movlw   HIGH _CMDLST    ;1
0038 008A      00327                                                 movwf   PCLATH                  ;1
0039 30A2      00328                                                 movlw   LOW _CMDLST             ;1
003A 0775      00329                                                 addwf   _CMD,W                  ;1
003B 1803      00330                                                 skpnc                                   ;1
003C 0A8A      00331                                                 incf    PCLATH,F                ;1
003D 0082      00332                                                 movwf   PCL                             ;0(9)           ;Call time is handled in CMD
               00333 
               00334                 ifndef _PACKEDTOKENS
003E           00335 _GETCMD
003E 0AF0      00336                                                 incf    _PC,f                   ;3
003F 1903      00337                                                 skpnz                                   ;1
0040 0AF1      00338                                                 incf    _PCH,f                  ;1
0041 0871      00339                                                 movfw   _PCH                    ;1
0042 008A      00340                                                 movwf   PCLATH                  ;1
0043 0870      00341                                                 movfw   _PC                             ;1
0044 0082      00342                                                 movwf   PCL                             ;4(12)
               00343                 else            
               00344 _GETCMD
               00345                                                 incf    _PC,F                                   ;3      
               00346                                                 btfss   _PC,3                                   ;2/1
               00347                                                 goto    _GETCMDUPDATE                   ;0/2(92)        averages 23.4 cycles per CMD token
               00348                                                 movfw   _PC                                             ;1
               00349                                                 andlw   0x7                                             ;1
               00350                                                 addlw   _CACHE1-1                               ;1      Add Cache Base
               00351                                                 movwf   FSR                                             ;1      Setup Indirect Address
               00352                                                 movfw   INDF                                    ;1      Get Indirect value
               00353                                                 return                                                  ;2(12)
               00354 
               00355 _GETCMDUPDATE
               00356                                                 skpnz                                                   ;7
               00357                                                 incf    _PCH,F                                  ;1
               00358                                                 call    _RELOADCACHE                    ;79
               00359                                                 movlw   0x9                                             ;1
               00360                                                 iorwf   _PC,F                                   ;1
               00361                                                 movfw   _CACHE1                                 ;1
               00362                                                 return                                                  ;2(92)
               00363 
               00364 _RELOADCACHE
               00365                                                 movlw   _CACHE1                                 ;3
               00366                                                 movwf   FSR                                             ;1
               00367                                                 _@BANK  _WORK,EEADR                             ;1
               00368                                                 clrc                                                    ;1
               00369                                                 rrf             _PCH,W                                  ;1 Get _PCH
               00370                                                 movwf   INDF                                    ;1
               00371                                                 rrf             _PC,W                                   ;1 Get _PC/Index
               00372                                                 andlw   0xF8                                    ;1 Clear Index
               00373                                                 movwf   EEADR&0x7f                              ;1 EEADR = _PC
               00374                                                 clrc                                                    ;1
               00375                                                 rrf             INDF,W                                  ;1
               00376                                                 movwf   EEADRH&0x7f                             ;1 EEADRH = _PCH
               00377                                                 rrf             EEADR&0x7F,F                    ;1(15) Offset EEADR
               00378                                                 
               00379                                                 _@BANK  EEADRH,EECON1                   ;1
               00380                                                 bsf             EECON1&0x7F,EEPGD               ;1 Point to Program Memory
               00381                                                 bsf             EECON1&0x7F,RD                  ;1 Read the FLASH
               00382                                                 nop                                                             ;1
               00383                                                 nop                                                             ;1
               00384                                                 _@BANK  EECON1,EEDATA                   ;1
               00385                                                 movfw   EEDATA&0x7F                             ;1 Get the data
               00386                                                 movwf   INDF                                    ;1
               00387                                                 incf    FSR,F                                   ;1
               00388                                                 movfw   EEDATH&0x7F                             ;1
               00389                                                 movwf   INDF                                    ;1
               00390                                                 incf    FSR,F                                   ;1(12)
               00391 
               00392                                                 incf    EEADR&0x7F,F                    ;1 Incr EEAddress(EEADRH should remain the same)
               00393                                                 _@BANK  EEADRH,EECON1                   ;1
               00394                                                 bsf             EECON1&0x7F,RD                  ;1 Read the FLASH
               00395                                                 nop                                                             ;1
               00396                                                 nop                                                             ;1
               00397                                                 _@BANK  EECON1,EEDATA                   ;1
               00398                                                 movfw   EEDATA&0x7F                             ;1 Get the data
               00399                                                 movwf   INDF                                    ;1
               00400                                                 incf    FSR,F                                   ;1
               00401                                                 movfw   EEDATH&0x7F                             ;1
               00402                                                 movwf   INDF                                    ;1
               00403                                                 incf    FSR,F                                   ;1(12)
               00404 
               00405                                                 incf    EEADR&0x7F,F                    ;1 Incr EEAddress(EEADRH should remain the same)
               00406                                                 _@BANK  EEADRH,EECON1                   ;1
               00407                                                 bsf             EECON1&0x7F,RD                  ;1 Read the FLASH
               00408                                                 nop                                                             ;1
               00409                                                 nop                                                             ;1
               00410                                                 _@BANK  EECON1,EEDATA                   ;1
               00411                                                 movfw   EEDATA&0x7F                             ;1 Get the data
               00412                                                 movwf   INDF                                    ;1
               00413                                                 incf    FSR,F                                   ;1
               00414                                                 movfw   EEDATH&0x7F                             ;1
               00415                                                 movwf   INDF                                    ;1
               00416                                                 incf    FSR,F                                   ;1(12)
               00417 
               00418                                                 incf    EEADR&0x7F,F                    ;1 Incr EEAddress(EEADRH should remain the same)
               00419                                                 _@BANK  EEADRH,EECON1                   ;1
               00420                                                 bsf             EECON1&0x7F,RD                  ;1 Read the FLASH
               00421                                                 nop                                                             ;1
               00422                                                 nop                                                             ;1
               00423                                                 _@BANK  EECON1,EEDATA                   ;1
               00424                                                 movfw   EEDATA&0x7F                             ;1 Get the data
               00425                                                 movwf   INDF                                    ;1
               00426                                                 incf    FSR,F                                   ;1
               00427                                                 movfw   EEDATH&0x7F                             ;1
               00428                                                 movwf   INDF                                    ;1
               00429                                                 _@BANK  EEADRH,_WORK                    ;1(12)
               00430                                                 
               00431                                                 rlf             _CACHECR,F                              ;1
               00432                                                 rlf             _CACHECR,F                              ;1
               00433                                                 rlf             _CACHECR,F                              ;1
               00434                                                 rlf             _CACHE2,F                               ;1
               00435                                                 rlf             _CACHECR,F                              ;1
               00436                                                 rlf             _CACHE2,F                               ;1
               00437                                                 rlf             _CACHECR,F                              ;1
               00438                                                 rlf             _CACHE4,F                               ;1
               00439                                                 rlf             _CACHECR,F                              ;1
               00440                                                 rlf             _CACHE4,F                               ;1
               00441                                                 rlf             _CACHECR,F                              ;1
               00442                                                 rlf             _CACHE6,F                               ;1
               00443                                                 rlf             _CACHECR,F                              ;1
               00444                                                 rlf             _CACHE6,F                               ;1
               00445                                                 return                                                  ;2(16)(79)
               00446                 endif
               00447         
               00448 ;*******************************************************************
               00449 ;       Command Exit Commands
               00450 ;*******************************************************************
0045           00451 _DONECLRSP                              _@CLRSP                                 ;2(6)
0045 302C          M                                                 movlw   _STACK
0046 00F4          M                                                 movwf   _SP
0047           00452 _DONE
0047 0008      00453 _NOPCMD                                 return                  ;2(4)
               00454 
0048 080B      00455 _RESET                                  movfw   INTCON                  ;3 Save GIE of INTCON
0049 3980      00456                                                 andlw   0x80                    ;1
004A 00F5      00457                                                 movwf   _CMD                    ;1
004B 138B      00458                                                 bcf             INTCON,GIE              ;1 Disable GIE
               00459         if _BANK2_START != 0
004C 1383      00460                                                 bcf     STATUS,IRP      ;1 Clear Indirect Address bit
               00461                 endif
004D 3007      00462                                                 movlw   7                               ;1
004E 2053      00463                                                 call    _resetlp                ;35 Clear return stack
004F 080B      00464                                                 movfw   INTCON                  ;1 Restore GIE of INTCON 
0050 0475      00465                                                 iorwf   _CMD,w                  ;1
0051 008B      00466                                                 movwf   INTCON                  ;1
0052 2830      00467                                                 goto    _procloop               ;2(48)
0053 3EFF      00468 _resetlp                                addlw   -1                              ;1
0054 1803      00469                                                 skpnc                                   ;1
0055 2053      00470                                                 call    _resetlp                ;2(4n+3 = 31)
0056 0008      00471                                                 return                                  ;2(33)
               00472 
               00473 ;*******************************************************************
               00474 ;       Interrupt Commands
               00475 ;*******************************************************************
               00476                 ifdef _DEFINTERRUPT
               00477 #define _EXTFLAG        0
               00478 #define _RBFLAG         1
               00479 #define _TMR0FLAG       2
               00480 #define _ADFLAG         3
               00481 #define _RCFLAG         4
               00482 #define _TXFLAG         5
               00483 #define _SSPFLAG        6
               00484 #define _CCP1FLAG       7
               00485 #define _TMR1FLAG       8
               00486 #define _TMR2FLAG       9
               00487 #define _EEFLAG         10
               00488 #define _BCLFLAG        11
               00489 #define _CCP2FLAG       12
               00490 #define _NA1FLAG        13
               00491 #define _VMODEFLAG1     14
               00492 #define _VMODEFLAG2     15
               00493 
               00494 _INTSETUPCMD                                                                            ;2 on entry
               00495                                                 call    _GETCMD                         ;12
               00496                                                 movwf   _INTSTATEH                      ;1
               00497                                                 call    _GETCMD                         ;12
               00498                                                 movwf   _INTSTATE                       ;1
               00499                                                 return                                          ;2(30)
               00500 
               00501 _INTERRUPTCMD
               00502                 ifdef _EXTINT
               00503                                                 _@CHECKINT INTCON,_EXTFLAG,INTF,_EXTINT         ;(3/5/22)
               00504                 endif
               00505                 ifdef _RBINT
               00506                         ifdef GPIO
               00507                                                 _@CHECKINT INTCON,_RBFLAG,GPIF,_RBINT           ;(3/5/22)
               00508                         else
               00509                                                 _@CHECKINT INTCON,_RBFLAG,RBIF,_RBINT
               00510                         endif
               00511                 endif
               00512                 ifdef _TMR0INT
               00513                                                 _@CHECKINT INTCON,_TMR0FLAG,T0IF,_TMR0INT       ;(3/5/22)             
               00514                 endif
               00515                 ifdef _ADINT
               00516                                                 _@CHECKINT PIR1,_ADFLAG,ADIF,_ADINT                     ;(3/5/22)
               00517                 endif
               00518                 ifdef _RCINT
               00519                                                 _@CHECKINT PIR1,_RCFLAG,RCIF,_RCINT                     ;(3/5/22)
               00520                 endif
               00521                 ifdef _TXINT
               00522                                                 _@CHECKINT PIR1,_TXFLAG,TXIF,_TXINT                     ;(3/5/22)
               00523                 endif
               00524                 ifdef _SSPINT
               00525                                                 _@CHECKINT PIR1,_SSPFLAG,SSPIF,_SSPINT          ;(3/5/22)
               00526                 endif
               00527                 ifdef _CCP1INT
               00528                                                 _@CHECKINT PIR1,_CCP1FLAG,CCP1IF,_CCP1INT       ;(3/5/22)
               00529                 endif
               00530                 ifdef _TMR1INT
               00531                                                 _@CHECKINT PIR1,_TMR1FLAG,TMR1IF,_TMR1INT       ;(3/5/22)
               00532                 endif
               00533                 ifdef _TMR2INT
               00534                                                 _@CHECKINT PIR1,_TMR2FLAG,TMR2IF,_TMR2INT       ;(3/5/22)
               00535                 endif
               00536                 ifdef _EEINT
               00537                                                 _@CHECKINT PIR2,_EEFLAG,EEIF,_EEINT                     ;(3/5/22)
               00538                 endif
               00539                 ifdef _BCLINT
               00540                                                 _@CHECKINT PIR2,_BCLFLAG,BCLIF,_BCLINT          ;(3/5/22)
               00541                 endif
               00542                 ifdef _CCP2INT
               00543                                                 _@CHECKINT PIR2,_CCP2FLAG,CCP2IF,_CCP2INT       ;(3/5/22)
               00544                 endif
               00545                                                 return                                                                          ;2
               00546 _intloop
               00547                                                 clrwdt                  ;1 Hit Watchdog timer
               00548                 ifdef _DEBUGMODE                                                ;
               00549                                                 call    _DEBUGEXCMD             ;
               00550                 endif                                                                   ;
               00551                                                 call    _GETCMD                 ;12
               00552                                                 call    _CALLCMD                ;9
               00553                                                 goto    _intloop                ;2(24)
               00554                 endif
               00555 
               00556 ;*******************************************************************
               00557 ;       Stop/End Commands
               00558 ;*******************************************************************
0057           00559 _STOPCMD
0057 0064      00560 _ENDCMD                                 clrwdt
0058 0063      00561                                                 sleep
0059 2857      00562                                                 goto    _ENDCMD
               00563 
               00564 ;*******************************************************************
               00565 ;       Push Command
               00566 ;*******************************************************************
005A           00567 _PUSHCMD
005A 0874      00568                                                 movfw   _SP                     ;3
005B 0084      00569                                                 movwf   FSR                     ;1
005C 0820      00570                                                 movfw   _WORK           ;1
005D 0080      00571                                                 movwf   INDF            ;1
               00572 
005E 0A84      00573                                                 incf    FSR,F           ;1
005F 0821      00574                                                 movfw   _WORK+1         ;1
0060 0080      00575                                                 movwf   INDF            ;1
               00576 
0061 0A84      00577                                                 incf    FSR,F           ;1
0062 0822      00578                                                 movfw   _WORK+2         ;1
0063 0080      00579                                                 movwf   INDF            ;1
               00580 
0064 0A84      00581                                                 incf    FSR,F           ;1
0065 0823      00582                                                 movfw   _WORK+3         ;1
0066 0080      00583                                                 movwf   INDF            ;1
               00584 
0067 0A04      00585                                                 incf    FSR,w           ;1
0068 00F4      00586                                                 movwf   _SP                     ;1
0069 0008      00587                                                 return                          ;2(19)
               00588 
               00589 ;*******************************************************************
               00590 ;       Pop Command
               00591 ;*******************************************************************
006A           00592 _POPCMD
006A 0374      00593                                                 decf    _SP,w           ;3
006B 0084      00594                                                 movwf   FSR                     ;1
006C 0800      00595                                                 movfw   INDF            ;1
006D 00A3      00596                                                 movwf   _WORK+3         ;1
               00597 
006E 0384      00598                                                 decf    FSR,F           ;1
006F 0800      00599                                                 movfw   INDF            ;1
0070 00A2      00600                                                 movwf   _WORK+2         ;1
               00601 
0071 0384      00602                                                 decf    FSR,F           ;1
0072 0800      00603                                                 movfw   INDF            ;1
0073 00A1      00604                                                 movwf   _WORK+1         ;1
               00605 
0074 0384      00606                                                 decf    FSR,F           ;1
0075 0800      00607                                                 movfw   INDF            ;1
0076 00A0      00608                                                 movwf   _WORK           ;1
               00609 
0077 0804      00610                                                 movfw   FSR                     ;1
0078 00F4      00611                                                 movwf   _SP                     ;1
0079 0008      00612                                                 return                          ;2(19)
               00613 
               00614 ;*******************************************************************
               00615 ;       PushPC Command
               00616 ;*******************************************************************
               00617                 ifdef _DEFPUSHPC
               00618 _PUSHPCCMD
               00619                                                 decf    _PCSP,w                                 ;3
               00620                                                 movwf   FSR                                             ;1
               00621                                                 movfw   _PC                                             ;1
               00622                                                 movwf   INDF                                    ;1
               00623                                                 decf    FSR,F                                   ;1
               00624                                                 movfw   _PCH                                    ;1
               00625                                                 movwf   INDF                                    ;1
               00626                                                 movfw   FSR                                             ;1
               00627                                                 movwf   _PCSP                                   ;1
               00628                                                 return                                                  ;2(13)
               00629                 endif
               00630 
               00631 ;*******************************************************************
               00632 ;       PopPC Command
               00633 ;*******************************************************************
               00634                 ifdef _DEFPOPPC
               00635 _POPPCCMD
               00636                                                 movfw   _PCSP                                   ;3
               00637                                                 movwf   FSR                                             ;1
               00638                                                 movfw   INDF                                    ;1
               00639                                                 movwf   _PCH                                    ;1
               00640                                                 incf    FSR,F                                   ;1
               00641                                                 movfw   INDF                                    ;1
               00642                                                 movwf   _PC                                             ;1
               00643                                                 incf    FSR,w                                   ;1
               00644                                                 movwf   _PCSP                                   ;1
               00645                                                 return                                                  ;2(13)
               00646                 endif
               00647 
               00648 ;*******************************************************************
               00649 ;       Inline shunt for PackedTokens Command
               00650 ;*******************************************************************
               00651         ifdef _PACKEDTOKENS
               00652         ifdef _DEFINLINE
               00653 _INLINECMD
               00654                                                 clrc                                                    ;3
               00655                                                 rrf             _PCH,W                                  ;1 Get _PCH
               00656                                                 movwf   _CMD+1                                  ;1 _CMD+1 = _PCH
               00657                                                 rrf             _PC,W                                   ;1 Get _PC/Index
               00658                                                 andlw   0xF8                                    ;1 Clear Index
               00659                                                 movwf   _CMD&0x7f                               ;1 _CMD = _PC
               00660                                                 clrc                                                    ;1
               00661                                                 rrf             _CMD+1,W                                ;1
               00662                                                 movwf   PCLATH&0x7f                             ;1 PCLATH = _PCH
               00663                                                 rrf             _CMD&0x7F,W                             ;1 W = _PC
               00664                                                 addlw   4                                               ;1
               00665                                                 skpnc                                                   ;1
               00666                                                 incf    PCLATH,F                                ;1
               00667                                                 movwf   PCL                                             ;2(17)
               00668         endif
               00669         endif                           
               00670 
               00671         if $>0x800
               00672                 messg "Error: Work.Lib larger than Page ZERO"
               00673         endif
               00091 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBAF42~1.LIB" ;mbasic14\mbasicclrw.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFCLRW
               00004                         _@ALIGNPAGE D'9'
                   M         local startorg = $
                   M         if (($+size)&0xf800)!=($&0xf800)
                   M                 while $ != ((startorg&0xf800)+0x800)
                   M                         nop
                   M                 endw
                   M         endif
007A           00005 _CLRWCMD
007A 01A0      00006                                                 clrf    _WORK
007B 01A1      00007                                                 clrf    _WORK+1
007C 01A2      00008                         clrf    _WORK+2
007D 01A3      00009                         clrf    _WORK+3
               00010                                                 _@DONE
007E 0008          M                                                 return
               00011         endif
               00012 
               00013         ifdef _DEFCLRWP1
               00014                         _@ALIGNPAGE D'10'
                   M         local startorg = $
                   M         if (($+size)&0xf800)!=($&0xf800)
                   M                 while $ != ((startorg&0xf800)+0x800)
                   M                         nop
                   M                 endw
                   M         endif
007F           00015 _CLRWP1CMD
               00016                         _@CALL  _CLRWCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
007F 207A          M         call    label&0x7ff
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
                   M                 errorlevel +306
               00017                         _@GOTO  _PUSHCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0080 285A          M         goto    label&0x7ff
                   M                 errorlevel +306
               00018         endif
               00019 
               00020         ifdef _DEFCLRWP8
               00021                         _@ALIGNPAGE D'5'
               00022 _CLRWP8CMD
               00023                                                 _@CALL  _CLRWP1CMD
               00024         endif
               00025 
               00026         ifdef _DEFCLRWP7
               00027                         _@ALIGNPAGE D'5'
               00028 _CLRWP7CMD
               00029                                                 _@CALL  _CLRWP1CMD
               00030         endif
               00031 
               00032         ifdef _DEFCLRWP6
               00033                         _@ALIGNPAGE D'5'
               00034 _CLRWP6CMD
               00035                                                 _@CALL  _CLRWP1CMD
               00036         endif
               00037 
               00038         ifdef _DEFCLRWP5
               00039                         _@ALIGNPAGE D'5'
               00040 _CLRWP5CMD
               00041                                                 _@CALL  _CLRWP1CMD
               00042         endif
               00043 
               00044         ifdef _DEFCLRWP4
               00045                         _@ALIGNPAGE D'5'
               00046 _CLRWP4CMD
               00047                                                 _@CALL  _CLRWP1CMD
               00048         endif
               00049 
               00050         ifdef _DEFCLRWP3
               00051                         _@ALIGNPAGE D'5'
               00052 _CLRWP3CMD
               00053                                                 _@CALL  _CLRWP1CMD
               00054         endif
               00055 
               00056         ifdef _DEFCLRWP2
               00057                         _@ALIGNPAGE D'10'
               00058 _CLRWP2CMD
               00059                                                 _@CALL  _CLRWP1CMD
               00060                                                 _@GOTO  _CLRWP1CMD
               00061         endif
               00062 
               00092 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\mbasicgo.lib" ;mbasic14\mbasicgo.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFGOTO
               00004 ;GOTO            _EXEC _LABEL:
               00005 _GOTOCMD
               00006                                         _@GETCMD
               00007                         movwf   _CMD
               00008                                         _@GETCMD
               00009                         movwf   _PC
               00010                         movfw   _CMD
               00011                                         movwf   _PCH
               00012                                         _@DONE
               00013         endif
               00014 
               00015         ifdef _DEFEXCEPTION
               00016 ;EXCEPTION              _ADDRESS _EXEC:
               00017 _EXCEPTIONCMD
               00018                                         movfw   _WORK
               00019                         movwf   _PC
               00020                         movfw   _WORK+1
               00021                                         movwf   _PCH
               00022                                         movlw   _PCSTACK
               00023                                         movwf   _PCSP
               00024                                         _@CLRSP
               00025                                         _@GOTO  _RESET
               00026         endif
               00027 
               00028         ifdef _DEFGOSUB
               00029 ;GOSUB           _GOSUB:
               00030 _GOSUBCMD       
               00031                                         _@CALL  _PUSHPCCMD
               00032                                         _@GETCMD
               00033                         movwf   _CMD
               00034                                         _@GETCMD
               00035                         movwf   _PC
               00036                         movfw   _CMD
               00037                                         movwf   _PCH
               00038                                         _@DONE
               00039         endif
               00040 
               00041         ifdef _DEFRESUME
               00042 ;RESUME          _EXEC:
               00043 _RESUMECMD      
               00044                                         _@CALL  _POPPCCMD
               00045                 ifdef   _PACKEDTOKENS
               00046                                         _@CALL  _RELOADCACHE
               00047                 endif
               00048                                         _@GOTO  _RESET
               00049         endif
               00050 
               00051         ifdef _DEFRETURN
               00052 ;RETURN          _RETURN:
               00053 _RETURNCMD      
               00054                                         _@CALL  _POPPCCMD
               00055         endif
               00056 
               00057         ifdef _DEFLGOFALSE
               00058 _LGOFALSE               
               00059                                         movlw   2
               00060                         addwf   _PC,F
               00061                         skpnc
               00062                                         incf    _PCH,F
               00063                 ifdef _PACKEDTOKENS
               00064                                         movlw   0xF
               00065                                         iorwf   _PC,F
               00066                 endif
               00067                                         _@DONE
               00068         endif
               00069 
               00070         ifdef _DEFLGOTO
               00071 _LGOTOCMD
               00072                                         movfw   _WORK
               00073                                         _@BTFGC STATUS,Z,_GOTOCMD
               00074                                         _@GOTO  _LGOFALSE
               00075         endif
               00076 
               00077         ifdef _DEFLNOTGOTO
               00078 _LNOTGOTOCMD
               00079                                         movfw   _WORK
               00080                                         _@BTFGS STATUS,Z,_GOTOCMD
               00081                                         _@GOTO  _LGOFALSE
               00082         endif
               00083 
               00084         ifdef _DEFLGOSUB
               00085 _LGOSUBCMD
               00086                                         movfw   _WORK
               00087                                         _@BTFGC STATUS,Z,_GOSUBCMD
               00088                                         _@GOTO  _LGOFALSE
               00089         endif
               00090 
               00093 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB42DD~1.LIB" ;mbasic14\mbasicpin.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFBITMASK
0081           00004 _BITMASK
0081 3E89      00005                                         addlw   LOW _bittbl
0082 00F5      00006                                         movwf   _CMD
0083 3000      00007                                         movlw   HIGH _bittbl
0084 1803      00008                                         skpnc
0085 3E01      00009                                         addlw   1
0086 008A      00010                                         movwf   PCLATH
0087 0875      00011                                         movfw   _CMD
0088 0082      00012                                         movwf   PCL
0089           00013 _bittbl
0089 3401      00014                                         retlw   0x01
008A 3402      00015                                         retlw   0x02
008B 3404      00016                                         retlw   0x04
008C 3408      00017                                         retlw   0x08
008D 3410      00018                                         retlw   0x10
008E 3420      00019                                         retlw   0x20
008F 3440      00020                                         retlw   0x40
0090 3480      00021                                         retlw   0x80
               00022         endif
               00023 
               00024         ifdef _DEFGETPIN
0091           00025 _GETPIN
               00026                                         _@CALL  _pinval
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0091 209A          M         call    label&0x7ff
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
                   M                 errorlevel +306
0092 00AD      00027                                         movwf           _STACK+1
0093 0E2D      00028                                         swapf           _STACK+1,w
0094 390F      00029                                         andlw           0Fh
0095 3E05      00030                                         addlw           PORTA
0096 0084      00031                                         movwf           FSR
0097 082D      00032                                         movfw           _STACK+1
0098 3907      00033                                         andlw           07h
               00034                                         _@GOTO  _BITMASK
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0099 2881          M         goto    label&0x7ff
                   M                 errorlevel +306
009A           00035 _pinval
009A 3000      00036                                         movlw   HIGH _pintbl
009B 008A      00037                                         movwf   PCLATH
009C 303F      00038                                         movlw   03Fh
009D 052C      00039                                         andwf   _STACK,W
009E 3EA2      00040                                         addlw   LOW _pintbl
009F 1803      00041                                         skpnc
00A0 0A8A      00042                                         incf    PCLATH,F
00A1 0082      00043                                         movwf   PCL
00A2           00044 _pintbl
               00045                 ifndef _PIN0
               00046                         retlw (0<<4)|0
               00047                 else
00A2 3410      00048                         retlw _PIN0
               00049                 endif
               00050                 ifndef _PIN1
               00051                         retlw (0<<4)|1
               00052                 else
00A3 3411      00053                         retlw _PIN1
               00054                 endif
               00055                 ifndef _PIN2
               00056                         retlw (0<<4)|2
               00057                 else
00A4 3412      00058                         retlw _PIN2
               00059                 endif
               00060                 ifndef _PIN3
               00061                         retlw (0<<4)|3
               00062                 else
00A5 3413      00063                         retlw _PIN3
               00064                 endif
               00065                 ifndef _PIN4
               00066                         retlw (0<<4)|4
               00067                 else
00A6 3414      00068                         retlw _PIN4
               00069                 endif
               00070                 ifndef _PIN5
               00071                         retlw (0<<4)|5
               00072                 else
00A7 3415      00073                         retlw _PIN5
               00074                 endif
               00075                 ifndef _PIN6
               00076                         retlw (0<<4)|6
               00077                 else
00A8 3416      00078                         retlw _PIN6
               00079                 endif
               00080                 ifndef _PIN7
               00081                         retlw (0<<4)|7
               00082                 else
00A9 3417      00083                         retlw _PIN7
               00084                 endif
               00085                 ifndef _PIN8
               00086                         retlw (1<<4)|0
               00087                 else
00AA 3420      00088                         retlw _PIN8
               00089                 endif
               00090                 ifndef _PIN9
               00091                         retlw (1<<4)|1
               00092                 else
00AB 3421      00093                         retlw _PIN9
               00094                 endif
               00095                 ifndef _PIN10
               00096                         retlw (1<<4)|2
               00097                 else
00AC 3422      00098                         retlw _PIN10
               00099                 endif
               00100                 ifndef _PIN11
               00101                         retlw (1<<4)|3
               00102                 else
00AD 3423      00103                         retlw _PIN11
               00104                 endif
               00105                 ifndef _PIN12
               00106                         retlw (1<<4)|4
               00107                 else
00AE 3424      00108                         retlw _PIN12
               00109                 endif
               00110                 ifndef _PIN13
               00111                         retlw (1<<4)|5
               00112                 else
00AF 3425      00113                         retlw _PIN13
               00114                 endif
               00115                 ifndef _PIN14
               00116                         retlw (1<<4)|6
               00117                 else
00B0 3426      00118                         retlw _PIN14
               00119                 endif
               00120                 ifndef _PIN15
               00121                         retlw (1<<4)|7
               00122                 else
00B1 3427      00123                         retlw _PIN15
               00124                 endif
               00125                 ifndef _PIN16
               00126                         retlw (2<<4)|0
               00127                 else
00B2 3400      00128                         retlw _PIN16
               00129                 endif
               00130                 ifndef _PIN17
               00131                         retlw (2<<4)|1
               00132                 else
00B3 3401      00133                         retlw _PIN17
               00134                 endif
               00135                 ifndef _PIN18
               00136                         retlw (2<<4)|2
               00137                 else
00B4 3402      00138                         retlw _PIN18
               00139                 endif
               00140                 ifndef _PIN19
               00141                         retlw (2<<4)|3
               00142                 else
00B5 3403      00143                         retlw _PIN19
               00144                 endif
               00145                 ifndef _PIN20
00B6 3424      00146                         retlw (2<<4)|4
               00147                 else
               00148                         retlw _PIN20
               00149                 endif
               00150                 ifndef _PIN21
00B7 3425      00151                         retlw (2<<4)|5
               00152                 else
               00153                         retlw _PIN21
               00154                 endif
               00155                 ifndef _PIN22
00B8 3426      00156                         retlw (2<<4)|6
               00157                 else
               00158                         retlw _PIN22
               00159                 endif
               00160                 ifndef _PIN23
00B9 3427      00161                         retlw (2<<4)|7
               00162                 else
               00163                         retlw _PIN23
               00164                 endif
               00165                 ifndef _PIN24
00BA 3430      00166                         retlw (3<<4)|0
               00167                 else
               00168                         retlw _PIN24
               00169                 endif
               00170                 ifndef _PIN25
00BB 3431      00171                         retlw (3<<4)|1
               00172                 else
               00173                         retlw _PIN25
               00174                 endif
               00175                 ifndef _PIN26
00BC 3432      00176                         retlw (3<<4)|2
               00177                 else
               00178                         retlw _PIN26
               00179                 endif
               00180                 ifndef _PIN27
00BD 3433      00181                         retlw (3<<4)|3
               00182                 else
               00183                         retlw _PIN27
               00184                 endif
               00185                 ifndef _PIN28
00BE 3434      00186                         retlw (3<<4)|4
               00187                 else
               00188                         retlw _PIN28
               00189                 endif
               00190                 ifndef _PIN29
00BF 3435      00191                         retlw (3<<4)|5
               00192                 else
               00193                         retlw _PIN29
               00194                 endif
               00195                 ifndef _PIN30
00C0 3436      00196                         retlw (3<<4)|6
               00197                 else
               00198                         retlw _PIN30
               00199                 endif
               00200                 ifndef _PIN31
00C1 3437      00201                         retlw (3<<4)|7
               00202                 else
               00203                         retlw _PIN31
               00204                 endif
               00205                 ifndef _PIN32
               00206                         retlw (4<<4)|0
               00207                 else
00C2 3400      00208                         retlw _PIN32
               00209                 endif
               00210                 ifndef _PIN33
               00211                         retlw (4<<4)|1
               00212                 else
00C3 3401      00213                         retlw _PIN33
               00214                 endif
               00215                 ifndef _PIN34
               00216                         retlw (4<<4)|2
               00217                 else
00C4 3402      00218                         retlw _PIN34
               00219                 endif
               00220                 ifndef _PIN35
               00221                         retlw (4<<4)|3
               00222                 else
00C5 3403      00223                         retlw _PIN35
               00224                 endif
               00225                 ifndef _PIN36
00C6 3444      00226                         retlw (4<<4)|4
               00227                 else
               00228                         retlw _PIN36
               00229                 endif
               00230                 ifndef _PIN37
00C7 3445      00231                         retlw (4<<4)|5
               00232                 else
               00233                         retlw _PIN37
               00234                 endif
               00235                 ifndef _PIN38
00C8 3446      00236                         retlw (4<<4)|6
               00237                 else
               00238                         retlw _PIN38
               00239                 endif
               00240                 ifndef _PIN39
00C9 3447      00241                         retlw (4<<4)|7
               00242                 else
               00243                         retlw _PIN39
               00244                 endif
               00245                 ifndef _PIN40
               00246                         retlw (0<<4)|0
               00247                 else
00CA 3410      00248                         retlw _PIN0
               00249                 endif
               00250                 ifndef _PIN41
               00251                         retlw (0<<4)|0
               00252                 else
00CB 3404      00253                         retlw _PIN41
               00254                 endif
               00255                 ifndef _PIN42
00CC 3400      00256                         retlw (0<<4)|0
               00257                 else
               00258                         retlw _PIN42
               00259                 endif
               00260                 ifndef _PIN43
00CD 3400      00261                         retlw (0<<4)|0
               00262                 else
               00263                         retlw _PIN43
               00264                 endif
               00265                 ifndef _PIN44
00CE 3400      00266                         retlw (0<<4)|0
               00267                 else
               00268                         retlw _PIN44
               00269                 endif
               00270                 ifndef _PIN45
00CF 3400      00271                         retlw (0<<4)|0
               00272                 else
               00273                         retlw _PIN45
               00274                 endif
               00275                 ifndef _PIN46
00D0 3400      00276                         retlw (0<<4)|0
               00277                 else
               00278                         retlw _PIN46
               00279                 endif
               00280                 ifndef _PIN47
00D1 3400      00281                         retlw (0<<4)|0
               00282                 else
               00283                         retlw _PIN47
               00284                 endif
               00285         endif
               00286 
               00287 
               00288         ifdef _DEFHIGHFUNC
               00289 _HIGHFUNC
               00290                         _@CALL  _GETPIN
               00291                         bsf     FSR,7
               00292                         xorlw   0ffh
               00293                         andwf   INDF,F
               00294                         xorlw   0ffh
               00295                         bcf     FSR,7
               00296                         iorwf   INDF,F
               00297                                         return
               00298         endif
               00299 
               00300         ifdef _DEFHIGH
               00301 _HIGHCMD
               00302                                         movfw   _WORK
               00303                                         movwf   _STACK
               00304                                         _@CALL  _HIGHFUNC
               00305                                         _@DONE
               00306         endif
               00307 
               00308         ifdef _DEFLOWFUNC
               00309 _LOWFUNC
               00310                                         _@CALL  _GETPIN
               00311                                         bsf     FSR,7
               00312                                         xorlw   0ffh
               00313                                         andwf   INDF,F
               00314                                         bcf     FSR,7
               00315                                         andwf   INDF,F
               00316                                         return
               00317         endif
               00318 
               00319         ifdef _DEFLOW
               00320 _LOWCMD
               00321                                         movfw   _WORK
               00322                                         movwf   _STACK
               00323                                         _@CALL  _LOWFUNC
               00324                                         _@DONE
               00325         endif
               00326 
               00327         ifdef _DEFTOGGLEFUNC
               00328 _TOGGLEFUNC
               00329                                         _@CALL  _GETPIN
               00330                                         bsf     FSR,7
               00331                                         xorlw   0ffh
               00332                                         andwf   INDF,F
               00333                                         xorlw   0ffh
               00334                                         bcf     FSR,7
               00335                                         xorwf   INDF,F
               00336                                         return
               00337         endif
               00338 
               00339         ifdef _DEFTOGGLE
               00340 _TOGGLECMD
               00341                                         movfw   _WORK
               00342                                         movwf   _STACK
               00343                                         _@CALL  _TOGGLEFUNC
               00344                                         _@DONE
               00345         endif
               00346 
               00347         ifdef _DEFINPUTFUNC
               00348 _INPUTFUNC
               00349                                         _@CALL  _GETPIN
               00350                                         bsf     FSR,7
               00351                                         iorwf   INDF,F
               00352                                         bcf     FSR,7
               00353                                         return
               00354         endif
               00355 
               00356         ifdef _DEFINPUT
               00357 _INPUTCMD
               00358                                         movfw   _WORK
               00359                                         movwf   _STACK
               00360                                         _@CALL  _INPUTFUNC
               00361                                         _@DONE
               00362         endif
               00363 
               00364         ifdef _DEFOUTPUTFUNC
               00365 _OUTPUTFUNC
               00366                                         _@CALL  _GETPIN
               00367                                         bsf     FSR,7
               00368                                         xorlw   0xff
               00369                                         andwf   INDF,F
               00370                                         xorlw   0xff
               00371                                         bcf     FSR,7
               00372                                         return
               00373         endif
               00374 
               00375         ifdef _DEFOUTPUT
               00376 _OUTPUTCMD
               00377                                         movfw   _WORK
               00378                                         movwf   _STACK
               00379                                         _@CALL  _OUTPUTFUNC
               00380                                         _@DONE
               00381         endif
               00382 
               00383         ifdef _DEFREVERSEFUNC
               00384 _REVERSEFUNC
               00385                                         _@CALL  _GETPIN
               00386                                         bsf     FSR,7
               00387                                         xorwf   INDF,F
               00388                                         bcf     FSR,7
               00389                                         return
               00390         endif
               00391 
               00392         ifdef _DEFREVERSE
               00393 _REVERSECMD
               00394                                         movfw   _WORK
               00395                                         movwf   _STACK
               00396                                         _@CALL  _REVERSEFUNC
               00397                                         _@DONE
               00398         endif
               00094 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB9126~1.LIB" ;mbasic14\mbasicfreq.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFFREQOUT
               00004 ;FREQOUT                _EXP                            :STACK0:3
               00005 ;                               #,                                      ;STACK4:7
               00006 ;                               _EXP,                           ;STACK8:11
               00007 ;                               _EXP{,                          ;STACK12:15
               00008 ;                               _EXP|0} _EXEC:          ;WORK0:3
               00009 
               00010 ;FREQON is in .5us increments
               00011                                 
               00012 #define _FREQCNT        _STACK
               00013 #define _FREQACC        _STACK+1
               00014 #define _FREQMASK       _STACK+2
               00015 #define _FREQPORT       _STACK+3
               00016 
               00017 #define _FREQNEWLO      _STACK+4
               00018 #define _FREQNEWHI      _STACK+5
               00019 #define _FREQNEWLO2     _STACK+6
               00020 #define _FREQNEWHI2     _STACK+7
               00021 
               00022 #define _FREQON1       _STACK+8
               00023 #define _FREQON2       _STACK+9
               00024 #define _FREQON3       _STACK+10
               00025 #define _FREQON4       _STACK+11
               00026 
               00027 #define _FREQLO         _STACK+12
               00028 #define _FREQHI         _STACK+13
               00029 #define _FREQLO2        _STACK+14
               00030 #define _FREQHI2        _STACK+15
               00031 
               00032 #define _FREQSIN        _WORK
               00033 #define _FREQSIN2       _WORK+1
               00034 
               00035         _@ALIGNPAGE D'170'
                   M         local startorg = $
                   M         if (($+size)&0xf800)!=($&0xf800)
                   M                 while $ != ((startorg&0xf800)+0x800)
                   M                         nop
                   M                 endw
                   M         endif
               00036         if (_SINCMD2&0xF800)!=($&0xF800)
               00037                         messg "Freqout command must be on same page as Sin command"
               00038                 endif                           
00D2           00039 _FREQOUTCMD
00D2 0820      00040                                                 movfw   _WORK
00D3 00BA      00041                                                 movwf   _FREQLO2
00D4 0821      00042                                                 movfw   _WORK+1
00D5 00BB      00043                                                 movwf   _FREQHI2
               00044                                                 
00D6 01AD      00045                         clrf    _FREQACC        ; Zero PWM ACC
               00046 
00D7 0839      00047                         movfw   _FREQHI         ; Remove ~.4% from frequency 1
00D8 02B8      00048                         subwf   _FREQLO, F
00D9 1C03      00049                                                 skpc
00DA 03B9      00050                         decf    _FREQHI,F
               00051 
00DB 083B      00052                         movfw   _FREQHI2        ; Remove ~.4% from frequency 2
00DC 02BA      00053                         subwf   _FREQLO2,F
00DD 1C03      00054                                                 skpc
00DE 03BB      00055                         decf    _FREQHI2,F
               00056 
  00000100     00057 _FREQFACT = (20000000/(_MHZ/256))       ;Factor with 8bit fraction
               00058                                                 ;Multiply by Factor
00DF 01B0      00059                                                 clrf    _FREQNEWLO              ;1
00E0 01B1      00060                                                 clrf    _FREQNEWHI              ;1
00E1 01B2      00061                                                 clrf    _FREQNEWLO2             ;1
00E2 01B3      00062                                                 clrf    _FREQNEWHI2             ;1
00E3 17B1      00063                                                 bsf             _FREQNEWHI,7    ;1(5)
00E4           00064 _freqm1:
00E4 0CB9      00065                                                 rrf             _FREQHI, f              ;1
00E5 0CB8      00066                                                 rrf             _FREQLO, f              ;1
00E6 1C03      00067                                                 skpc                                    ;2/1
00E7 28EE      00068                                                 goto    _freqm2                 ;0/2(5)
00E8 3000      00069                                                 movlw   LOW _FREQFACT   ;1
00E9 07B2      00070                                                 addwf   _FREQNEWLO2,f   ;1
00EA 3001      00071                                                 movlw   HIGH _FREQFACT  ;1
00EB 1803      00072                                                 skpnc                                   ;1
00EC 3E01      00073                                                 addlw   1                               ;1
00ED 07B3      00074                                                 addwf   _FREQNEWHI2,f   ;1(10)
00EE           00075 _freqm2:
00EE 0CB3      00076                                                 rrf             _FREQNEWHI2, f  ;1
00EF 0CB2      00077                                                 rrf             _FREQNEWLO2, f  ;1
00F0 0CB1      00078                                                 rrf             _FREQNEWHI, f   ;1
00F1 0CB0      00079                                                 rrf             _FREQNEWLO, f   ;1
00F2 1C03      00080                                                 skpc                                    ;1
00F3 28E4      00081                                                 goto    _freqm1                 ;2(7)(Min 12n+4,Max 17n+4)(Min 196,Max 276)
               00082 
               00083                                                 ;Get Integer part
00F4 0831      00084                                                 movfw   _FREQNEWHI
00F5 00B8      00085                                                 movwf   _FREQLO
00F6 0832      00086                                                 movfw   _FREQNEWLO2
00F7 00B9      00087                                                 movwf   _FREQHI
               00088                                                 
               00089                         ;Prepare System
00F8 01B0      00090                         clrf    _FREQNEWLO        ; Zero counterT6
00F9 01B1      00091                         clrf    _FREQNEWHI
00FA 01B2      00092                         clrf    _FREQNEWLO2        ; Zero counterT7
00FB 01B3      00093                         clrf    _FREQNEWHI2
               00094 
00FC 2091      00095                                                 call    _GETPIN
00FD 1784      00096                                                 bsf     FSR,7
00FE 3AFF      00097                                                 xorlw   0xff
00FF 0580      00098                                                 andwf   INDF,F
0100 3AFF      00099                                                 xorlw   0xff
0101 1384      00100                                                 bcf     FSR,7           ; Point back to port
0102 00AE      00101                         movwf   _FREQMASK       ; Save Pin mask
               00102 
               00103                                                 ;Produce Tones
0103 0064      00104 _freqoutloop                    clrwdt                  ; 1 Keep Watchdog happy
0104 0838      00105                         movfw   _FREQLO         ; 1 Load low Freq
0105 07B0      00106                         addwf   _FREQNEWLO,F    ; 1 Add to low Freq
0106 1803      00107                                                 skpnc                   ; 1 Check Carry
0107 0AB1      00108                         incf    _FREQNEWHI,F    ; 1 Add carry bit
0108 0839      00109                         movfw   _FREQHI                 ; 1 Load High Freq
0109 07B1      00110                         addwf   _FREQNEWHI,F    ; 1 Add high Freq
010A 083A      00111                         movfw   _FREQLO2        ; 1 Load low Freq
010B 07B2      00112                         addwf   _FREQNEWLO2,F   ; 1 Add to low Freq
010C 1803      00113                                                 skpnc                   ; 1 Check Carry
010D 0AB3      00114                         incf    _FREQNEWHI2,F   ; 1 Add carry bit
010E 083B      00115                         movfw   _FREQHI2        ; 1 Load High Freq
010F 07B3      00116                         addwf   _FREQNEWHI2,F   ; 1 Add High Freq
0110 0831      00117                         movfw   _FREQNEWHI              ; 1 Get sine of Freq_T6(10)
0111 00A0      00118                         movwf   _FREQSIN        ; 1
0112 214B      00119                                                 call    _SINCMD3        ; 16
0113 1BA0      00120                         btfsc   _FREQSIN,7      ; 1
0114 3C00      00121                                                 sublw   0               ; 1
0115 3E80      00122                                                 addlw   0x80            ; 1 offset around 128
0116 00A1      00123                         movwf   _FREQSIN2       ; 1
0117 0833      00124                         movfw   _FREQNEWHI2     ; 1 Get sine of Freq_T6+1
0118 00A0      00125                         movwf   _FREQSIN        ; 1
0119 214B      00126                                                 call    _SINCMD3        ; 16
011A 1BA0      00127                         btfsc   _FREQSIN,7      ; 1
011B 3C00      00128                                                 sublw   0               ; 1
011C 3E80      00129                                                 addlw   0x80            ; 1 offset around 128
011D 07A1      00130                         addwf   _FREQSIN2,F     ; 1 Add sines together
011E 0C21      00131                         rrf     _FREQSIN2,W     ; 1 Divide by 2
011F 07AD      00132                         addwf   _FREQACC,F      ; 1 Add to PWM accumulator
0120 0800      00133                                                 movfw   INDF            ; 1 Grab the port
0121 042E      00134                         iorwf   _FREQMASK,W     ; 1 Put in the bit
0122 1C03      00135                                                 skpc                    ; 1
0123 062E      00136                         xorwf   _FREQMASK,W     ; 1 No, take out the bit
0124 0080      00137                                                 movwf   INDF            ; 1 Put out new data
               00138                         
0125 3042      00139                         movlw   (-38*_MHZ)/4000000      ;1
0126 07B4      00140                         addwf   _FREQON1,F              ; 1
0127 30FF      00141                                                 movlw   -1                              ; 1
0128 1C03      00142                         skpc                                    ; 1
0129 07B5      00143                         addwf   _FREQON2,F              ; 1
012A 1C03      00144                         skpc                                    ; 1
012B 07B6      00145                         addwf   _FREQON3,F              ; 1
012C 1C03      00146                         skpc                                    ; 1
012D 07B7      00147                         addwf   _FREQON4,F              ; 1
012E 1803      00148                         skpnc                                   ; 1
012F 2903      00149                                                 goto    _freqoutloop    ; 2(76)
               00150                         
               00151                         _@CLRSP
0130 302C          M                                                 movlw   _STACK
0131 00F4          M                                                 movwf   _SP
               00152                                                 _@DONE
0132 0008          M                                                 return
               00153         endif
               00154 
               00095 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB38C5~1.LIB" ;mbasic14\mbasicmem.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                 ifdef _DEFSWAPWORK_VAR
               00004 ;SWAP   #_VAR,_VAR _EXEC:
               00005 _SWAPWORK_VAR
               00006                                                 movwf   FSR
               00007                                                 movfw   _WORK
               00008                                                 xorwf   INDF,F
               00009                                                 xorwf   INDF,W
               00010                                                 movwf   _WORK
               00011                                                 xorwf   INDF,F
               00012                                                 incf    FSR,F
               00013 
               00014                                                 movfw   _WORK+1
               00015                                                 xorwf   INDF,F
               00016                                                 xorwf   INDF,W
               00017                                                 movwf   _WORK+1
               00018                                                 xorwf   INDF,F
               00019                                                 incf    FSR,F
               00020 
               00021                                                 movfw   _WORK+2
               00022                                                 xorwf   INDF,F
               00023                                                 xorwf   INDF,W
               00024                                                 movwf   _WORK+2
               00025                                                 xorwf   INDF,F
               00026                                                 incf    FSR,F
               00027 
               00028                                                 movfw   _WORK+3
               00029                                                 xorwf   INDF,F
               00030                                                 xorwf   INDF,W
               00031                                                 movwf   _WORK+3
               00032                                                 xorwf   INDF,F
               00033 
               00034                                                 return
               00035                 endif
               00036 
               00037                 ifdef _DEFCONL
               00038 _CONLCMD         
               00039                                                 _@GETCMD
               00040                                                 movwf   _WORK+3
               00041                                                 _@GETCMD
               00042                                                 movwf   _WORK+2
               00043                                                 _@GETCMD
               00044                                                 movwf   _WORK+1
               00045                                                 _@GETCMD
               00046                                                 movwf   _WORK
               00047                                                 _@DONE
               00048         endif
               00049 
               00050                 ifdef _DEFCON
0133           00051 _CONCMD
0133 01A3      00052                                                 clrf    _WORK+3
0134 01A2      00053                                                 clrf    _WORK+2
               00054                                                 _@GETCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = _GETCMD & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0135 203E          M         call    _GETCMD&0x7ff
                   M         if(($&0x0800)==0x0800)
                   M                 bsf     PCLATH,3
                   M         else
0136 118A          M                 bcf     PCLATH,3
                   M         endif
                   M         if(($&0x1000)==0x1000)
                   M                 bsf     PCLATH,4
                   M         else
0137 120A          M                 bcf     PCLATH,4
                   M         endif
                   M                 errorlevel +306
0138 00A1      00055                                                 movwf   _WORK+1
               00056                                                 _@GETCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = _GETCMD & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0139 203E          M         call    _GETCMD&0x7ff
                   M         if(($&0x0800)==0x0800)
                   M                 bsf     PCLATH,3
                   M         else
013A 118A          M                 bcf     PCLATH,3
                   M         endif
                   M         if(($&0x1000)==0x1000)
                   M                 bsf     PCLATH,4
                   M         else
013B 120A          M                 bcf     PCLATH,4
                   M         endif
                   M                 errorlevel +306
013C 00A0      00057                                                 movwf   _WORK
               00058                                                 _@DONE
013D 0008          M                                                 return
               00059                 endif
               00060 
               00061                 ifdef _DEFCONB
013E           00062 _CONBCMD                
013E 01A3      00063                                                 clrf    _WORK+3
013F 01A2      00064                                                 clrf    _WORK+2
0140 01A1      00065                                                 clrf    _WORK+1
               00066                                                 _@GETCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = _GETCMD & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0141 203E          M         call    _GETCMD&0x7ff
                   M         if(($&0x0800)==0x0800)
                   M                 bsf     PCLATH,3
                   M         else
0142 118A          M                 bcf     PCLATH,3
                   M         endif
                   M         if(($&0x1000)==0x1000)
                   M                 bsf     PCLATH,4
                   M         else
0143 120A          M                 bcf     PCLATH,4
                   M         endif
                   M                 errorlevel +306
0144 00A0      00067                                                 movwf   _WORK
               00068                                                 _@DONE
0145 0008          M                                                 return
               00069         endif
               00070 
               00071         ifdef _DEFCONBP
0146           00072 _CONBPCMD       
               00073                                                 _@CALL  _CONBCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0146 213E          M         call    label&0x7ff
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
                   M                 errorlevel +306
               00074                                                 _@GOTO  _PUSHCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0147 285A          M         goto    label&0x7ff
                   M                 errorlevel +306
               00075         endif
               00076         
               00077         ifdef _DEFCONP
0148           00078 _CONPCMD        
               00079                                                 _@CALL  _CONCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0148 2133          M         call    label&0x7ff
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
                   M                 errorlevel +306
               00080                                                 _@GOTO  _PUSHCMD
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0149 285A          M         goto    label&0x7ff
                   M                 errorlevel +306
               00081         endif
               00082         
               00083                 ifdef _DEFCONLP
               00084 _CONLPCMD 
               00085                                                 _@CALL  _CONLCMD
               00086                                                 _@GOTO  _PUSHCMD
               00087         endif
               00088         
               00089                 ifdef _DEFARRAYADDROOT
               00090 _ARRAYADDROOT
               00091                                                 movfw   _CMD
               00092                                                 addwf   _WORK,F
               00093                                                 skpnc
               00094                                                 incf    _WORK+1,F
               00095                                                 movfw   _CMD+1
               00096                                                 addwf   _WORK+1,F
               00097                                                 return
               00098                 endif
               00099 
               00100                 ifdef _DEFADJUSTARRAY
               00101                 _@ALIGNPAGE D'45'
               00102 _ADJUSTARRAY
               00103                                                 movlw   0x01            ;Isolate address
               00104                                                 andwf   _WORK+1,F       
               00105 
               00106                                                 btfsc   _CMD+1,0
               00107                                                 goto    _ADJUSTARRAYHIGH
               00108                                                 btfsc   _CMD,7
               00109                                                 goto    _ADJUSTARRAY1
               00110 _ADJUSTARRAY0
               00111                                                 btfsc   _WORK+1,0
               00112                                                 goto    _ADJUSTARRAYSKIP0       
               00113                                                 movfw   _WORK
               00114                                                 sublw   (_BANK0_END-1)&0xff
               00115                                                 skpnc
               00116                                                 return
               00117 _ADJUSTARRAYSKIP0
               00118                                                 movlw   (_BANK1_START-_BANK0_END)&0xff
               00119                                                 addwf   _WORK,F
               00120                                                 skpnc   
               00121                                                 bsf     _WORK+1,0
               00122 _ADJUSTARRAY1
               00123                                                 btfsc   _WORK+1,0
               00124                                                 goto    _ADJUSTARRAYSKIP1       
               00125                                                 movfw   _WORK
               00126                                                 sublw   (_BANK1_END-1)&0xff
               00127                                                 skpnc
               00128                                                 return
               00129 _ADJUSTARRAYSKIP1
               00130                                                 bsf     _WORK+1,0
               00131                                                 movlw   (_BANK2_START-_BANK1_END)&0xff
               00132                                                 addwf   _WORK,F
               00133                                                 skpnc   
               00134                                                 bsf     _WORK+1,0
               00135                                                 goto    _ADJUSTARRAY2
               00136 _ADJUSTARRAYHIGH
               00137                                                 btfsc   _CMD,7
               00138                                                 return
               00139 _ADJUSTARRAY2
               00140                                                 movfw   _WORK
               00141                                                 sublw   (_BANK2_END-1)&0xff
               00142                                                 skpnc
               00143                                                 return
               00144                                                 movlw   (_BANK3_START-_BANK2_END)&0xff
               00145                                                 addwf   _WORK,F
               00146                                                 skpnc   
               00147                                                 bsf     _WORK+1,0
               00148                                                 return
               00149                 endif
               00150 
               00151                 ifdef _DEFBYTEARRAY
               00152 _BYTEARRAY
               00153                                                 _@CALL  _ARRAYADDROOT
               00154                                                 _@CALL  _ADJUSTARRAY    ;Adjust address
               00155                                                 movlw   HIGH _BYTETYPE  ;Set BYTETYPE flag
               00156                                                 iorwf   _WORK+1,F
               00157                                                 _@DONE
               00158                 endif
               00159 
               00160                 ifdef _DEFSBYTEARRAY
               00161 _SBYTEARRAY
               00162                                                 _@CALL  _ARRAYADDROOT
               00163                                                 _@CALL  _ADJUSTARRAY    ;Adjust address
               00164                                                 movlw   HIGH _SBYTETYPE ;Set SBYTETYPE flag
               00165                                                 iorwf   _WORK+1,F
               00166                                                 _@DONE
               00167                 endif
               00168 
               00169                 ifdef _DEFWORDARRAY
               00170 _WORDARRAY
               00171                                                 clrc
               00172                                                 rlf     _WORK,F
               00173                                                 rlf     _WORK+1,F
               00174                                                 _@CALL  _ARRAYADDROOT
               00175                                                 _@CALL  _ADJUSTARRAY
               00176                                                 movlw   HIGH _WORDTYPE   ;Set WORDTYPE flag
               00177                                                 iorwf   _WORK+1,F
               00178                                                 _@DONE
               00179                 endif
               00180 
               00181                 ifdef _DEFSWORDARRAY
               00182 _SWORDARRAY
               00183                                                 clrc
               00184                                                 rlf     _WORK,F
               00185                                                 rlf     _WORK+1,F
               00186                                                 _@CALL  _ARRAYADDROOT
               00187                                                 _@CALL  _ADJUSTARRAY
               00188                                                 movlw   HIGH _SWORDTYPE   ;Set SWORDTYPE flag
               00189                                                 iorwf   _WORK+1,F
               00190                                                 _@DONE
               00191                 endif
               00192 
               00193                 ifdef _DEFLONGARRAY
               00194 _LONGARRAY                                                      
               00195                                                 clrc
               00196                                                 rlf     _WORK,F
               00197                                                 rlf     _WORK+1,F
               00198                                                 clrc
               00199                                                 rlf     _WORK,F
               00200                                                 rlf     _WORK+1,F
               00201                                                 _@CALL  _ARRAYADDROOT
               00202                                                 _@CALL  _ADJUSTARRAY
               00203                                                 movlw   HIGH _LONGTYPE   ;Set LONGTYPE flag
               00204                                                 iorwf   _WORK+1,F
               00205                                                 _@DONE
               00206                 endif
               00207 
               00208                 ifdef _DEFSLONGARRAY
               00209 _SLONGARRAY                                                     
               00210                                                 clrc
               00211                                                 rlf     _WORK,F
               00212                                                 rlf     _WORK+1,F
               00213                                                 clrc
               00214                                                 rlf     _WORK,F
               00215                                                 rlf     _WORK+1,F
               00216                                                 _@CALL  _ARRAYADDROOT
               00217                                                 _@CALL  _ADJUSTARRAY
               00218                                                 movlw   HIGH _SLONGTYPE   ;Set SLONGTYPE flag
               00219                                                 iorwf   _WORK+1,F
               00220                                                 _@DONE
               00221                 endif
               00222 
               00223                 ifdef _DEFFLOATARRAY
               00224 _FLOATARRAY                                                     
               00225                                                 clrc
               00226                                                 rlf     _WORK,F
               00227                                                 rlf     _WORK+1,F
               00228                                                 clrc
               00229                                                 rlf     _WORK,F
               00230                                                 rlf     _WORK+1,F
               00231                                                 _@CALL  _ARRAYADDROOT
               00232                                                 _@CALL  _ADJUSTARRAY
               00233                                                 movlw   HIGH _FLOATTYPE   ;Set FLOATTYPE flag
               00234                                                 iorwf   _WORK+1,F
               00235                                                 _@DONE
               00236                 endif
               00237 
               00238                 ifdef _DEFNIBARRAY
               00239 _NIBARRAY
               00240                                                 clrc                    ;Div index by 2
               00241                                                 rrf     _WORK+1,F
               00242                                                 rrf     _WORK,F
               00243                                                 movlw   0x10
               00244                                                 skpnc                   ;Index Underflowed?
               00245                                                 addwf   _CMD+1,F        ;Yes, Inc NIBIndex
               00246 
               00247                                                 _@CALL  _ARRAYADDROOT
               00248 
               00249                                                 clrz                    
               00250                                                 btfsc   _CMD+1,5        ;NIBIndex overflowed?
               00251                                                 incf    _WORK,F         ;Yes, Inc Address
               00252                                                 skpnz
               00253                                                 incf    _WORK+1,F
               00254 
               00255                                                 _@CALL  _ADJUSTARRAY
               00256 
               00257                                                 movlw   0x10
               00258                                                 andwf   _CMD+1,W        ;Get NIBIndex
               00259                                                 iorlw   HIGH _NIBTYPE   ;Set NIBTYPE flag
               00260                                                 iorwf   _WORK+1,F
               00261 
               00262                                                 _@DONE
               00263                 endif
               00264 
               00265                 ifdef _DEFBITARRAY
               00266 _BITARRAY
               00267                                                 clrc                    ;Div Index by 2
               00268                                                 rrf     _WORK+1,F
               00269                                                 rrf     _WORK,F
               00270                                                 movlw   0x10
               00271                                                 skpnc                   ;Index underflowed?
               00272                                                 addwf   _CMD+1,F        ;Yes add BITIndex
               00273 
               00274                                                 clrc                    ;Div Index by 2
               00275                                                 rrf     _WORK+1,F
               00276                                                 rrf     _WORK,F
               00277                                                 movlw   0x20
               00278                                                 skpnc                   ;Index underflowed?
               00279                                                 addwf   _CMD+1,F        ;Yes add BITIndex
               00280 
               00281                                                 clrc                    ;Div Index by 2
               00282                                                 rrf     _WORK+1,F
               00283                                                 rrf     _WORK,F
               00284                                                 movlw   0x40
               00285                                                 skpnc                   ;Index underflowed?
               00286                                                 addwf   _CMD+1,F        ;Yes add BITIndex
               00287 
               00288                                                 _@CALL  _ARRAYADDROOT
               00289 
               00290                                                 clrz
               00291                                                 btfsc   _CMD+1,7        ;BITIndex overflowed?
               00292                                                 incf    _WORK,F         ;Yes, Inc Address
               00293                                                 skpnz
               00294                                                 incf    _WORK+1,F
               00295 
               00296                                                 _@CALL  _ADJUSTARRAY
               00297 
               00298                                                 movlw   0x70
               00299                                                 andwf   _CMD+1,W        ;Get BITIndex
               00300                                                 iorlw   HIGH _BITTYPE   ;Set BITTYPE flag
               00301                                                 iorwf   _WORK+1,F
               00302 
               00303                                                 _@DONE
               00304                 endif
               00305 
               00306                 ifdef _DEFADDRESSARRAY_LET
               00307 _ADDRESSARRAY_LET
               00308                 ifdef _DEFBIT
               00309                                                 movfw   _CMD+1
               00310                                                 andlw   0x0E
               00311                                                 sublw   HIGH _BITTYPE
               00312                                                 _@BTFGS STATUS,Z,_BITARRAY
               00313                 endif
               00314                 ifdef _DEFNIB
               00315                                                 movfw   _CMD+1
               00316                                                 andlw   0x0E
               00317                                                 sublw   HIGH _NIBTYPE
               00318                                                 _@BTFGS STATUS,Z,_NIBARRAY
               00319                 endif
               00320                 ifdef _DEFBYTE
               00321                                                 movfw   _CMD+1
               00322                                                 andlw   0x4E
               00323                                                 sublw   HIGH _BYTETYPE
               00324                                                 _@BTFGS STATUS,Z,_BYTEARRAY
               00325                 endif
               00326                 ifdef _DEFSBYTE
               00327                                                 movfw   _CMD+1
               00328                                                 andlw   0x4E
               00329                                                 sublw   HIGH _SBYTETYPE
               00330                                                 _@BTFGS STATUS,Z,_SBYTEARRAY
               00331                 endif
               00332                 ifdef _DEFWORD
               00333                                                 movfw   _CMD+1
               00334                                                 andlw   0x4E
               00335                                                 sublw   HIGH _WORDTYPE
               00336                                                 _@BTFGS STATUS,Z,_WORDARRAY
               00337                 endif
               00338                 ifdef _DEFSWORD
               00339                                                 movfw   _CMD+1
               00340                                                 andlw   0x4E
               00341                                                 sublw   HIGH _SWORDTYPE
               00342                                                 _@BTFGS STATUS,Z,_SWORDARRAY
               00343                 endif
               00344                 ifdef _DEFLONG
               00345                                                 movfw   _CMD+1
               00346                                                 andlw   0x4E
               00347                                                 sublw   HIGH _LONGTYPE
               00348                                                 _@BTFGS STATUS,Z,_LONGARRAY
               00349                 endif
               00350                 ifdef _DEFSLONG
               00351                                                 movfw   _CMD+1
               00352                                                 andlw   0x4E
               00353                                                 sublw   HIGH _SLONGTYPE
               00354                                                 _@BTFGS STATUS,Z,_SLONGARRAY
               00355                 endif
               00356                 ifdef _DEFFLOAT
               00357                                                 movfw   _CMD+1
               00358                                                 andlw   0x4E
               00359                                                 sublw   HIGH _FLOATTYPE
               00360                                                 _@BTFGS STATUS,Z,_FLOATARRAY
               00361                 endif
               00362                                                 _@DONE
               00363                 endif
               00364 
               00365                 ifdef _DEFGETBYTE
               00366 _GETBYTE
               00367                 if _BANK2_START != 0
               00368                                                 btfsc   _WORK+1,0
               00369                                                 bsf     STATUS,IRP
               00370                 endif
               00371                                                 movfw   _WORK
               00372                                                 movwf   FSR
               00373                                                 movfw   INDF
               00374                                                 movwf   _WORK
               00375                                                 clrf    _WORK+1
               00376                                                 clrf    _WORK+2
               00377                                                 clrf    _WORK+3
               00378                                                 _@DONECLRIRP
               00379                 endif
               00380 
               00381                 ifdef _DEFGETSBYTE
               00382 _GETSBYTE
               00383                 if _BANK2_START != 0
               00384                                                 btfsc   _WORK+1,0
               00385                                                 bsf     STATUS,IRP
               00386                 endif
               00387                                                 movfw   _WORK
               00388                                                 movwf   FSR
               00389                                                 movfw   INDF
               00390                                                 movwf   _WORK
               00391                                                 movlw   0
               00392                                                 btfsc   _WORK,7
               00393                                                 movlw   0xff
               00394                                                 movwf   _WORK+1
               00395                                                 movwf   _WORK+2
               00396                                                 movwf   _WORK+3
               00397                                                 _@DONECLRIRP
               00398                 endif
               00399 
               00400                 ifdef _DEFGETWORD
               00401 _GETWORD
               00402                 if _BANK2_START != 0
               00403                                                 btfsc   _WORK+1,0
               00404                                                 bsf     STATUS,IRP
               00405                 endif
               00406                                                 movfw   _WORK
               00407                                                 movwf   FSR
               00408                                                 movfw   INDF
               00409                                                 movwf   _WORK
               00410                                                 incf    FSR,F
               00411                                                 movfw   INDF
               00412                                                 movwf   _WORK+1
               00413                                                 clrf    _WORK+2
               00414                                                 clrf    _WORK+3
               00415                                                 _@DONECLRIRP
               00416                 endif
               00417 
               00418                 ifdef _DEFGETSWORD
               00419 _GETSWORD
               00420                 if _BANK2_START != 0
               00421                                                 btfsc   _WORK+1,0
               00422                                                 bsf     STATUS,IRP
               00423                 endif
               00424                                                 movfw   _WORK
               00425                                                 movwf   FSR
               00426                                                 movfw   INDF
               00427                                                 movwf   _WORK
               00428                                                 incf    FSR,F
               00429                                                 movfw   INDF
               00430                                                 movwf   _WORK+1
               00431                                                 movlw   0
               00432                                                 btfsc   _WORK+1,7
               00433                                                 movlw   0xff
               00434                                                 movwf   _WORK+2
               00435                                                 movwf   _WORK+3
               00436                                                 _@DONECLRIRP
               00437                 endif
               00438 
               00439                 ifdef _DEFGETLONG
               00440 _GETLONG
               00441                 if _BANK2_START != 0
               00442                                                 btfsc   _WORK+1,0
               00443                                                 bsf     STATUS,IRP
               00444                 endif
               00445                                                 movfw   _WORK
               00446                                                 movwf   FSR
               00447                                                 movfw   INDF
               00448                                                 movwf   _WORK
               00449                                                 incf    FSR,F
               00450                                                 movfw   INDF
               00451                                                 movwf   _WORK+1
               00452                                                 incf    FSR,F
               00453                                                 movfw   INDF
               00454                                                 movwf   _WORK+2
               00455                                                 incf    FSR,F
               00456                                                 movfw   INDF
               00457                                                 movwf   _WORK+3
               00458                                                 _@DONECLRIRP
               00459                 endif
               00460 
               00461                 ifdef _DEFGETSLONG
               00462 _GETSLONG
               00463                 if _BANK2_START != 0
               00464                                                 btfsc   _WORK+1,0
               00465                                                 bsf     STATUS,IRP
               00466                 endif
               00467                                                 movfw   _WORK
               00468                                                 movwf   FSR
               00469                                                 movfw   INDF
               00470                                                 movwf   _WORK
               00471                                                 incf    FSR,F
               00472                                                 movfw   INDF
               00473                                                 movwf   _WORK+1
               00474                                                 incf    FSR,F
               00475                                                 movfw   INDF
               00476                                                 movwf   _WORK+2
               00477                                                 incf    FSR,F
               00478                                                 movfw   INDF
               00479                                                 movwf   _WORK+3
               00480                                                 _@DONECLRIRP
               00481                 endif
               00482 
               00483                 ifdef _DEFGETNIB
               00484 _GETNIB
               00485                                                 movfw   _WORK+1
               00486                                                 movwf   _CMD
               00487                 if _BANK2_START != 0
               00488                                                 btfsc   _CMD,0
               00489                                                 bsf     STATUS,IRP
               00490                 endif
               00491                                                 movfw   _WORK
               00492                                                 movwf   FSR
               00493                                                 movlw   0fh
               00494                                                 btfsc   _CMD,4
               00495                                                 movlw   0F0h
               00496                                                 andwf   INDF,W
               00497                                                 movwf   _WORK
               00498                                                 clrf    _WORK+1
               00499                                                 clrf    _WORK+2
               00500                                                 clrf    _WORK+3
               00501                                                 btfsc   _CMD,4
               00502                                                 swapf   _WORK,F
               00503                                                 _@DONECLRIRP
               00504                 endif
               00505 
               00506                 ifdef _DEFGETBIT
               00507 _GETBIT
               00508                                                 movfw   _WORK+1
               00509                                                 movwf   _CMD
               00510                 if _BANK2_START != 0
               00511                                                 btfsc   _CMD,0
               00512                                                 bsf     STATUS,IRP
               00513                 endif
               00514                                                 movfw   _WORK
               00515                                                 movwf   FSR
               00516                                                 swapf   _WORK+1,W
               00517                                                 andlw   07h
               00518                                                 call    _BITMASK
               00519                                                 clrf    _WORK
               00520                                                 andwf   INDF,W
               00521                                                 skpz
               00522                                                 bsf     _WORK,0
               00523                                                 clrf    _WORK+1
               00524                                                 clrf    _WORK+2
               00525                                                 clrf    _WORK+3
               00526                                                 _@DONECLRIRP
               00527                 endif
               00528 
               00529                 ifdef _DEFPUTBYTE
               00530 _PUTBYTE
               00531                 if _BANK2_START != 0
               00532                                                 btfsc   _WORK+1,0
               00533                                                 bsf     STATUS,IRP
               00534                 endif
               00535                                                 movfw   _WORK
               00536                                                 movwf   FSR
               00537                                                 movfw   _STACK
               00538                                                 movwf   INDF
               00539                                                 _@DONECLRIRP
               00540                 endif
               00541 
               00542                 ifdef _DEFPUTWORD
               00543 _PUTWORD
               00544                 if _BANK2_START != 0
               00545                                                 btfsc   _WORK+1,0
               00546                                                 bsf     STATUS,IRP
               00547                 endif
               00548                                                 movfw   _WORK
               00549                                                 movwf   FSR
               00550                                                 movfw   _STACK
               00551                                                 movwf   INDF
               00552                                                 incf    FSR,F
               00553                                                 movfw   _STACK+1
               00554                                                 movwf   INDF
               00555                                                 _@DONECLRIRP
               00556                 endif
               00557 
               00558                 ifdef _DEFPUTLONG
               00559 _PUTLONG
               00560                 if _BANK2_START != 0
               00561                                                 btfsc   _WORK+1,0
               00562                                                 bsf     STATUS,IRP
               00563                 endif
               00564                                                 movfw   _WORK
               00565                                                 movwf   FSR
               00566                                                 movfw   _STACK
               00567                                                 movwf   INDF
               00568                                                 incf    FSR,F
               00569                                                 movfw   _STACK+1
               00570                                                 movwf   INDF
               00571                                                 incf    FSR,F
               00572                                                 movfw   _STACK+2
               00573                                                 movwf   INDF
               00574                                                 incf    FSR,F
               00575                                                 movfw   _STACK+3
               00576                                                 movwf   INDF
               00577                                                 _@DONECLRIRP
               00578                 endif
               00579 
               00580                 ifdef _DEFPUTNIB
               00581 _PUTNIB
               00582                 if _BANK2_START != 0
               00583                                                 btfsc   _WORK+1,0
               00584                                                 bsf     STATUS,IRP
               00585                 endif
               00586                                                 movfw   _WORK
               00587                                                 movwf   FSR
               00588                                                 movlw   0Fh
               00589                                                 andwf   _STACK,F
               00590                                                 btfss   _WORK+1,4
               00591                                                 movlw   0F0h
               00592                                                 andwf   INDF,F
               00593                                                 movfw   _STACK
               00594                                                 btfsc   _WORK+1,4
               00595                                                 swapf   _STACK,W
               00596                                                 iorwf   INDF,F
               00597                                                 _@DONECLRIRP
               00598                 endif
               00599 
               00600                 ifdef _DEFPUTBIT
               00601 _PUTBIT
               00602                 if _BANK2_START != 0
               00603                                                 btfsc   _WORK+1,0
               00604                                                 bsf     STATUS,IRP
               00605                 endif
               00606                                                 movfw   _WORK
               00607                                                 movwf   FSR
               00608                                                 swapf   _WORK+1,W
               00609                                                 andlw   07h
               00610                                                 _@CALL  _BITMASK
               00611                                                 iorwf   INDF,F
               00612                                                 xorlw   0ffh
               00613                                                 btfss   _STACK,0
               00614                                                 andwf   INDF,F
               00615                                                 _@DONECLRIRP
               00616                 endif
               00617 
               00618         ifdef _DEFVAL
               00619 _VALCMD
               00620                 ifdef _DEFBIT
               00621                                                 movfw   _WORK+1
               00622                                                 andlw   0x0E
               00623                                                 sublw   HIGH _BITTYPE
               00624                                                 _@BTFGS STATUS,Z,_GETBIT
               00625                 endif
               00626                 ifdef _DEFNIB
               00627                                                 movfw   _WORK+1
               00628                                                 andlw   0x0E
               00629                                                 sublw   HIGH _NIBTYPE
               00630                                                 _@BTFGS STATUS,Z,_GETNIB
               00631                 endif
               00632                 ifdef _DEFBYTE
               00633                                                 movfw   _WORK+1
               00634                                                 andlw   0x4E
               00635                                                 sublw   HIGH _BYTETYPE
               00636                                                 _@BTFGS STATUS,Z,_GETBYTE
               00637                 endif
               00638                 ifdef _DEFSBYTE
               00639                                                 movfw   _WORK+1
               00640                                                 andlw   0x4E
               00641                                                 sublw   HIGH _SBYTETYPE
               00642                                                 _@BTFGS STATUS,Z,_GETSBYTE
               00643                 endif
               00644                 ifdef _DEFWORD
               00645                                                 movfw   _WORK+1
               00646                                                 andlw   0x4E
               00647                                                 sublw   HIGH _WORDTYPE
               00648                                                 _@BTFGS STATUS,Z,_GETWORD
               00649                 endif
               00650                 ifdef _DEFSWORD
               00651                                                 movfw   _WORK+1
               00652                                                 andlw   0x4E
               00653                                                 sublw   HIGH _SWORDTYPE
               00654                                                 _@BTFGS STATUS,Z,_GETSWORD
               00655                 endif
               00656                 ifdef _DEFLONG
               00657                                                 movfw   _WORK+1
               00658                                                 andlw   0x4E
               00659                                                 sublw   HIGH _LONGTYPE
               00660                                                 _@BTFGS STATUS,Z,_GETLONG
               00661                 endif
               00662                 ifdef _DEFSLONG
               00663                                                 movfw   _WORK+1
               00664                                                 andlw   0x4E
               00665                                                 sublw   HIGH _SLONGTYPE
               00666                                                 _@BTFGS STATUS,Z,_GETSLONG
               00667                 endif
               00668                 ifdef _DEFFLOAT
               00669                                                 movfw   _WORK+1
               00670                                                 andlw   0x4E
               00671                                                 sublw   HIGH _FLOATTYPE
               00672                                                 _@BTFGS STATUS,Z,_GETLONG
               00673                 endif
               00674                 endif
               00675 
               00676                 ifdef _DEFADDRESS
               00677                 _@ALIGNPAGE D'20'
               00678 _ADDRESSCMD
               00679                                                 _@GETCMD
               00680                                                 movwf   _WORK+1
               00681                                                 movwf   _CMD+1
               00682                                                 _@GETCMD
               00683                                                 movwf   _WORK
               00684                 ifdef _DEFARRAY
               00685                                                 btfss   _CMD+1,7
               00686                                                 goto    _ADDRESSSKIPARRAY
               00687                                                 bcf             _CMD+1,7
               00688                                                 movwf   _CMD
               00689                                                 _@CALL  _POPCMD
               00690                                                 _@GOTO  _ADDRESSARRAY_LET
               00691 _ADDRESSSKIPARRAY                        
               00692                 endif
               00693                                                 _@DONE
               00694                 endif
               00695 
               00696         ifdef _DEFADDRESSP
               00697 _ADDRESSPCMD            
               00698                                                 _@CALL  _ADDRESSCMD
               00699                                                 _@GOTO  _PUSHCMD
               00700         endif
               00701         
               00702         ifdef _DEFVAR
               00703 _VARCMD
               00704                                                 _@CALL  _ADDRESSCMD
               00705                                                 _@GOTO  _VALCMD
               00706         endif
               00707 
               00708                 ifdef _DEFVARP
               00709 _VARPCMD        
               00710                                                 _@CALL  _VARCMD
               00711                                                 _@GOTO  _PUSHCMD
               00712         endif
               00713         
               00714                 ifdef _DEFLETFUNC
               00715 _LETFUNC
               00716                 ifdef _DEFBIT
               00717                                                 movfw   _WORK+1
               00718                                                 andlw   0x0E
               00719                                                 sublw   HIGH _BITTYPE
               00720                                                 _@BTFGS STATUS,Z,_PUTBIT
               00721                 endif
               00722                 ifdef _DEFNIB
               00723                                                 movfw   _WORK+1
               00724                                                 andlw   0x0E
               00725                                                 sublw   HIGH _NIBTYPE
               00726                                                 _@BTFGS STATUS,Z,_PUTNIB
               00727                 endif
               00728                 ifdef _DEFBYTE
               00729                                                 movfw   _WORK+1
               00730                                                 andlw   0x4E
               00731                                                 sublw   HIGH _BYTETYPE
               00732                                                 _@BTFGS STATUS,Z,_PUTBYTE
               00733                 endif
               00734                 ifdef _DEFSBYTE
               00735                                                 movfw   _WORK+1
               00736                                                 andlw   0x4E
               00737                                                 sublw   HIGH _SBYTETYPE
               00738                                                 _@BTFGS STATUS,Z,_PUTBYTE
               00739                 endif
               00740                 ifdef _DEFWORD
               00741                                                 movfw   _WORK+1
               00742                                                 andlw   0x4E
               00743                                                 sublw   HIGH _WORDTYPE
               00744                                                 _@BTFGS STATUS,Z,_PUTWORD
               00745                 endif
               00746                 ifdef _DEFSWORD
               00747                                                 movfw   _WORK+1
               00748                                                 andlw   0x4E
               00749                                                 sublw   HIGH _SWORDTYPE
               00750                                                 _@BTFGS STATUS,Z,_PUTWORD
               00751                 endif
               00752                 ifdef _DEFLONG
               00753                                                 movfw   _WORK+1
               00754                                                 andlw   0x4E
               00755                                                 sublw   HIGH _LONGTYPE
               00756                                                 _@BTFGS STATUS,Z,_PUTLONG
               00757                 endif
               00758                 ifdef _DEFSLONG
               00759                                                 movfw   _WORK+1
               00760                                                 andlw   0x4E
               00761                                                 sublw   HIGH _SLONGTYPE
               00762                                                 _@BTFGS STATUS,Z,_PUTLONG
               00763                 endif
               00764                 ifdef _DEFFLOAT
               00765                                                 movfw   _WORK+1
               00766                                                 andlw   0x4E
               00767                                                 sublw   HIGH _FLOATTYPE
               00768                                                 _@BTFGS STATUS,Z,_PUTLONG
               00769                 endif
               00770                                                 _@DONE
               00771                 endif
               00772 
               00773                 ifdef _DEFLETSTACK
               00774 _LETSTACKCMD
               00775                                                 movfw   _SP                     ;3
               00776                                                 movwf   FSR                     ;1
               00777                                                 movfw   INDF            ;1
               00778                                                 movwf   _STACK          ;1
               00779 
               00780                                                 incf    FSR,F           ;1
               00781                                                 movfw   INDF            ;1
               00782                                                 movwf   _STACK+1        ;1
               00783 
               00784                                                 incf    FSR,F           ;1
               00785                                                 movfw   INDF            ;1
               00786                                                 movwf   _STACK+2        ;1
               00787 
               00788                                                 incf    FSR,F           ;1
               00789                                                 movfw   INDF            ;1
               00790                                                 movwf   _STACK+3        ;1
               00791 
               00792                                                 incf    FSR,w           ;1
               00793                                                 movwf   _SP                     ;1
               00794 
               00795                                                 _@CALL  _LETFUNC
               00796                                                 _@DONE
               00797                 endif
               00798 
               00799                 ifdef _DEFLET
               00800 _LETCMD
               00801                                                 _@CALL  _LETFUNC
               00802                                                 _@CLRSP
               00803                                                 _@DONE
               00804                 endif
               00805 
               00806                 ifdef _DEFILET
               00807 _ILETCMD
               00808                                                 movlw   _STACK
               00809                                                 _@CALL  _SWAPWORK_VAR
               00810                                                 _@CALL  _LETFUNC
               00811                                                 movfw   _WORK
               00812                                                 movwf   _CMD
               00813                                                 movfw   _WORK+1
               00814                                                 movwf   _CMD+1
               00815                                                 movlw   1
               00816                                                 movwf   _WORK
               00817                                                 clrf    _WORK+1
               00818                                                 _@CALL  _ADDRESSARRAY_LET
               00819                                                 movlw   _STACK
               00820                                                 _@CALL  _SWAPWORK_VAR
               00821                                                 _@DONE
               00822         endif
               00823 
               00824         ifdef _DEFTLET
               00825 _TLETCMD
               00826                                                 _@CLRSP
               00827                                                 incf    _STACK+4,w
               00828                                                 _@BTFGS STATUS,Z,_LETCMD
               00829                                                 _@DONE
               00830         endif
               00831 
               00096 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBFB2D~1.LIB" ;mbasic14\mbasictable.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                         _@ALIGNPAGE d'11'
                   M         local startorg = $
                   M         if (($+size)&0xf800)!=($&0xf800)
                   M                 while $ != ((startorg&0xf800)+0x800)
                   M                         nop
                   M                 endw
                   M         endif
               00004                 ifdef _DEFGETTABLEVALUE
               00005 _GETTABLEVALUE          
               00006                         incf    _WORK+4,f                       ;3
               00007                         skpnz                                           ;1
               00008                         incf    _WORK+5,f                       ;1
               00009                         movfw   _WORK+5                         ;1
               00010                         movwf   PCLATH                          ;1
               00011                         movfw   _WORK+4                         ;1
               00012                         movwf   PCL                                     ;2+2
               00013                 endif
               00014                 
               00015         ifdef _DEFGETTABLEOFFSET
               00016 _GETTABLEOFFSET
               00017                         movfw   _WORK+1
               00018                         addwf   _WORK+5,F
               00019                         movfw   _WORK
               00020                         addwf   _WORK+4,F
               00021                         skpnc
               00022                         incf    _WORK+5,F
               00023                         return
               00024         endif
               00025 
               00026         ifdef _DEFGETTABLE
               00027 _GETTABLE
               00028                         _@GETCMD
               00029                         movwf   _WORK+5
               00030                         _@GETCMD
               00031                         movwf   _WORK+4
               00032                         _@CALL  _POPCMD
               00033                         return
               00034         endif
               00035 
               00036         ifdef _DEFBYTETABLE
               00037 _BYTETABLECMD
               00038                         _@CALL  _GETTABLE
               00039                         _@CALL  _GETTABLEOFFSET
               00040                         _@CALLFIXED _GETTABLEVALUE
               00041                         movwf   _WORK
               00042                         clrf    _WORK+1
               00043                         clrf    _WORK+2
               00044                         clrf    _WORK+3
               00045                         return
               00046         endif
               00047 
               00048         ifdef _DEFBYTETABLEP
               00049 _BYTETABLEPCMD 
               00050                         _@CALL  _BYTETABLECMD
               00051                         _@GOTO  _PUSHCMD
               00052         endif
               00053         
               00054         ifdef _DEFSBYTETABLE
               00055 _SBYTETABLECMD
               00056                         _@CALL  _GETTABLE
               00057                         _@CALL  _GETTABLEOFFSET
               00058                         _@CALLFIXED _GETTABLEVALUE
               00059                         movwf   _WORK
               00060                         movlw   0
               00061                         btfsc   _WORK,7
               00062                         movlw   0xFF
               00063                         movwf   _WORK+1
               00064                         movwf   _WORK+2
               00065                         movwf   _WORK+3
               00066                         return
               00067         endif
               00068 
               00069         ifdef _DEFSBYTETABLEP
               00070 _SBYTETABLEPCMD 
               00071                         _@CALL  _SBYTETABLECMD
               00072                         _@GOTO  _PUSHCMD
               00073         endif
               00074         
               00075         ifdef _DEFWORDTABLE
               00076 _WORDTABLECMD
               00077                         _@CALL  _GETTABLE
               00078                         clrc
               00079                         rlf     _WORK,F
               00080                         rlf     _WORK+1,F
               00081                         _@CALL  _GETTABLEOFFSET
               00082                         _@CALLFIXED _GETTABLEVALUE
               00083                         movwf   _WORK+1
               00084                         _@CALLFIXED _GETTABLEVALUE
               00085                         movwf   _WORK
               00086                         clrf    _WORK+2
               00087                         clrf    _WORK+3
               00088                         return
               00089         endif
               00090 
               00091         ifdef _DEFWORDTABLEP
               00092 _WORDTABLEPCMD 
               00093                         _@CALL  _WORDTABLECMD
               00094                         _@GOTO  _PUSHCMD
               00095         endif
               00096         
               00097         ifdef _DEFSWORDTABLE
               00098 _SWORDTABLECMD
               00099                         _@CALL  _GETTABLE
               00100                         clrc
               00101                         rlf     _WORK,F
               00102                         rlf     _WORK+1,F
               00103                         _@CALL  _GETTABLEOFFSET
               00104                         _@CALLFIXED _GETTABLEVALUE
               00105                         movwf   _WORK+1
               00106                         _@CALLFIXED _GETTABLEVALUE
               00107                         movwf   _WORK
               00108                         movlw   0
               00109                         btfsc   _WORK+1,7
               00110                         movlw   0xff
               00111                         movwf   _WORK+2
               00112                         movwf   _WORK+3
               00113                         return
               00114         endif
               00115 
               00116         ifdef _DEFSWORDTABLEP
               00117 _SWORDTABLEPCMD 
               00118                         _@CALL  _SWORDTABLECMD
               00119                         _@GOTO  _PUSHCMD
               00120         endif
               00121         
               00122         ifdef _DEFLONGTABLE
               00123 _LONGTABLECMD
               00124                         _@CALL  _GETTABLE
               00125                         clrc
               00126                         rlf     _WORK,F
               00127                         rlf     _WORK+1,F
               00128                         clrc
               00129                         rlf     _WORK,F
               00130                         rlf     _WORK+1,F
               00131                         _@CALL  _GETTABLEOFFSET
               00132                         _@CALLFIXED _GETTABLEVALUE
               00133                         movwf   _WORK+3
               00134                         _@CALLFIXED _GETTABLEVALUE
               00135                         movwf   _WORK+2
               00136                         _@CALLFIXED _GETTABLEVALUE
               00137                         movwf   _WORK+1
               00138                         _@CALLFIXED _GETTABLEVALUE
               00139                         movwf   _WORK+0
               00140                         return
               00141         endif
               00142 
               00143         ifdef _DEFLONGTABLEP
               00144 _LONGTABLEPCMD 
               00145                         _@CALL  _LONGTABLECMD
               00146                         _@GOTO  _PUSHCMD
               00147         endif
               00097 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB5B6C~1.LIB" ;mbasic14\mbasicmath.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                 ifdef _DEFSET0
               00004 _SET0
               00005                                                 movwf   FSR
               00006 
               00007                                                 movfw   STATUS
               00008                                                 movwf   _CMD+2
               00009 
               00010                                                 movfw   _SP
               00011                                                 addwf   FSR,F
               00012 
               00013                                                 movfw   _CMD+2
               00014                                                 movwf   STATUS
               00015                                                 return
               00016                 endif
               00017 
               00018                 ifdef _DEFMOVSW4
               00019 _MOVSW4
               00020                                                 movlw   -1
               00021                                                 call    _SET0
               00022                                                 movfw   INDF
               00023                                                 return
               00024                 endif
               00025 
               00026                 ifdef _DEFMOVSW3
               00027 _MOVSW3
               00028                                                 movlw   -2
               00029                                                 call    _SET0
               00030                                                 movfw   INDF
               00031                                                 return
               00032                 endif
               00033 
               00034                 ifdef _DEFMOVSW2
               00035 _MOVSW2
               00036                                                 movlw   -3
               00037                                                 call    _SET0
               00038                                                 movfw   INDF
               00039                                                 return
               00040                 endif
               00041 
               00042                 ifdef _DEFMOVSW1
               00043 _MOVSW1
               00044                                                 movlw   -4
               00045                                                 call    _SET0
               00046                                                 movfw   INDF
               00047                                                 return
               00048                 endif
               00049 
               00050         ifdef _DEFNOT
               00051 _NOTCMD
               00052                                                 comf    _WORK,F
               00053                                                 comf    _WORK+1,F
               00054                         comf    _WORK+2,F
               00055                         comf    _WORK+3,F
               00056                                                 _@DONE
               00057         endif
               00058 
               00059         ifdef _DEFREV
               00060 _REVCMD
               00061                                                 movfw   _WORK
               00062                         movwf   _CMD
               00063                         movwf   _CMD+1
               00064                         _@CALL  _MOVSW1
               00065                                                 movwf   _WORK
               00066                         movwf   _WORK+4
               00067                         _@CALL  _MOVSW2
               00068                                                 movwf   _WORK+1
               00069                         movwf   _WORK+5
               00070                         _@CALL  _MOVSW3
               00071                         movwf   _WORK+2
               00072                         movwf   _WORK+6
               00073                         _@CALL  _MOVSW4
               00074                         movwf   _WORK+3
               00075                         movwf   _WORK+7
               00076 _rev1                                   clrc
               00077                         rrf     _WORK+3,F
               00078                         rrf     _WORK+2,F
               00079                                                 rrf             _WORK+1,F
               00080                                                 rrf             _WORK,F
               00081                                                 _@DECFGNZ _CMD,F,_rev1
               00082 _rev2                                   clrc
               00083                         rrf     _WORK+7,F
               00084                         rrf     _WORK+6,F
               00085                         rrf     _WORK+5,F
               00086                         rrf     _WORK+4,F
               00087                                                 rlf     _WORK,F
               00088                                                 rlf     _WORK+1,F
               00089                         rlf     _WORK+2,F
               00090                         rlf     _WORK+3,F
               00091                                                 _@DECFGNZ _CMD+1,F,_rev2
               00092                         _@DECSP 1
               00093                                                 _@DONE
               00094         endif
               00095 
               00096         ifdef _DEFSIN
014A 0820      00097 _SINCMD2                                movfw   _WORK           ; 1(16)
014B 397F      00098 _SINCMD3                                andlw   0x7f            ; 1 Clear High Nib
014C 1B20      00099                                                 btfsc   _WORK,6         ; 2 Check Quadrant
014D 3C80      00100                                                 sublw   0x80            ; 0 Flip quadrant and adjust for PCL
014E 3E56      00101                                                 addlw   LOW _sintbl     ; 1
014F 00F5      00102                                                 movwf   _CMD            ; 1
0150 3001      00103                                                 movlw   HIGH _sintbl; 1
0151 1803      00104                                                 skpnc                           ; 2
0152 3E01      00105                                                 addlw   1                       ; 0
0153 008A      00106                                                 movwf   PCLATH          ; 1
0154 0875      00107                                                 movfw   _CMD            ; 1
0155 0082      00108                                                 movwf   PCL                     ; 3
0156 3400      00109 _sintbl                         retlw   0
0157 3403      00110                                 retlw   3
0158 3406      00111                                 retlw   6
0159 3409      00112                                 retlw   9
015A 340C      00113                             retlw   12
015B 3410      00114                                 retlw   16
015C 3413      00115                                 retlw   19
015D 3416      00116                                 retlw   22
015E 3419      00117                                 retlw   25
015F 341C      00118                                 retlw   28
0160 341F      00119                             retlw   31
0161 3422      00120                                 retlw   34
0162 3425      00121                                 retlw   37
0163 3428      00122                                 retlw   40
0164 342B      00123                                 retlw   43
0165 342E      00124                                 retlw   46
0166 3431      00125                             retlw   49
0167 3433      00126                                 retlw   51
0168 3436      00127                                 retlw   54
0169 3439      00128                                 retlw   57
016A 343C      00129                                 retlw   60
016B 343F      00130                                 retlw   63
016C 3441      00131                             retlw   65
016D 3444      00132                         retlw   68
016E 3447      00133                             retlw   71
016F 3449      00134                         retlw   73
0170 344C      00135                                 retlw   76
0171 344E      00136                                 retlw   78
0172 3451      00137                             retlw   81
0173 3453      00138                         retlw   83
0174 3455      00139                             retlw   85
0175 3458      00140                         retlw   88
0176 345A      00141                                 retlw   90
0177 345C      00142                                 retlw   92
0178 345E      00143                             retlw   94
0179 3460      00144                         retlw   96
017A 3462      00145                             retlw   98
017B 3464      00146                         retlw   100
017C 3466      00147                                 retlw   102
017D 3468      00148                                 retlw   104
017E 346A      00149                             retlw   106
017F 346B      00150                                 retlw   107
0180 346D      00151                                 retlw   109
0181 346F      00152                         retlw   111
0182 3470      00153                                 retlw   112
0183 3471      00154                                 retlw   113
0184 3473      00155                             retlw   115
0185 3474      00156                         retlw   116
0186 3475      00157                             retlw   117
0187 3476      00158                         retlw   118
0188 3478      00159                                 retlw   120
0189 3479      00160                                 retlw   121
018A 347A      00161                             retlw   122
018B 347A      00162                         retlw   122
018C 347B      00163                             retlw   123
018D 347C      00164                         retlw   124
018E 347D      00165                                 retlw   125
018F 347D      00166                                 retlw   125
0190 347E      00167                                 retlw   126
0191 347E      00168                                 retlw   126
0192 347E      00169                                 retlw   126
0193 347F      00170                                 retlw   127
0194 347F      00171                                 retlw   127
0195 347F      00172                                 retlw   127
0196 347F      00173                                 retlw   127
0197           00174 _SINCMD                                 _@CALL  _SINCMD2
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
0197 214A          M         call    label&0x7ff
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M         endif           
                   M                 errorlevel +306
0198 1BA0      00175                                                 btfsc   _WORK,7
0199 3C00      00176                                                 sublw   0
019A 00A0      00177                                                 movwf   _WORK
019B 0103      00178                                                 clrw
019C 1BA0      00179                                                 btfsc   _WORK,7
019D 30FF      00180                                                 movlw   0xff
019E 00A1      00181                         movwf   _WORK+1
019F 00A2      00182                         movwf   _WORK+2
01A0 00A3      00183                         movwf   _WORK+3
               00184                                                 _@DONE
01A1 0008          M                                                 return
               00185         endif   
               00186         
               00187         ifdef _DEFCOS
               00188 _COSCMD
               00189                                                 movlw   64
               00190                                                 addwf   _WORK,F
               00191                                                 _@GOTO  _SINCMD
               00192         endif
               00193 
               00194         ifdef _DEFABS
               00195 _ABSCMD
               00196                         _@BTFGC _WORK+3,7,_DONE   ;#DONE#
               00197         endif
               00198 
               00199         ifdef _DEFNEG
               00200 _NEGCMD
               00201                         comf    _WORK,F
               00202                         comf    _WORK+1,F
               00203                         comf    _WORK+2,F
               00204                         comf    _WORK+3,F
               00205                         incf    _WORK,F
               00206                         skpnz
               00207                         incf    _WORK+1,F
               00208                         skpnz
               00209                         incf    _WORK+2,F
               00210                         skpnz
               00211                         incf    _WORK+3,F
               00212                                                 _@DONE
               00213         endif
               00214 
               00215         ifdef _DEFDCD
               00216 _DCDCMD
               00217                                                 incf    _WORK,W
               00218                                                 movwf   _CMD
               00219                                                 clrf    _WORK
               00220                                                 clrf    _WORK+1
               00221                                                 clrf    _WORK+2
               00222                                                 clrf    _WORK+3
               00223                                                 setc
               00224 _dcd                                    rlf     _WORK,F
               00225                                                 rlf     _WORK+1,F
               00226                                                 rlf     _WORK+2,F
               00227                                                 rlf     _WORK+3,F
               00228                                                 _@DECFGNZ _CMD,F,_dcd
               00229                                                 _@DONE
               00230         endif
               00231 
               00232         ifdef _DEFNCD
               00233 _NCDCMD
               00234                         movlw   33
               00235 _ncd                                    addlw   -1
               00236                                                 rlf     _WORK,F
               00237                                                 rlf     _WORK+1,F
               00238                                                 rlf     _WORK+2,F
               00239                                                 rlf     _WORK+3,F
               00240                                                 _@BTFGC STATUS,C,_ncd
               00241                                                 movwf   _WORK
               00242                                                 clrf    _WORK+1
               00243                         clrf    _WORK+2
               00244                         clrf    _WORK+3
               00245                                                 _@DONE
               00246         endif
               00247 
               00248         ifdef _DEFRANDOM
               00249 _RANDOMCMD
               00250                         movfw   _WORK+1            ; 1     Assure Seed <> 0
               00251                         iorwf   _WORK, W           ; 1
               00252                         btfsc   STATUS, Z          ; 1 / 2 Nudge Seed to 1
               00253                         incf    _WORK, F           ; 1 / 0
               00254                         movlw   80h                ; 1     Tap Bit 15
               00255                         btfsc   _WORK, 4           ; 1 / 2 Tap Bit 4
               00256                         xorwf   _WORK+1, F         ; 1 / 0
               00257                         btfsc   _WORK+2, 4         ; 1 / 2 Tap Bit 4
               00258                         xorwf   _WORK+3, F         ; 1 / 0
               00259                         btfsc   _WORK, 2           ; 1 / 2 Tap Bit 2
               00260                         xorwf   _WORK+1, F         ; 1 / 0
               00261                         btfsc   _WORK+2, 2         ; 1 / 2 Tap Bit 2
               00262                         xorwf   _WORK+3, F         ; 1 / 0
               00263                         btfsc   _WORK, 1           ; 1 / 2 Tap Bit 1
               00264                         xorwf   _WORK+1, F         ; 1
               00265                         btfsc   _WORK+2, 1         ; 1 / 2 Tap Bit 1
               00266                         xorwf   _WORK+3, F         ; 1
               00267                         rlf     _WORK+3,W          ; 1     C = New Bit
               00268                         rlf     _WORK+2,W          ; 1     Rotate Left
               00269                         rlf     _WORK+1,W          ; 1     C = New Bit
               00270                         rlf     _WORK,F            ; 1     Rotate Left
               00271                         rlf     _WORK+1,F          ; 1
               00272                         rlf     _WORK+2,F          ; 1
               00273                         rlf     _WORK+3,F          ; 1
               00274                                                 _@DONE
               00275         endif
               00276 
               00277         ifdef _DEFSQR
               00278         _@ALIGNPAGE D'36'
               00279 _SQRCMD
               00280                                                 movlw   0xc0
               00281                                                 movwf   _CMD
               00282                                                 movlw   0x40
               00283 _sqr1                                   subwf   _WORK+1,F
               00284                                                 skpc
               00285                                                 goto    _sqr5
               00286 _sqr2                                   iorwf   _CMD,W
               00287 _sqr3                                   rlf     _WORK,F
               00288                                                 rlf     _WORK+1,F
               00289                                                 rrf     _CMD,F
               00290                                                 btfsc   _CMD,7
               00291                                                 goto    _sqr6
               00292                                                 xorwf   _CMD,W
               00293                                                 skpc
               00294                                                 goto    _sqr1
               00295                                                 subwf   _WORK+1,F
               00296                                                 skpc
               00297                                                 goto    _sqrdone
               00298                                                 skpnz
               00299                                                 btfsc   _WORK,7
               00300                                                 xorlw   1
               00301                                                 goto    _sqrdone
               00302 _sqr6                                   skpnc
               00303                                                 goto    _sqrdone
               00304                                                 bcf     _CMD,7
               00305                                                 xorwf   _CMD,W
               00306                                                 subwf   _WORK+1,F
               00307                                                 goto    _sqr2
               00308 _sqr5                                   addwf   _WORK+1,F
               00309                                                 goto    _sqr3
               00310 _sqrdone                                movwf   _WORK
               00311                                                 clrf    _WORK+1
               00312                         clrf    _WORK+2
               00313                         clrf    _WORK+3
               00314                                                 _@DONE
               00315         endif
               00316 
               00317         ifdef _DEFBCD2BINFUNC
               00318         _@ALIGNPAGE D'50'
               00319 _BCD2BINFUNC
               00320                         movlw 32
               00321                         movwf _WORK+10
               00322 _bcd2bin16loop
               00323                         clrc
               00324                         rrf _WORK+8,f
               00325                         rrf _WORK+7,f
               00326                         rrf _WORK+6,f
               00327                         rrf _WORK+5,f
               00328                         rrf _WORK+4,f
               00329                         rrf _WORK+3,f
               00330                         rrf _WORK+2,f
               00331                         rrf _WORK+1,f
               00332                         rrf _WORK,f
               00333 
               00334                         clrw
               00335                         btfsc _WORK+4,3
               00336                          iorlw 0x03
               00337                         btfsc _WORK+4,7
               00338                          iorlw 0x30
               00339                         subwf _WORK+4,f
               00340                         clrw
               00341                         btfsc _WORK+5,3
               00342                          iorlw 0x03
               00343                         btfsc _WORK+5,7
               00344                          iorlw 0x30
               00345                         subwf _WORK+5,f
               00346                         clrw
               00347                         btfsc _WORK+6,3
               00348                          iorlw 0x03
               00349                         btfsc _WORK+6,7
               00350                          iorlw 0x30
               00351                         subwf _WORK+6,f
               00352                         clrw
               00353                         btfsc _WORK+7,3
               00354                          iorlw 0x03
               00355                         btfsc _WORK+7,7
               00356                          iorlw 0x30
               00357                         subwf _WORK+7,f
               00358                         clrw
               00359                         btfsc _WORK+8,3
               00360                          iorlw 0x03
               00361                         btfsc _WORK+8,7
               00362                          iorlw 0x30
               00363                         subwf _WORK+8,f
               00364         
               00365                         decfsz  _WORK+10,f
               00366                         goto    _bcd2bin16loop
               00367                         return
               00368         endif
               00369 
               00370         ifdef _DEFBCD2BIN
               00371 _BCD2BINCMD
               00372                         movlw   _WORK+4
               00373                         _@CALL  _SWAPWORK_VAR
               00374                         clrf    _WORK+8
               00375                         _@CALL  _BCD2BINFUNC
               00376                                                 _@DONE
               00377         endif
               00378 
               00379         ifdef _DEFBIN2BCDFUNC
               00380         _@ALIGNPAGE D'40'
               00381 _BIN2BCDFUNC
               00382                                                 movlw   32                      ; 32-bits
               00383                                                 movwf   _CMD            ; make cycle counter
               00384                                                 clrf    _WORK+4
               00385                                                 clrf    _WORK+5
               00386                                                 clrf    _WORK+6
               00387                                                 clrf    _WORK+7
               00388                                                 clrf    _WORK+8
               00389 _bin2bcd2
               00390                                                 movlw   _WORK+8
               00391                                                 movwf   FSR
               00392                                                 movlw   5
               00393                         movwf   _CMD+1
               00394 _bin2bcd3
               00395                                                 clrwdt
               00396                                                 movlw   0x33
               00397                                                 addwf   INDF,f          ; add to both nybbles
               00398                                                 btfsc   INDF,3          ; test if low result > 7
               00399                         andlw   0xf0            ; low result >7 so take the 3 out
               00400                                                 btfsc   INDF,7          ; test if high result > 7
               00401                         andlw   0x0f            ; high result > 7 so ok
               00402                                                 subwf   INDF,f          ; any results <= 7, subtract back
               00403                         decf    FSR,f           ; point to next
               00404                         decfsz  _CMD+1,f
               00405                         goto    _bin2bcd3
               00406                         
               00407                         rlf     _WORK+0,f       ; get another bit
               00408                         rlf     _WORK+1,f
               00409                         rlf     _WORK+2,f
               00410                         rlf     _WORK+3,f
               00411                         rlf     _WORK+4,F
               00412                         rlf     _WORK+5,F
               00413                         rlf     _WORK+6,F
               00414                         rlf     _WORK+7,F
               00415                         rlf     _WORK+8,F
               00416                         decfsz  _CMD,F
               00417                         goto    _bin2bcd2
               00418                                                 return
               00419         endif
               00420 
               00421         ifdef _DEFBIN2BCD
               00422 _BIN2BCDCMD
               00423                                                 _@CALL  _BIN2BCDFUNC
               00424                                                 movfw   _WORK+4
               00425                                                 movwf   _WORK
               00426                                                 movfw   _WORK+5
               00427                                                 movwf   _WORK+1
               00428                                                 movfw   _WORK+6
               00429                                                 movwf   _WORK+2
               00430                                                 movfw   _WORK+7
               00431                                                 movwf   _WORK+3
               00432                                                 _@DONE
               00433         endif
               00434 
               00435         ifdef _DEFXOR
               00436 _XORCMD
               00437                         _@CALL  _MOVSW1
               00438                                                 xorwf   _WORK,F
               00439                         _@CALL  _MOVSW2
               00440                                                 xorwf   _WORK+1,F
               00441                         _@CALL  _MOVSW3
               00442                         xorwf   _WORK+2,F
               00443                         _@CALL  _MOVSW4
               00444                         xorwf   _WORK+3,F
               00445                         _@DECSP 1
               00446                                                 _@DONE
               00447         endif
               00448 
               00449         ifdef _DEFIOR
               00450 _IORCMD
               00451                         _@CALL  _MOVSW1
               00452                         iorwf   _WORK,F
               00453                         _@CALL  _MOVSW2
               00454                                                 iorwf   _WORK+1,F
               00455                         _@CALL  _MOVSW3
               00456                         iorwf   _WORK+2,F
               00457                         _@CALL  _MOVSW4
               00458                         iorwf   _WORK+3,F
               00459                         _@DECSP 1
               00460                                                 _@DONE
               00461         endif
               00462 
               00463         ifdef _DEFAND
               00464 _ANDCMD
               00465                         _@CALL  _MOVSW1
               00466                                                 andwf   _WORK,F
               00467                         _@CALL  _MOVSW2
               00468                                                 andwf   _WORK+1,F
               00469                         _@CALL  _MOVSW3
               00470                         andwf   _WORK+2,F
               00471                         _@CALL  _MOVSW4
               00472                         andwf   _WORK+3,F
               00473                         _@DECSP 1
               00474                                                 _@DONE
               00475         endif
               00476 
               00477         ifdef _DEFNXOR
               00478 _NXORCMD
               00479                                                 _@CALL  _XORCMD
               00480                                                 _@GOTO  _NOTCMD
               00481         endif
               00482 
               00483         ifdef _DEFNIOR
               00484 _NIORCMD
               00485                                                 _@CALL  _IORCMD
               00486                                                 _@GOTO  _NOTCMD
               00487         endif
               00488 
               00489         ifdef _DEFNAND
               00490 _NANDCMD
               00491                                                 _@CALL  _ANDCMD
               00492                                                 _@GOTO  _NOTCMD
               00493         endif
               00494 
               00495         ifdef _DEFADD
               00496 _ADDFUNC
               00497                         _@CALL  _MOVSW1
               00498                         addwf   _WORK,F
               00499 
               00500                         _@CALL  _MOVSW2
               00501                                                 skpnc
               00502                                                 addlw   1
               00503                                                 skpz
               00504                         addwf   _WORK+1,F
               00505 
               00506                         _@CALL  _MOVSW3
               00507                                                 skpnc
               00508                                                 addlw   1
               00509                                                 skpz
               00510                         addwf   _WORK+2,F
               00511 
               00512                         _@CALL  _MOVSW4
               00513                                                 skpnc
               00514                                                 addlw   1
               00515                                                 skpz
               00516                         addwf   _WORK+3,F
               00517 
               00518                         return
               00519 _ADDCMD
               00520                         _@CALL  _ADDFUNC
               00521                         _@DECSP 1
               00522                                                 _@DONE
               00523         endif
               00524 
               00525         ifdef _DEFSUB
               00526 _SUBCMD
               00527                         _@CALL  _NEGCMD
               00528                         _@GOTO  _ADDCMD
               00529         endif
               00530 
               00531         ifdef _DEFDIVIDE
               00532         _@ALIGNPAGE D'110'
               00533 _DIVIDE
               00534                         _@CALL  _MOVSW1
               00535                         movwf   _WORK+4
               00536                         _@CALL  _MOVSW2
               00537                         movwf   _WORK+5
               00538                         _@CALL  _MOVSW3
               00539                         movwf   _WORK+6
               00540                         _@CALL  _MOVSW4
               00541                         movwf   _WORK+7
               00542                                                 clrf    _CMD+1          ;Clear temp variable
               00543                                                 
               00544                                                 btfss   _WORK+7,7
               00545                                                 goto    _divskipnegdenom
               00546                         comf    _WORK+4,F
               00547                         comf    _WORK+5,F
               00548                         comf    _WORK+6,F
               00549                         comf    _WORK+7,F
               00550                         incf    _WORK+4,F
               00551                         skpnz
               00552                         incf    _WORK+5,F
               00553                         skpnz
               00554                         incf    _WORK+6,F
               00555                         skpnz
               00556                         incf    _WORK+7,F
               00557                                                 bsf             _CMD+1,7
               00558 _divskipnegdenom
               00559                                                 btfss   _WORK+3,7
               00560                                                 goto    _DIGDIV
               00561                                                 _@CALL  _NEGCMD
               00562                                                 movlw   0x80
               00563                                                 xorwf   _CMD+1,F
               00564 _DIGDIV
               00565                         movlw   32
               00566                                                 movwf   _CMD
               00567                         clrf    _WORK+8
               00568                         clrf    _WORK+9
               00569                         clrf    _WORK+10
               00570                         clrf    _WORK+11
               00571                         clrc
               00572 _div1
               00573                         rlf     _WORK+4,F
               00574                         rlf     _WORK+5,F
               00575                         rlf     _WORK+6,F
               00576                         rlf     _WORK+7,F
               00577                         rlf     _WORK+8,F
               00578                         rlf     _WORK+9,F
               00579                         rlf     _WORK+10,F
               00580                         rlf     _WORK+11,F
               00581                                                 movfw   _WORK
               00582                         subwf   _WORK+8,W
               00583                                                 movfw   _WORK+1
               00584                                                 skpc
               00585                                                 addlw   1
               00586                         subwf   _WORK+9,W
               00587                         movfw   _WORK+2
               00588                                                 skpc
               00589                                                 addlw   1
               00590                         subwf   _WORK+10,W
               00591                         movfw   _WORK+3
               00592                                                 skpc
               00593                                                 addlw   1
               00594                         subwf   _WORK+11,W
               00595                                                 skpnc
               00596                                                 goto    _div3
               00597 _div2                                   decfsz  _CMD,F 
               00598                                                 goto    _div1
               00599                         
               00600                         rlf     _WORK+4,F
               00601                         rlf     _WORK+5,F
               00602                         rlf     _WORK+6,F
               00603                         rlf     _WORK+7,F
               00604                         
               00605                         bcf             _WORK+7,7
               00606                         _@BTFGC _CMD+1,7,_DONE
               00607                         
               00608                         comf    _WORK+4,F
               00609                         comf    _WORK+5,F
               00610                         comf    _WORK+6,F
               00611                         comf    _WORK+7,F
               00612                         incf    _WORK+4,F
               00613                         skpnz
               00614                         incf    _WORK+5,F
               00615                         skpnz
               00616                         incf    _WORK+6,F
               00617                         skpnz
               00618                         incf    _WORK+7,F
               00619                                                 _@DONE
               00620                         
               00621 _div3                   movfw   _WORK
               00622                         subwf   _WORK+8,F
               00623                                                 movfw   _WORK+1
               00624                                                 skpc
               00625                                                 addlw   1
               00626                         subwf   _WORK+9,F
               00627                         movfw   _WORK+2
               00628                                                 skpc
               00629                                                 addlw   1
               00630                         subwf   _WORK+10,F
               00631                         movfw   _WORK+3
               00632                                                 skpc
               00633                                                 addlw   1
               00634                         subwf   _WORK+11,F
               00635                                                 setc
               00636                                                 goto    _div2
               00637         endif
               00638 
               00639         ifdef _DEFDIG
               00640 _DIGCMD
               00641                         _@CALL  _MOVSW1
               00642                         movwf   _WORK+4
               00643                         _@CALL  _MOVSW2
               00644                         movwf   _WORK+5
               00645                         _@CALL  _MOVSW3
               00646                         movwf   _WORK+6
               00647                         _@CALL  _MOVSW4
               00648                         movwf   _WORK+7
               00649                         incf    _WORK,W
               00650 
               00651                                                 movwf   _CMD+3          ;Save W
               00652                                                 movfw   _SP                     ;Point to top of STACK
               00653                                                 movwf   FSR,F
               00654                                                 movfw   _CMD+3          ;Get W back
               00655                                                 movwf   INDF            ;Save W at top of STACK
               00656 
               00657 _dig                                    movlw   10
               00658                                                 movwf   _WORK
               00659                                                 clrf    _WORK+1
               00660                         clrf    _WORK+2
               00661                         clrf    _WORK+3
               00662                         call    _DIGDIV
               00663                                                 
               00664                                                 movfw   _SP                     ;Point to top of STACK
               00665                                                 movwf   FSR
               00666                                                 decfsz  INDF,F          ;Dec top of STACK value
               00667                                                 goto    _dig
               00668 
               00669                         movfw   _WORK+8
               00670                         movwf   _WORK
               00671                         clrf    _WORK+1
               00672                         clrf    _WORK+2
               00673                         clrf    _WORK+3
               00674 
               00675                         _@DECSP 1
               00676                                                 _@DONE
               00677         endif
               00678 
               00679         ifdef _DEFMOD
               00680 _MODCMD
               00681                                                 _@CALL  _DIVIDE
               00682                         movfw   _WORK+8
               00683                                                 movwf   _WORK
               00684                         movfw   _WORK+9
               00685                                                 movwf   _WORK+1
               00686                         movfw   _WORK+10
               00687                         movwf   _WORK+2
               00688                         movfw   _WORK+11
               00689                         movwf   _WORK+3
               00690                         _@DECSP 1
               00691                                                 _@DONE
               00692         endif
               00693 
               00694         ifdef _DEFDIV
               00695 _DIVCMD
               00696                                                 _@CALL  _DIVIDE
               00697                         movfw   _WORK+4
               00698                                                 movwf   _WORK
               00699                         movfw   _WORK+5
               00700                                                 movwf   _WORK+1
               00701                         movfw   _WORK+6
               00702                         movwf   _WORK+2
               00703                         movfw   _WORK+7
               00704                         movwf   _WORK+3
               00705                         _@DECSP 1
               00706                                                 _@DONE
               00707         endif
               00708 
               00709         ifdef _DEFMUL
               00710         _@ALIGNPAGE D'120'
               00711 _MULTIPLY
               00712                         _@CALL  _MOVSW1
               00713                         movwf   _WORK+4
               00714                         _@CALL  _MOVSW2
               00715                         movwf   _WORK+5
               00716                         _@CALL  _MOVSW3
               00717                         movwf   _WORK+6
               00718                         _@CALL  _MOVSW4
               00719                         movwf   _WORK+7
               00720                         
               00721                         clrf    _WORK+8
               00722                         clrf    _WORK+9
               00723                         clrf    _WORK+10
               00724                         clrf    _WORK+11
               00725 
               00726                         movlw   33
               00727                                                 movwf   _CMD
               00728 
               00729                                                 clrf    _CMD+1
               00730 
               00731                                                 btfss   _WORK+7,7
               00732                                                 goto    _mula_pos
               00733                                                 comf    _WORK+7,f
               00734                                                 comf    _WORK+6,f
               00735                                                 comf    _WORK+5,f
               00736                                                 comf    _WORK+4,f
               00737                                                 incf    _WORK+4,f
               00738                                                 skpnz
               00739                                                 incf    _WORK+5,f
               00740                                                 skpnz
               00741                                                 incf    _WORK+6,f
               00742                                                 skpnz
               00743                                                 incf    _WORK+7,f
               00744                                                 incf    _CMD+1,f
               00745 _mula_pos
               00746                                                 btfss   _WORK+3,7
               00747                                                 goto    _mul1
               00748                                                 comf    _WORK+3,f
               00749                                                 comf    _WORK+2,f
               00750                                                 comf    _WORK+1,f
               00751                                                 comf    _WORK,f
               00752                                                 incf    _WORK,f
               00753                                                 skpnz
               00754                                                 incf    _WORK+1,f
               00755                                                 skpnz
               00756                                                 incf    _WORK+2,f
               00757                                                 skpnz
               00758                                                 incf    _WORK+3,f
               00759                                                 incf    _CMD+1,f
               00760 
               00761 _mul1                   rrf     _WORK+3,F
               00762                         rrf     _WORK+2,F
               00763                         rrf     _WORK+1,F
               00764                                                 rrf     _WORK,F
               00765                                                 decf    _CMD,F
               00766                                                 skpnz
               00767                                                 goto    _mulfinish
               00768                                                 skpc
               00769                                                 goto    _mul2
               00770                         movfw   _WORK+4
               00771                         addwf   _WORK+8,F
               00772                         movfw   _WORK+5
               00773                                                 skpnc
               00774                                                 addlw   1
               00775                         addwf   _WORK+9,F
               00776                         movfw   _WORK+6
               00777                                                 skpnc
               00778                                                 addlw   1
               00779                         addwf   _WORK+10,F
               00780                         movfw   _WORK+7
               00781                                                 skpnc
               00782                                                 addlw   1
               00783                         addwf   _WORK+11,F
               00784 _mul2                   rrf     _WORK+11,F
               00785                         rrf     _WORK+10,F
               00786                         rrf     _WORK+9,F
               00787                         rrf     _WORK+8,F
               00788                                                 goto    _mul1
               00789 _mulfinish
               00790                                                 _@BTFGC _CMD+1,0,_DONE
               00791                                                 comf    _WORK+11,f
               00792                                                 comf    _WORK+10,f
               00793                                                 comf    _WORK+9,f
               00794                                                 comf    _WORK+8,f
               00795                                                 comf    _WORK+3,f
               00796                                                 comf    _WORK+2,f
               00797                                                 comf    _WORK+1,f
               00798                                                 comf    _WORK,f
               00799                                                 incf    _WORK,f
               00800                                                 skpnz
               00801                                                 incf    _WORK+1,f
               00802                                                 skpnz
               00803                                                 incf    _WORK+2,f
               00804                                                 skpnz
               00805                                                 incf    _WORK+3,f
               00806                                                 skpnz
               00807                                                 incf    _WORK+8,f
               00808                                                 skpnz
               00809                                                 incf    _WORK+9,f
               00810                                                 skpnz
               00811                                                 incf    _WORK+10,f
               00812                                                 skpnz
               00813                                                 incf    _WORK+11,f
               00814                                                 _@DONE
               00815         endif
               00816 
               00817         ifdef _DEFMULH
               00818 _MULHCMD
               00819                                                 _@CALL  _MULTIPLY
               00820                         movfw   _WORK+8
               00821                                                 movwf   _WORK
               00822                         movfw   _WORK+9
               00823                                                 movwf   _WORK+1
               00824                         movfw   _WORK+10
               00825                         movwf   _WORK+2
               00826                         movfw   _WORK+11
               00827                         movwf   _WORK+3
               00828                         _@DECSP 1
               00829                                                 _@DONE
               00830         endif
               00831 
               00832         ifdef _DEFMULM
               00833 _MULMCMD
               00834                                                 _@CALL  _MULTIPLY
               00835                         movfw   _WORK+2
               00836                                                 movwf   _WORK
               00837                         movfw   _WORK+3
               00838                         movwf   _WORK+1
               00839                         movfw   _WORK+8
               00840                         movwf   _WORK+2
               00841                         movfw   _WORK+9
               00842                         movwf   _WORK+3
               00843                         _@DECSP 1
               00844                                                 _@DONE
               00845         endif
               00846 
               00847         ifdef _DEFMULL
               00848 _MULLCMD
               00849                                                 _@CALL  _MULTIPLY
               00850                         _@DECSP 1
               00851                                                 _@DONE
               00852         endif
               00853 
               00854         ifdef _DEFSHR
               00855 _SHRCMD
               00856                         movfw   _WORK
               00857                         movwf   _WORK+4
               00858                         _@CALL  _MOVSW1
               00859                         movwf   _WORK
               00860                         _@CALL  _MOVSW2
               00861                         movwf   _WORK+1
               00862                         _@CALL  _MOVSW3
               00863                         movwf   _WORK+2
               00864                         _@CALL  _MOVSW4
               00865                         movwf   _WORK+3
               00866 _shrlp
               00867                         clrc
               00868                         rrf     _WORK+3,F
               00869                         rrf     _WORK+2,F
               00870                         rrf     _WORK+1,F
               00871                         rrf     _WORK+0,F
               00872                         _@DECFGNZ _WORK+4,F,_shrlp
               00873                         _@DECSP 1
               00874                                                 _@DONE
               00875         endif
               00876 
               00877         ifdef _DEFSHL
               00878 _SHLCMD
               00879                         movfw   _WORK
               00880                         movwf   _WORK+4
               00881                         _@CALL  _MOVSW1
               00882                         movwf   _WORK
               00883                         _@CALL  _MOVSW2
               00884                         movwf   _WORK+1
               00885                         _@CALL  _MOVSW3
               00886                         movwf   _WORK+2
               00887                         _@CALL  _MOVSW4
               00888                         movwf   _WORK+3
               00889 _shllp
               00890                         clrc
               00891                         rlf     _WORK+0,F
               00892                         rlf     _WORK+1,F
               00893                         rlf     _WORK+2,F
               00894                         rlf     _WORK+3,F
               00895                         _@DECFGNZ _WORK+4,F,_shllp
               00896                         _@DECSP 1
               00897                                                 _@DONE
               00898         endif
               00899 
               00900         ifdef _DEFMINMAX
               00901 _MINMAX         
               00902                         _@CALL  _MOVSW1
               00903                                                 movwf   _WORK
               00904                         _@CALL  _MOVSW2
               00905                                                 movwf   _WORK+1
               00906                         _@CALL  _MOVSW3
               00907                         movwf   _WORK+2
               00908                         _@CALL  _MOVSW4
               00909                         movwf   _WORK+3
               00910                         _@DECSP 1
               00911                                                 _@DONE
               00912         endif
               00913 
               00914         ifdef _DEFFMAX
               00915 _FMAXCMD
               00916                                                 _@CALL  _FCMP
               00917                                                 andlw   04h
               00918                                                 _@BTFGC STATUS,Z,_MINMAX
               00919                                                 _@DECSP 1
               00920                                                 _@DONE
               00921         endif
               00922 
               00923         ifdef _DEFFMIN
               00924 _FMINCMD
               00925                                                 _@CALL  _FCMP       
               00926                                                 andlw   01h
               00927                                                 _@BTFGC STATUS,Z,_MINMAX
               00928                                                 _@DECSP 1
               00929                                                 _@DONE
               00930                 endif
               00931 
               00932         ifdef _DEFMAX
               00933 _MAXCMD
               00934                                                 _@CALL  _CMP       
               00935                                                 andlw   04h
               00936                                                 _@BTFGC STATUS,Z,_MINMAX
               00937                                                 _@DECSP 1
               00938                                                 _@DONE
               00939         endif
               00940 
               00941         ifdef _DEFMIN
               00942 _MINCMD
               00943                                                 _@CALL  _CMP       
               00944                                                 andlw   01h
               00945                                                 _@BTFGC STATUS,Z,_MINMAX
               00946                                                 _@DECSP 1
               00947                                                 _@DONE
               00948                 endif
               00949 
               00098 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBF525~1.LIB" ;mbasic14\mbasiclogic.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFTRUE
               00004 _TRUE                           movlw   0ffh
               00005                                         movwf   _WORK
               00006                                         movwf   _WORK+1
               00007                                         movwf   _WORK+2
               00008                                         movwf   _WORK+3
               00009                         return
               00010         endif
               00011 
               00012         ifdef _DEFXORTRUE
               00013 _XORTRUE                movlw   0ffh
               00014                                         xorwf   _WORK,F
               00015                                         xorwf   _WORK+1,F
               00016                                         xorwf   _WORK+2,F
               00017                                         xorwf   _WORK+3,F
               00018                         return
               00019         endif
               00020 
               00021         ifdef _DEFFALSE
               00022 _FALSE                  clrf    _WORK
               00023                         clrf    _WORK+1
               00024                                         clrf    _WORK+2
               00025                                         clrf    _WORK+3
               00026                         return
               00027         endif
               00028 
               00029         ifdef _DEFCMPEND
               00030 _CMPEND
               00031                         _@BTFCC STATUS,Z,_TRUE
               00032                         _@BTFCS STATUS,Z,_FALSE
               00033                                         _@DECSP 1
               00034                                         _@DONE
               00035         endif
               00036 
               00037         ifdef _DEFFCMP
               00038         _@ALIGNPAGE D'40'
               00039 _FCMP
               00040                                         ; calculate c0-c1 to set carry flag
               00041                                         clrc
               00042                                         clrf    _WORK+8
               00043                                         _@CALL  _MOVSW3
               00044                                         andlw   0x80                    ;Z if positive
               00045                                         skpz                                    ;If ARG1 is negative
               00046                                         goto    _fcmp_neg1
               00047                                         btfss   _WORK+2,7               ;If ARG2 is positive
               00048                                         goto    _fcmp_finish    ;+ARG1 and +ARG2
               00049                                         goto    _fcmpneq                ;+ARG1 and -ARG2
               00050 _fcmp_neg1                      btfss   _WORK+2,7               ;If ARG2 is positive
               00051                                         goto    _fcmplt                 ;-ARG1 and +ARG2
               00052                                         bsf             _WORK+8,0               ;-ARG1 and -ARG2
               00053 _fcmp_finish                                                                            
               00054                                         _@CALL  _MOVSW4
               00055                                         subwf   _WORK+3,W
               00056                         skpz                    ; If unequal then DONE
               00057                         goto    _fcmpneq
               00058 
               00059                                         movfw   _WORK+2                 ;Copy SIGN byte of ARG2
               00060                                         movwf   _WORK+9                 ;to _WORK register
               00061 
               00062                                         _@CALL  _MOVSW3
               00063                                         iorlw   0x80                    ;Set explicit mantissa bits
               00064                                         bsf             _WORK+9,7
               00065                                         subwf   _WORK+9,W
               00066                         skpz                    ; If unequal then DONE
               00067                         goto    _fcmpneq
               00068 
               00069                                         _@CALL  _MOVSW2
               00070                         subwf   _WORK+1,W
               00071                         skpz                    ; If unequal then DONE
               00072                         goto    _fcmpneq
               00073 
               00074                                         _@CALL  _MOVSW1           
               00075                         subwf   _WORK, W
               00076                         skpz                    ; If unequal then DONE
               00077                         goto    _fcmpneq
               00078 
               00079                         movlw   B'00000010'     ; if _WORK4 == _WORK
               00080                         return
               00081 _fcmpneq
               00082                                         btfss   _WORK+8,0
               00083                                         movlw   B'00000001'     ; if _WORK4 > _WORK
               00084                                         btfsc   _WORK+8,0
               00085                                         movlw   B'00000100'     ; if _WORK4 < _WORK
               00086                         skpc
               00087                         return
               00088 _fcmplt                 
               00089                                         btfss   _WORK+8,0
               00090                         movlw   B'00000100'     ; if _WORK4 < _WORK
               00091                                         btfsc   _WORK+8,0
               00092                         movlw   B'00000001'     ; if _WORK4 > _WORK
               00093                         return
               00094         endif
               00095 
               00096         ifdef _DEFCMP
               00097         _@ALIGNPAGE D'40'
               00098 _CMP
               00099                                         ; calculate c0-c1 to set carry flag
               00100                                         _@CALL  _MOVSW4
               00101                                         movwf   _CMD
               00102                                         subwf   _WORK+3,W
               00103                                         skpnz
               00104                                         goto    _cmpignoresign
               00105 _cmpchecksign
               00106                                         movfw   _CMD
               00107                                         xorwf   _WORK+3,W
               00108                                         andlw   0x80
               00109                                         skpnz
               00110                                         goto    _cmpusign
               00111 _cmpsign
               00112                                         clrc
               00113                                         btfsc   _WORK+3,7                                       
               00114                                          goto   _cmpneq                 ;GT
               00115                                         goto    _cmplt                  ;LT
               00116 _cmpusign                                       
               00117                                         movfw   _CMD
               00118                                         subwf   _WORK+3,W
               00119                                         skpz
               00120                                         goto    _cmpneq
               00121 _cmpignoresign
               00122                                         _@CALL  _MOVSW3
               00123                                         subwf   _WORK+2,W
               00124                         skpz                    ; If unequal then DONE
               00125                         goto    _cmpneq
               00126                                         _@CALL  _MOVSW2
               00127                         subwf   _WORK+1,W
               00128                         skpz                    ; If unequal then DONE
               00129                         goto    _cmpneq
               00130                                         _@CALL  _MOVSW1           
               00131                         subwf   _WORK, W
               00132                         skpz                    ; If unequal then DONE
               00133                         goto    _cmpneq
               00134                         movlw   B'00000010'     ; if _WORK4 == _WORK
               00135                         return
               00136 _cmpneq
               00137                                         movlw   B'00000001'     ; if _WORK4 > _WORK
               00138                         skpnc
               00139 _cmplt                  
               00140                         movlw   B'00000100'     ; if _WORK4 < _WORK
               00141                         return
               00142         endif
               00143 
               00144         ifdef _DEFLNOT
               00145         _@ALIGNPAGE D'29'
               00146 _LNOTCMD
               00147                                                 _@CALL  _FALSE
               00148                         movf    _WORK,F
               00149                         skpnz
               00150                         goto    _LNOTTRUE
               00151                         movf    _WORK+1,F
               00152                         skpnz
               00153                         goto    _LNOTTRUE
               00154                         movf    _WORK+2,F
               00155                         skpnz
               00156                         goto    _LNOTTRUE
               00157                         movf    _WORK+3,F
               00158                         skpnz
               00159                         goto    _LNOTTRUE
               00160                         _@CALL  _FALSE
               00161                                                 _@DONE
               00162 _LNOTTRUE               _@CALL  _TRUE
               00163                                                 _@DONE
               00164         endif
               00165 
               00166         ifdef _DEFLAND
               00167 _LANDCMD
               00168                                                 movfw   _WORK
               00169                         iorwf   _WORK+1,W
               00170                         iorwf   _WORK+2,W
               00171                         iorwf   _WORK+3,W
               00172                         _@BTFGS STATUS,Z,_LANDFINISH  ;FALSE #DONE#
               00173                                                 _@CALL  _FALSE
               00174                                                 movfw   _SP
               00175                                                 movwf   FSR
               00176                                                 decf    FSR,F
               00177                                                 movfw   INDF            ;Get BYTE3
               00178                                                 decf    FSR,F
               00179                                                 iorwf   INDF,w          ;IOR BYTE2
               00180                                                 decf    FSR,F
               00181                                                 iorwf   INDF,w          ;IOR BYTE1
               00182                                                 decf    FSR,F
               00183                                                 iorwf   INDF,w          ;IOR BYTE0
               00184                         _@BTFGS STATUS,Z,_LANDFINISH ;FALSE #DONE#
               00185                                                 _@CALL  _TRUE
               00186 _LANDFINISH
               00187                         _@DECSP 1
               00188                                                 _@DONE
               00189         endif
               00190 
               00191         ifdef _DEFLOR
               00192 _LORCMD
               00193                                                 movfw   _WORK
               00194                         iorwf   _WORK+1,W
               00195                         iorwf   _WORK+2,W
               00196                         iorwf   _WORK+3,W
               00197                         _@BTFCC STATUS,Z,_TRUE
               00198                                                 movfw   _SP
               00199                                                 movwf   FSR
               00200                                                 decf    FSR,F
               00201                                                 movfw   INDF            ;Get BYTE3
               00202                                                 decf    FSR,F
               00203                                                 iorwf   INDF,w          ;IOR BYTE2
               00204                                                 decf    FSR,F
               00205                                                 iorwf   INDF,w          ;IOR BYTE1
               00206                                                 decf    FSR,F
               00207                                                 iorwf   INDF,w          ;IOR BYTE0
               00208                         _@BTFCC STATUS,Z,_TRUE
               00209                         _@DECSP 1
               00210                                                 _@DONE
               00211         endif
               00212 
               00213         ifdef _DEFLXOR
               00214 _LXORCMD
               00215                                                 movfw   _WORK
               00216                         iorwf   _WORK+1,W
               00217                         iorwf   _WORK+2,W
               00218                         iorwf   _WORK+3,W
               00219                         _@BTFCC STATUS,Z,_TRUE
               00220                                                 movfw   _SP
               00221                                                 movwf   FSR
               00222                                                 decf    FSR,F
               00223                                                 movfw   INDF            ;Get BYTE3
               00224                                                 decf    FSR,F
               00225                                                 iorwf   INDF,w          ;IOR BYTE2
               00226                                                 decf    FSR,F
               00227                                                 iorwf   INDF,w          ;IOR BYTE1
               00228                                                 decf    FSR,F
               00229                                                 iorwf   INDF,w          ;IOR BYTE0
               00230                         _@BTFCC STATUS,Z,_XORTRUE
               00231                         _@DECSP 1
               00232                                                 _@DONE
               00233         endif   
               00234 
               00235         ifdef _DEFFLESS
               00236 _FLESSCMD
               00237                         _@CALL  _FCMP
               00238                         andlw   04h
               00239                         _@GOTO  _CMPEND
               00240         endif
               00241 
               00242         ifdef _DEFFLESSEQUAL
               00243 _FLESSEQUALCMD
               00244                         _@CALL  _FCMP
               00245                         andlw   06h
               00246                         _@GOTO  _CMPEND
               00247         endif
               00248 
               00249         ifdef _DEFFEQUAL
               00250 _FEQUALCMD
               00251                         _@CALL  _FCMP
               00252                         andlw   02h
               00253                         _@GOTO  _CMPEND
               00254         endif
               00255 
               00256         ifdef _DEFFGREATEQUAL
               00257 _FGREATEQUALCMD
               00258                         _@CALL  _FCMP
               00259                         andlw   03h
               00260                         _@GOTO  _CMPEND
               00261         endif
               00262 
               00263         ifdef _DEFFGREAT
               00264 _FGREATCMD
               00265                         _@CALL  _FCMP
               00266                         andlw   01h
               00267                         _@GOTO  _CMPEND
               00268         endif
               00269 
               00270         ifdef _DEFFNOTEQUAL
               00271 _FNOTEQUALCMD
               00272                         _@CALL  _FCMP
               00273                         andlw   05h
               00274                         _@GOTO  _CMPEND
               00275         endif
               00276 
               00277         ifdef _DEFLESS
               00278 _LESSCMD
               00279                         _@CALL  _CMP
               00280                         andlw   04h
               00281                         _@GOTO  _CMPEND
               00282         endif
               00283 
               00284         ifdef _DEFLESSEQUAL
               00285 _LESSEQUALCMD
               00286                         _@CALL  _CMP
               00287                         andlw   06h
               00288                         _@GOTO  _CMPEND
               00289         endif
               00290 
               00291         ifdef _DEFEQUAL
               00292 _EQUALCMD
               00293                         _@CALL  _CMP
               00294                         andlw   02h
               00295                         _@GOTO  _CMPEND
               00296         endif
               00297 
               00298         ifdef _DEFGREATEQUAL
               00299 _GREATEQUALCMD
               00300                         _@CALL  _CMP
               00301                         andlw   03h
               00302                         _@GOTO  _CMPEND
               00303         endif
               00304 
               00305         ifdef _DEFGREAT
               00306 _GREATCMD
               00307                         _@CALL  _CMP
               00308                         andlw   01h
               00309                         _@GOTO  _CMPEND
               00310         endif
               00311 
               00312         ifdef _DEFNOTEQUAL
               00313 _NOTEQUALCMD
               00314                         _@CALL  _CMP
               00315                         andlw   05h
               00316                         _@GOTO  _CMPEND
               00317         endif
               00099 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBE374~1.LIB" ;mbasic14\mbasicfloat.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
  00000020     00003 _F_AARGB2          equ     _WORK
  00000021     00004 _F_AARGB1          equ     _WORK+1
  00000022     00005 _F_AARGB0          equ     _WORK+2
  00000023     00006 _F_EXP             equ     _WORK+3 ; 8 bit biased exponent
  00000023     00007 _F_AEXP            equ     _WORK+3 ; 8 bit biased exponent for argument A
               00008 
  00000024     00009 _F_BARGB2          equ     _WORK+4
  00000025     00010 _F_BARGB1          equ     _WORK+5
  00000026     00011 _F_BARGB0          equ     _WORK+6
  00000027     00012 _F_BEXP            equ     _WORK+7 ; 8 bit biased exponent for argument B
               00013 
  00000028     00014 _F_AARGB5          equ     _WORK+8
  00000029     00015 _F_AARGB4          equ     _WORK+9
  0000002A     00016 _F_AARGB3          equ     _WORK+10
  0000002B     00017 _F_BARGB3          equ     _WORK+11
  00000075     00018 _F_SIGN            equ     _CMD    ; used alot,  save location for sign in MSB
  00000076     00019 _F_FPFLAGS         equ     _CMD+1  ; floating point library exception flags
  00000077     00020 _F_TEMPB1          equ     _CMD+2  ; used twice
  00000078     00021 _F_TEMP            equ     _CMD+3  ; used alot, temporary storage
               00022 
  0000007F     00023 _F_EXPBIAS         equ     D'127'
  00000007     00024 _F_MSB             equ     7
  00000000     00025 _F_LSB             equ     0
               00026 
  00000000     00027 _F_IOV             equ     0       ; bit0 = integer overflow flag
  00000001     00028 _F_FOV             equ     1       ; bit1 = floating point overflow flag
  00000002     00029 _F_FUN             equ     2       ; bit2 = floating point underflow flag
  00000003     00030 _F_FDZ             equ     3       ; bit3 = floating point divide by zero flag
  00000004     00031 _F_NAN             equ     4       ; bit4 = not-a-number exception flag
  00000005     00032 _F_DOM             equ     5       ; bit5 = domain error exception flag
  00000006     00033 _F_RND             equ     6       ; bit6 = floating point rounding flag,
               00034                                         ; 0 = truncation
               00035                                         ; 1 = unbiased rounding to nearest _F_LSB
               00036 
               00037                 ifdef _DEFFPSWAPARGS
               00038 _FPSWAPARGS
               00039                                 MOVFW                   _F_BEXP                                    ; use BARG if _F_AEXP < _F_BEXP
               00040                                 MOVWF                   _F_AARGB5                                  ; therefore, swap AARG and BARG
               00041                                 MOVFW                   _F_AEXP  
               00042                                 MOVWF                   _F_BEXP
               00043                                 MOVFW                   _F_AARGB5  
               00044                                 MOVWF                   _F_AEXP
               00045 
               00046                                 MOVFW                   _F_BARGB0  
               00047                                 MOVWF                   _F_AARGB5
               00048                                 MOVFW                   _F_AARGB0  
               00049                                 MOVWF                   _F_BARGB0
               00050                                 MOVFW                   _F_AARGB5  
               00051                                 MOVWF                   _F_AARGB0
               00052 
               00053                                 MOVFW                   _F_BARGB1  
               00054                                 MOVWF                   _F_AARGB5
               00055                                 MOVFW                   _F_AARGB1  
               00056                                 MOVWF                   _F_BARGB1
               00057                                 MOVFW                   _F_AARGB5  
               00058                                 MOVWF                   _F_AARGB1
               00059 
               00060                                 MOVFW                   _F_BARGB2  
               00061                                 MOVWF                   _F_AARGB5
               00062                                 MOVFW                   _F_AARGB2  
               00063                                 MOVWF                   _F_BARGB2
               00064                                 MOVFW                   _F_AARGB5  
               00065                                 MOVWF                   _F_AARGB2
               00066                                 return
               00067                 endif
               00068 
               00069                 ifdef _DEFSETUPBARG
               00070 _SETUPBARG
               00071                                 movfw                   _SP                     ;Get STACK address
               00072                                 movwf                   FSR                     ;Set INDF to STACK
               00073                                 decf                    FSR,F           ;Point to BYTE3 of LONG on top of STACK
               00074                                 movfw                   INDF            ;Get BYTE3
               00075                                 movwf                   _F_BEXP
               00076                                 
               00077                                 decf                    FSR,F           ;Point to BYTE2 of LONG on top of STACK
               00078                                 movfw                   INDF            ;Get BYTE2
               00079                                 movwf                   _F_BARGB0
               00080                                 
               00081                                 decf                    FSR,F           ;Point to BYTE1 of LONG on top of STACK
               00082                                 movfw                   INDF            ;Get BYTE1
               00083                                 movwf                   _F_BARGB1
               00084                                 
               00085                                 decf                    FSR,F           ;Point to BYTE0 of LONG on top of STACK
               00086                                 movfw                   INDF            ;Get BYTE0
               00087                                 movwf                   _F_BARGB2
               00088                                 return
               00089                 endif
               00090 
               00091                 ifdef _DEFFIXSIGN
               00092 _FIXSIGN32              
               00093                                 BTFSS                   _F_SIGN,_F_MSB
               00094                                 BCF                             _F_AARGB0,_F_MSB                ;       clear explicit _F_MSB if positive
               00095                                 RETLW                   0
               00096                 endif
               00097 
               00098                 ifdef _DEFRES032
               00099 _RES032                 
               00100                                 CLRF                    _F_AARGB0                               ; result        equals zero
               00101                                 CLRF                    _F_AARGB1
               00102                                 CLRF                    _F_AARGB2
               00103                                 CLRF                    _F_AARGB3
               00104                                 CLRF                    _F_EXP
               00105                                 RETLW                   0
               00106                 endif
               00107 
               00108                 ifdef _DEFSETFOV
               00109 _SETFOV32               
               00110                                 BSF                             _F_FPFLAGS,_F_FOV               ;       set     floating point underflag
               00111                                 RETLW                   0xFF                                    ; return error code     in WREG
               00112                 endif
               00113 
               00114                 ifdef _DEFSETIOV
               00115 _SETIOV32               
               00116                                 BSF                             _F_FPFLAGS,_F_IOV               ;       set     integer overflow flag
               00117                                 RETLW                   0xFF                                    ; return error code     in WREG
               00118                 endif
               00119 
               00120                 ifdef _DEFSETFUN
               00121 _SETFUN32               
               00122                                 BSF                             _F_FPFLAGS,_F_FUN               ;       set     floating point underflag
               00123                                 RETLW                   0xFF                                    ; return error code     in WREG
               00124                 endif
               00125 
               00126                 ifdef _DEFSETFDZ
               00127 _SETFDZ32               
               00128                                 BSF                             _F_FPFLAGS,_F_FDZ               ;       set     divide by zero flag
               00129                                 RETLW                   0xFF
               00130                 endif
               00131 
               00132                 ifdef _DEFFNEG
               00133 _FNEGCMD
               00134                                 MOVLW                   0x80
               00135                                 XORWF                   _F_AARGB0,F
               00136                                 _@DONE
               00137                 endif
               00138 
               00139                 ifdef _DEFNRM3232
               00140                         _@ALIGNPAGE D'40'
               00141 _NRM3232
               00142 _NRM32                  CLRF                    _F_TEMP                                    ; clear exponent     decrement
               00143                                 MOVFW                   _F_AARGB0                                  ; test if highbyte=0
               00144                                 skpz
               00145                                 GOTO                    _NORM3232
               00146                                 MOVFW                   _F_AARGB1                                  ; if so,     shift 8 bits by move
               00147                                 MOVWF                   _F_AARGB0
               00148                                 MOVFW                   _F_AARGB2
               00149                                 MOVWF                   _F_AARGB1
               00150                                 CLRF                    _F_AARGB2
               00151                                 BSF                             _F_TEMP,3                                  ; increase decrement by 8
               00152 
               00153                                 MOVFW                   _F_AARGB0                                  ; test if highbyte=0
               00154                                 skpz
               00155                                 GOTO                    _NORM3232
               00156                                 MOVFW                   _F_AARGB1                                  ; if so,     shift 8 bits by move
               00157                                 MOVWF                   _F_AARGB0
               00158                                 CLRF                    _F_AARGB1
               00159                                 BCF                             _F_TEMP,3                                  ; increase decrement by 8
               00160                                 BSF                             _F_TEMP,4
               00161                 
               00162                                 MOVFW                   _F_AARGB0                                  ; if highbyte=0,     result=0
               00163                                 _@BTFGC                 STATUS,Z,_RES032
               00164 
               00165 _NORM3232               MOVFW                   _F_TEMP
               00166                                 SUBWF                   _F_EXP,F
               00167                                 skpnz
               00168                                 goto                    _NORMNZ1
               00169                                 _@BTFGC                 STATUS,C,_SETFUN32
               00170 _NORMNZ1
               00171                                 clrc                                                                            ; clear carry bit
               00172 
               00173 _NORM3232A              _@BTFGS                 _F_AARGB0,_F_MSB,_FIXSIGN32     ;       if _F_MSB=1, normalization done
               00174                                 RLF                             _F_AARGB2,F                                     ; otherwise,    shift left and 
               00175                                 RLF                             _F_AARGB1,F                                     ; decrement EXP
               00176                                 RLF                             _F_AARGB0,F
               00177                                 _@DECFGNZ               _F_EXP,F,_NORM3232A
               00178 
               00179                                 _@GOTO                  _SETFUN32                                       ; underflow if  EXP=0
               00180                 endif
               00181 
               00182                 ifdef _DEFNRM4032
               00183                         _@ALIGNPAGE D'95'
               00184 _NRM4032                CLRF                    _F_TEMP                                         ; clear exponent        decrement
               00185                                 MOVFW                   _F_AARGB0                                       ; test if highbyte=0
               00186                                 skpz
               00187                                 GOTO                    _NORM4032
               00188                                 MOVFW                   _F_AARGB1                                       ; if    so,     shift 8 bits by move
               00189                                 MOVWF                   _F_AARGB0
               00190                                 MOVFW                   _F_AARGB2  
               00191                                 MOVWF                   _F_AARGB1
               00192                                 MOVFW                   _F_AARGB3  
               00193                                 MOVWF                   _F_AARGB2
               00194                                 CLRF                    _F_AARGB3
               00195                                 BSF                             _F_TEMP,3                                       ; increase decrement    by 8
               00196 
               00197                                 MOVFW                   _F_AARGB0                                       ; test if highbyte=0
               00198                                 skpz
               00199                                 GOTO                    _NORM4032
               00200                                 MOVFW                   _F_AARGB1                                       ; if    so,     shift 8 bits by move
               00201                                 MOVWF                   _F_AARGB0
               00202                                 MOVFW                   _F_AARGB2  
               00203                                 MOVWF                   _F_AARGB1
               00204                                 CLRF                    _F_AARGB2
               00205                                 BCF                             _F_TEMP,3                                       ; increase decrement    by 8
               00206                                 BSF                             _F_TEMP,4
               00207                 
               00208                                 MOVFW                   _F_AARGB0                                       ; test if highbyte=0
               00209                                 skpz
               00210                                 GOTO                    _NORM4032
               00211                                 MOVFW                   _F_AARGB1                                       ; if    so,     shift 8 bits by move
               00212                                 MOVWF                   _F_AARGB0
               00213                                 CLRF                    _F_AARGB1
               00214                                 BSF                             _F_TEMP,3                                       ; increase decrement    by 8
               00215                 
               00216                                 MOVFW                   _F_AARGB0                                       ; if    highbyte=0,     result=0
               00217                                 _@BTFGS                 STATUS,Z,_RES032
               00218 
               00219 _NORM4032               MOVFW                   _F_TEMP
               00220                                 SUBWF                   _F_EXP,F
               00221                                 skpnz
               00222                                 goto                    _NORMNZ2
               00223                                 _@BTFGC                 STATUS,C,_SETFUN32
               00224 _NORMNZ2
               00225                                 clrc                                                                            ; clear carry bit
               00226 _NORM4032A              BTFSC                   _F_AARGB0,_F_MSB                        ; if _F_MSB=1, normalization done
               00227                                 GOTO                    _NRMRND4032
               00228                                 RLF                             _F_AARGB3,F                                     ; otherwise,    shift left and 
               00229                                 RLF                             _F_AARGB2,F                                     ; decrement EXP
               00230                                 RLF                             _F_AARGB1,F
               00231                                 RLF                             _F_AARGB0,F
               00232                                 DECFSZ                  _F_EXP,F
               00233                                 GOTO                    _NORM4032A
               00234 
               00235                                 _@GOTO                  _SETFUN32                                       ; underflow if  EXP=0
               00236 
               00237 _NRMRND4032             BTFSS                   _F_FPFLAGS,_F_RND
               00238                                 _@GOTO                  _FIXSIGN32
               00239                                 _@BTFGC                 _F_AARGB2,_F_LSB,_FIXSIGN32
               00240                                 _@BTFGC                 _F_AARGB3,_F_MSB,_FIXSIGN32     ;       round if next bit is set
               00241                                 INCF                    _F_AARGB2,F
               00242                                 skpnz
               00243                                 INCF                    _F_AARGB1,F
               00244                                 skpnz
               00245                                 INCF                    _F_AARGB0,F
               00246 
               00247                                 _@BTFGC                 STATUS,Z,_FIXSIGN32                     ; has rounding caused carryout?
               00248                                 RRF                             _F_AARGB0,F                                     ; if    so,     right shift
               00249                                 RRF                             _F_AARGB1,F
               00250                                 RRF                             _F_AARGB2,F
               00251                                 INCF                    _F_EXP,F
               00252                                 _@BTFGS                 STATUS,Z,_SETFOV32                      ; check for     overflow
               00253                                 _@GOTO                  _FIXSIGN32
               00254                 endif
               00255 
               00256                 ifdef _DEFFADD
               00257                         _@ALIGNPAGE D'130'
               00258 _FADDCMD
               00259                                 _@CALL          _SETUPBARG
               00260                                 call                    _FPA32
               00261                                 _@DECSP                 1
               00262                                 _@DONE
               00263 _FPA32                  MOVFW                   _F_AARGB0                                       ; exclusive or of signs in _F_TEMP
               00264                                 XORWF                   _F_BARGB0,W
               00265                                 MOVWF                   _F_TEMP
               00266 
               00267                                 CLRF                    _F_AARGB3                                       ; clear extended        byte
               00268                                 CLRF                    _F_BARGB3
               00269 
               00270                                 MOVFW                   _F_AEXP                                         ; use AARG if _F_AEXP >=        _F_BEXP
               00271                                 SUBWF                   _F_BEXP,W
               00272                                 skpc
               00273                                 GOTO                    _USEA32
               00274 
               00275                                 _@CALL          _FPSWAPARGS
               00276 
               00277 _USEA32                 MOVFW                   _F_BEXP                                         ; return        AARG if BARG = 0
               00278                                 skpnz
               00279                                 RETLW                   0x00
               00280 
               00281                                 MOVFW                   _F_AARGB0
               00282                                 MOVWF                   _F_SIGN                                         ; save sign in SIGN
               00283                                 BSF                             _F_AARGB0,_F_MSB                        ;       make _F_MSB's explicit
               00284                                 BSF                             _F_BARGB0,_F_MSB
               00285 
               00286                                 MOVFW                   _F_BEXP                                         ; compute shift count in        _F_BEXP
               00287                                 SUBWF                   _F_AEXP,W
               00288                                 MOVWF                   _F_BEXP
               00289                                 skpnz
               00290                                 GOTO                    _ALIGNED32
               00291 
               00292                                 MOVLW                   8
               00293                                 SUBWF                   _F_BEXP,W
               00294                                 skpc                                                                            ; if _F_BEXP >= 8, do byte shift
               00295                                 GOTO                    _ALIGNB32
               00296                                 MOVWF                   _F_BEXP
               00297                                 MOVFW                   _F_BARGB2                                       ; keep for postnormalization
               00298                                 MOVWF                   _F_BARGB3
               00299                                 MOVFW                   _F_BARGB1  
               00300                                 MOVWF                   _F_BARGB2
               00301                                 MOVFW                   _F_BARGB0  
               00302                                 MOVWF                   _F_BARGB1
               00303                                 CLRF                    _F_BARGB0
               00304 
               00305                                 MOVLW                   8
               00306                                 SUBWF                   _F_BEXP,W
               00307                                 skpc                                                                            ; if _F_BEXP >= 8, do byte shift
               00308                                 GOTO                    _ALIGNB32
               00309                                 MOVWF                   _F_BEXP
               00310                                 MOVFW                   _F_BARGB2                                       ; keep for postnormalization
               00311                                 MOVWF                   _F_BARGB3
               00312                                 MOVFW                   _F_BARGB1  
               00313                                 MOVWF                   _F_BARGB2
               00314                                 CLRF                    _F_BARGB1
               00315 
               00316                                 MOVLW                   8
               00317                                 SUBWF                   _F_BEXP,W
               00318                                 skpc                                                                            ; if _F_BEXP >= 8, BARG = 0     relative to     AARG
               00319                                 GOTO                    _ALIGNB32
               00320                                 MOVFW                   _F_SIGN  
               00321                                 MOVWF                   _F_AARGB0
               00322                                 RETLW                   0x00
               00323 
               00324 _ALIGNB32               MOVFW                   _F_BEXP                                         ; already aligned if    _F_BEXP = 0
               00325                                 skpnz
               00326                                 GOTO                    _ALIGNED32
               00327 
               00328 _ALOOPB32               clrc                                                                            ; right shift by _F_BEXP
               00329                                 RRF                             _F_BARGB0,F
               00330                                 RRF                             _F_BARGB1,F
               00331                                 RRF                             _F_BARGB2,F
               00332                                 RRF                             _F_BARGB3,F
               00333                                 DECFSZ                  _F_BEXP,F
               00334                                 GOTO                    _ALOOPB32
               00335 
               00336 _ALIGNED32              BTFSS                   _F_TEMP,_F_MSB                          ;       negate if signs opposite
               00337                                 GOTO                    _AOK32
               00338 
               00339                                 COMF                    _F_BARGB3,F
               00340                                 COMF                    _F_BARGB2,F
               00341                                 COMF                    _F_BARGB1,F
               00342                                 COMF                    _F_BARGB0,F
               00343                                 INCF                    _F_BARGB3,F
               00344                                 skpnz
               00345                                 INCF                    _F_BARGB2,F
               00346                                 skpnz
               00347                                 INCF                    _F_BARGB1,F
               00348                                 skpnz
               00349                                 INCF                    _F_BARGB0,F
               00350 
               00351 _AOK32
               00352                                 MOVFW                   _F_BARGB3
               00353                                 ADDWF                   _F_AARGB3,F
               00354                                 MOVFW                   _F_BARGB2
               00355                                 skpnc
               00356                                 INCFSZ                  _F_BARGB2,W
               00357                                 ADDWF                   _F_AARGB2,F
               00358                                 MOVFW                   _F_BARGB1
               00359                                 skpnc
               00360                                 INCFSZ                  _F_BARGB1,W
               00361                                 ADDWF                   _F_AARGB1,F
               00362                                 MOVFW                   _F_BARGB0
               00363                                 skpnc
               00364                                 INCFSZ                  _F_BARGB0,W
               00365                                 ADDWF                   _F_AARGB0,F
               00366 
               00367                                 BTFSC                   _F_TEMP,_F_MSB
               00368                                 GOTO                    _ACOMP32
               00369                                 _@BTFGC                 STATUS,C,_NRMRND4032
               00370 
               00371                                 RRF                             _F_AARGB0,F                                     ;       shift right     and     increment EXP
               00372                                 RRF                             _F_AARGB1,F
               00373                                 RRF                             _F_AARGB2,F
               00374                                 RRF                             _F_AARGB3,F
               00375                 _@INCFGNZ               _F_AEXP,F,_NRMRND4032
               00376                 _@GOTO            _SETFOV32
               00377 
               00378 _ACOMP32                _@BTFGS                 STATUS,C,_NRM4032                       ; normalize and fix sign
               00379 
               00380                                 comf                    _F_AARGB3,F
               00381                                 comf                    _F_AARGB2,F
               00382                                 comf                    _F_AARGB1,F
               00383                                 comf                    _F_AARGB0,F
               00384                                 incf                    _F_AARGB3,F
               00385                                 skpnz
               00386                                 incf                    _F_AARGB2,F
               00387                                 skpnz
               00388                                 incf                    _F_AARGB1,F
               00389                                 skpnz
               00390                                 incf                    _F_AARGB0,F
               00391 
               00392                                 MOVLW                   0x80
               00393                                 XORWF                   _F_SIGN,F
               00394                                 _@GOTO                  _NRM32
               00395                 endif
               00396 
               00397                 ifdef _DEFFSUB
               00398                         _@ALIGNPAGE D'20'
               00399 _FSUBCMD
               00400                                 _@CALL          _SETUPBARG
               00401                                 call                    _FPS32
               00402                                 _@DECSP                 1
               00403                                 _@DONE
               00404 _FPS32                  MOVLW                   0x80
               00405                                 XORWF                   _F_AARGB0,F
               00406                                 _@GOTO                  _FPA32
               00407                 endif
               00408 
               00409                 ifdef _DEFTOFLOAT
               00410                         _@ALIGNPAGE D'40'
               00411 _TOFLOATCMD
               00412                                 movfw                   _F_AARGB2
               00413                                 movwf                   _F_AARGB3
               00414                                 movfw                   _F_AARGB1
               00415                                 movwf                   _F_AARGB2
               00416                                 movfw                   _F_AARGB0
               00417                                 movwf                   _F_AARGB1
               00418                                 movfw                   _F_AEXP
               00419                                 movwf                   _F_AARGB0
               00420                                 call                    _FLO3232
               00421                                 _@DONE
               00422 _FLO3232                MOVLW                   D'31'+_F_EXPBIAS                        ; initialize    exponent and add bias
               00423                                 MOVWF                   _F_EXP
               00424                                 CLRF                    _F_SIGN
               00425                                 _@BTFGC                 _F_AARGB0,_F_MSB,_NRM4032       ;       test sign
               00426 
               00427                                 comf                    _F_AARGB3,F
               00428                                 comf                    _F_AARGB2,F
               00429                                 comf                    _F_AARGB1,F
               00430                                 comf                    _F_AARGB0,F
               00431                                 incf                    _F_AARGB3,F
               00432                                 skpnz
               00433                                 incf                    _F_AARGB2,F
               00434                                 skpnz
               00435                                 incf                    _F_AARGB1,F
               00436                                 skpnz
               00437                                 incf                    _F_AARGB0,F
               00438 
               00439                                 BSF                             _F_SIGN,_F_MSB
               00440                                 _@GOTO                  _NRM4032
               00441                 endif
               00442 
               00443                 ifdef _DEFTOINT
               00444                         _@ALIGNPAGE D'130'
               00445 _TOINTCMD
               00446                                 call                    _INT3232
               00447                                 movfw                   _F_AARGB0
               00448                                 movwf                   _F_AEXP
               00449                                 movfw                   _F_AARGB1
               00450                                 movwf                   _F_AARGB0
               00451                                 movfw                   _F_AARGB2
               00452                                 movwf                   _F_AARGB1
               00453                                 movfw                   _F_AARGB3
               00454                                 movwf                   _F_AARGB2
               00455                                 _@DONE
               00456 _INT3232
               00457                                 CLRF                    _F_AARGB3
               00458                                 MOVFW                   _F_EXP                                     ; test for zero argument
               00459                                 skpnz
               00460                                 RETLW                   0x00
               00461 
               00462                                 MOVFW                   _F_AARGB0                                  ; save sign in SIGN
               00463                                 MOVWF                   _F_SIGN
               00464                                 BSF                             _F_AARGB0,_F_MSB                          ;     make _F_MSB     explicit
               00465 
               00466                                 MOVLW                   _F_EXPBIAS+D'31'                   ; remove     bias from EXP
               00467                                 SUBWF                   _F_EXP,F
               00468                                 _@BTFGC                 _F_EXP,_F_MSB,_SETIOV32
               00469                                 COMF                    _F_EXP,F
               00470                                 INCF                    _F_EXP,F                
               00471 
               00472                                 MOVLW                   8                                               ; do byte shift if EXP >= 8
               00473                                 SUBWF                   _F_EXP,W
               00474                                 skpc
               00475                                 GOTO                    _TSHIFT3232
               00476                                 MOVWF                   _F_EXP
               00477                                 RLF                             _F_AARGB3,F                                ; rotate     next bit for rounding
               00478                                 MOVFW                   _F_AARGB2  
               00479                                 MOVWF                   _F_AARGB3
               00480                                 MOVFW                   _F_AARGB1  
               00481                                 MOVWF                   _F_AARGB2
               00482                                 MOVFW                   _F_AARGB0  
               00483                                 MOVWF                   _F_AARGB1
               00484                                 CLRF                    _F_AARGB0
               00485 
               00486                                 MOVLW                   8                                               ; do another byte shift if EXP >= 8
               00487                                 SUBWF                   _F_EXP,W
               00488                                 skpc
               00489                                 GOTO                    _TSHIFT3232
               00490                                 MOVWF                   _F_EXP
               00491                                 RLF                             _F_AARGB3,F                                ; rotate     next bit for rounding
               00492                                 MOVFW                   _F_AARGB2  
               00493                                 MOVWF                   _F_AARGB3
               00494                                 MOVFW                   _F_AARGB1  
               00495                                 MOVWF                   _F_AARGB2
               00496                                 CLRF                    _F_AARGB1
               00497 
               00498                                 MOVLW                   8                                               ; do another byte shift if EXP >= 8
               00499                                 SUBWF                   _F_EXP,W
               00500                                 skpc
               00501                                 GOTO                    _TSHIFT3232
               00502                                 MOVWF                   _F_EXP
               00503                                 RLF                             _F_AARGB3,F                                ; rotate     next bit for rounding
               00504                                 MOVFW                   _F_AARGB2  
               00505                                 MOVWF                   _F_AARGB3
               00506                                 CLRF                    _F_AARGB2
               00507 
               00508                                 MOVLW                   8                                               ; do another byte shift if EXP >= 8
               00509                                 SUBWF                   _F_EXP,W
               00510                                 skpc
               00511                                 GOTO                    _TSHIFT3232
               00512                                 MOVWF                   _F_EXP
               00513                                 RLF                             _F_AARGB3,F                                ; rotate     next bit for rounding
               00514                                 CLRF                    _F_AARGB3
               00515                                 MOVFW                   _F_EXP
               00516                                 skpz
               00517                                 clrc
               00518                                 GOTO                    _SHIFT3232OK
               00519 
               00520 _TSHIFT3232             MOVFW                   _F_EXP                                     ; shift completed if EXP     = 0
               00521                                 skpnz
               00522                                 GOTO                    _SHIFT3232OK
               00523 
               00524 _SHIFT3232              clrc                            
               00525                                 RRF                             _F_AARGB0,F                                ; right shift by     EXP
               00526                                 RRF                             _F_AARGB1,F
               00527                                 RRF                             _F_AARGB2,F
               00528                                 RRF                             _F_AARGB3,F
               00529                                 DECFSZ                  _F_EXP,F
               00530                                 GOTO                    _SHIFT3232
               00531 
               00532 _SHIFT3232OK    BTFSC                   _F_FPFLAGS,_F_RND
               00533                                 BTFSS                   _F_AARGB3,_F_LSB
               00534                                 GOTO                    _INT3232OK
               00535                                 skpc
               00536                                 GOTO                    _INT3232OK
               00537                                 INCF                    _F_AARGB3,F
               00538                                 skpnz
               00539                                 INCF                    _F_AARGB2,F
               00540                                 skpnz
               00541                                 INCF                    _F_AARGB1,F
               00542                                 skpnz
               00543                                 INCF                    _F_AARGB0,F
               00544                                 _@BTFGS                 _F_AARGB0,_F_MSB,_SETIOV32      ;       test for overflow
               00545 
               00546 _INT3232OK              BTFSS                   _F_SIGN,_F_MSB                            ;     if sign bit     set, negate                               
               00547                                 RETLW                   0
               00548 
               00549                                 comf                    _F_AARGB3,F
               00550                                 comf                    _F_AARGB2,F
               00551                                 comf                    _F_AARGB1,F
               00552                                 comf                    _F_AARGB0,F
               00553                                 incf                    _F_AARGB3,F
               00554                                 skpnz
               00555                                 incf                    _F_AARGB2,F
               00556                                 skpnz
               00557                                 incf                    _F_AARGB1,F
               00558                                 skpnz
               00559                                 incf                    _F_AARGB0,F
               00560 
               00561                                 RETLW                   0
               00562 
               00563 _IRES032                CLRF                    _F_AARGB0                                  ; integer result     equals zero
               00564                                 CLRF                    _F_AARGB1
               00565                                 CLRF                    _F_AARGB2
               00566                                 CLRF                    _F_AARGB3
               00567                                 RETLW                   0
               00568                 endif
               00569 
               00570                 ifdef _DEFFMUL
               00571                         _@ALIGNPAGE D'100'
               00572 _FMULCMD
               00573                                 _@CALL          _SETUPBARG
               00574                                 call                    _FPM32
               00575                                 _@DECSP                 1
               00576                                 _@DONE
               00577 _FPM32                  MOVFW                   _F_AEXP                                    ; test for zero arguments
               00578                                 skpz
               00579                                 MOVFW                   _F_BEXP
               00580                                 _@BTFGS                 STATUS,Z,_RES032
               00581 
               00582 _M32BNE0                MOVFW                   _F_AARGB0
               00583                                 XORWF                   _F_BARGB0,W
               00584                                 MOVWF                   _F_SIGN                                    ; save sign in SIGN
               00585 
               00586                                 MOVFW                   _F_BEXP
               00587                                 ADDWF                   _F_EXP,F
               00588                                 MOVLW                   _F_EXPBIAS-1
               00589                                 skpc
               00590                                 GOTO                    _MTUN32
               00591 
               00592                                 SUBWF                   _F_EXP,F
               00593                                 _@BTFGS                 STATUS,C,_SETFOV32                      ; set multiply  overflow flag
               00594                                 GOTO                    _MOK32
               00595 
               00596 _MTUN32                 SUBWF                   _F_EXP,F
               00597                                 _@BTFGC                 STATUS,C,_SETFUN32
               00598 
               00599 _MOK32                  MOVFW                   _F_AARGB0
               00600                                 MOVWF                   _F_AARGB3
               00601                                 MOVFW                   _F_AARGB1
               00602                                 MOVWF                   _F_AARGB4
               00603                                 MOVFW                   _F_AARGB2
               00604                                 MOVWF                   _F_AARGB5
               00605                                 BSF                             _F_AARGB3,_F_MSB                          ;     make argument _F_MSB's explicit
               00606                                 BSF                             _F_BARGB0,_F_MSB
               00607                                 clrc
               00608                                 CLRF                    _F_AARGB0                                  ; clear initial partial product
               00609                                 CLRF                    _F_AARGB1
               00610                                 CLRF                    _F_AARGB2
               00611                                 MOVLW                   D'24'
               00612                                 MOVWF                   _F_TEMP                                    ; initialize counter
               00613 
               00614 _MLOOP32                BTFSS                   _F_AARGB5,_F_LSB                          ;     test next bit
               00615                                 GOTO                    _MNOADD32
               00616 
               00617 _MADD32                 MOVFW                   _F_BARGB2
               00618                                 ADDWF                   _F_AARGB2,F
               00619                                 MOVFW                   _F_BARGB1
               00620                                 skpnc
               00621                                 INCFSZ                  _F_BARGB1,W
               00622                                 ADDWF                   _F_AARGB1,F
               00623 
               00624                                 MOVFW                   _F_BARGB0
               00625                                 skpnc
               00626                                 INCFSZ                  _F_BARGB0,W
               00627                                 ADDWF                   _F_AARGB0,F
               00628 
               00629 _MNOADD32               RRF                             _F_AARGB0,F
               00630                                 RRF                             _F_AARGB1,F
               00631                                 RRF                             _F_AARGB2,F
               00632                                 RRF                             _F_AARGB3,F
               00633                                 RRF                             _F_AARGB4,F
               00634                                 RRF                             _F_AARGB5,F
               00635                                 clrc
               00636                                 DECFSZ                  _F_TEMP,F
               00637                                 GOTO                    _MLOOP32
               00638 
               00639                                 BTFSC                   _F_AARGB0,_F_MSB                           ; check for postnormalization
               00640                                 GOTO                    _MROUND32
               00641                                 RLF                             _F_AARGB3,F
               00642                                 RLF                             _F_AARGB2,F
               00643                                 RLF                             _F_AARGB1,F
               00644                                 RLF                             _F_AARGB0,F
               00645                                 DECF                    _F_EXP,F
               00646 
               00647 _MROUND32               BTFSC                   _F_FPFLAGS,_F_RND
               00648                                 BTFSS                   _F_AARGB2,_F_LSB
               00649                                 GOTO                    _MUL32OK
               00650                                 BTFSS                   _F_AARGB3,_F_MSB
               00651                                 GOTO                    _MUL32OK
               00652                                 INCF                    _F_AARGB2,F
               00653                                 skpnz
               00654                                 INCF                    _F_AARGB1,F
               00655                                 skpnz
               00656                                 INCF                    _F_AARGB0,F
               00657 
               00658                                 skpz                                                                    ; has rounding caused carryout?
               00659                                 GOTO                    _MUL32OK
               00660                                 RRF                             _F_AARGB0,F                             ; if    so,     right shift
               00661                                 RRF                             _F_AARGB1,F
               00662                                 RRF                             _F_AARGB2,F
               00663                                 INCF                    _F_EXP,F
               00664                                 _@BTFGS                 STATUS,Z,_SETFOV32              ; check for     overflow
               00665 
               00666 _MUL32OK                BTFSS                   _F_SIGN,_F_MSB
               00667                                 BCF                             _F_AARGB0,_F_MSB                ;       clear explicit _F_MSB if positive
               00668 
               00669                                 RETLW                   0  
               00670                 endif
               00671 
               00672                 ifdef _DEFFDIV
               00673                         _@ALIGNPAGE D'170'
               00674 _FDIVCMD
               00675                                 _@CALL                  _SETUPBARG
               00676                                 _@CALL          _FPSWAPARGS
               00677                                 call                    _FPD32
               00678                                 _@DECSP                 1
               00679                                 _@DONE
               00680 _FPD32                  MOVFW                   _F_BEXP                                    ; test for divide by zero
               00681                                 _@BTFGS                 STATUS,Z,_SETFDZ32
               00682 
               00683                                 MOVFW                   _F_AEXP
               00684                                 _@BTFGS                 STATUS,Z,_RES032
               00685 
               00686 _D32BNE0                MOVFW                   _F_AARGB0
               00687                                 XORWF                   _F_BARGB0,W
               00688                                 MOVWF                   _F_SIGN                                    ; save sign in SIGN
               00689                                 BSF                             _F_AARGB0,_F_MSB                          ;     make argument _F_MSB's explicit
               00690                                 BSF                             _F_BARGB0,_F_MSB
               00691 
               00692 _TALIGN32               CLRF                    _F_TEMP                                    ; clear align increment
               00693                                 MOVFW                   _F_AARGB0  
               00694                                 MOVWF                   _F_AARGB3                                  ; test for alignment
               00695                                 MOVFW                   _F_AARGB1  
               00696                                 MOVWF                   _F_AARGB4
               00697                                 MOVFW                   _F_AARGB2  
               00698                                 MOVWF                   _F_AARGB5
               00699 
               00700                                 MOVFW                   _F_BARGB2
               00701                                 SUBWF                   _F_AARGB5,F
               00702                                 MOVFW                   _F_BARGB1
               00703                                 skpc
               00704                                 INCFSZ                  _F_BARGB1,W
               00705 
               00706 _TS1ALIGN32             SUBWF                   _F_AARGB4,F
               00707                                 MOVFW                   _F_BARGB0
               00708                                 skpc
               00709                                 INCFSZ                  _F_BARGB0,W
               00710 
               00711 _TS2ALIGN32             SUBWF                   _F_AARGB3,F
               00712 
               00713                                 CLRF                    _F_AARGB3
               00714                                 CLRF                    _F_AARGB4
               00715                                 CLRF                    _F_AARGB5
               00716 
               00717                                 skpc
               00718                                 GOTO                    _DALIGN32OK
               00719 
               00720                                 clrc                                                                    ; align if necessary
               00721                                 RRF                             _F_AARGB0,F
               00722                                 RRF                             _F_AARGB1,F
               00723                                 RRF                             _F_AARGB2,F
               00724                                 RRF                             _F_AARGB3,F
               00725                                 MOVLW                   0x01
               00726                                 MOVWF                   _F_TEMP                                    ; save align increment                  
               00727 
               00728 _DALIGN32OK             MOVFW                   _F_BEXP                                    ; compare _F_AEXP and _F_BEXP
               00729                                 SUBWF                   _F_EXP,F
               00730                                 skpc
               00731                                 GOTO                    _ALTB32
               00732                 
               00733 _AGEB32                 MOVLW                   _F_EXPBIAS-1
               00734                                 ADDWF                   _F_TEMP,W
               00735                                 ADDWF                   _F_EXP,F
               00736                                 _@BTFGS                 STATUS,C,_SETFOV32
               00737                                 GOTO                    _DARGOK32                                ; set overflow flag
               00738 
               00739 _ALTB32                 MOVLW                   _F_EXPBIAS-1
               00740                                 ADDWF                   _F_TEMP,W
               00741                                 ADDWF                   _F_EXP,F
               00742                                 _@BTFGC                 STATUS,C,_SETFUN32                               ; set underflow flag
               00743 
               00744 _DARGOK32               MOVLW                   D'24'                                   ; initialize counter
               00745                                 MOVWF                   _F_TEMPB1
               00746 
               00747 _DLOOP32                RLF                             _F_AARGB5,F                                ; left shift
               00748                                 RLF                             _F_AARGB4,F
               00749                                 RLF                             _F_AARGB3,F
               00750                                 RLF                             _F_AARGB2,F
               00751                                 RLF                             _F_AARGB1,F
               00752                                 RLF                             _F_AARGB0,F
               00753                                 RLF                             _F_TEMP,F
               00754 
               00755                                 MOVFW                   _F_BARGB2                                  ; subtract
               00756                                 SUBWF                   _F_AARGB2,F
               00757                                 MOVFW                   _F_BARGB1
               00758                                 skpc
               00759                                 INCFSZ                  _F_BARGB1,W
               00760 _DS132                  SUBWF                   _F_AARGB1,F
               00761 
               00762                                 MOVFW                   _F_BARGB0
               00763                                 skpc
               00764                                 INCFSZ                  _F_BARGB0,W
               00765 _DS232                  SUBWF                   _F_AARGB0,F
               00766 
               00767                                 RLF                             _F_BARGB0,W
               00768                                 IORWF                   _F_TEMP,F
               00769                                 
               00770                                 BTFSS                   _F_TEMP,_F_LSB                            ;     test for restore
               00771                                 GOTO                    _DREST32
               00772 
               00773                                 BSF                             _F_AARGB5,_F_LSB
               00774                                 GOTO                    _DOK32
               00775 
               00776 _DREST32                MOVFW                   _F_BARGB2                                  ; restore if necessary
               00777                                 ADDWF                   _F_AARGB2,F
               00778                                 MOVFW                   _F_BARGB1
               00779                                 skpnc
               00780                                 INCFSZ                  _F_BARGB1,W
               00781 _DAREST32               ADDWF                   _F_AARGB1,F
               00782 
               00783                                 MOVFW                   _F_BARGB0
               00784                                 skpnc
               00785                                 INCF                    _F_BARGB0,W
               00786                                 ADDWF                   _F_AARGB0,F
               00787 
               00788                                 BCF                             _F_AARGB5,_F_LSB
               00789 
               00790 _DOK32                  DECFSZ                  _F_TEMPB1,F
               00791                                 GOTO                    _DLOOP32
               00792 
               00793 _DROUND32               BTFSC                   _F_FPFLAGS,_F_RND
               00794                                 BTFSS                   _F_AARGB5,_F_LSB
               00795                                 GOTO                    _DIV32OK
               00796                                 clrc
               00797                                 RLF                             _F_AARGB2,F                               ;     compute next significant bit
               00798                                 RLF                             _F_AARGB1,F                               ;     for     rounding
               00799                                 RLF                             _F_AARGB0,F
               00800                                 RLF                             _F_TEMP,F
               00801 
               00802                                 MOVFW                   _F_BARGB2                                 ;     subtract
               00803                                 SUBWF                   _F_AARGB2,F
               00804                                 MOVFW                   _F_BARGB1
               00805                                 skpc
               00806                                 INCFSZ                  _F_BARGB1,W
               00807                                 SUBWF                   _F_AARGB1,F
               00808 
               00809                                 MOVFW                   _F_BARGB0
               00810                                 skpc
               00811                                 INCFSZ                  _F_BARGB0,W
               00812                                 SUBWF                   _F_AARGB0,F
               00813 
               00814                                 RLF                             _F_BARGB0,W
               00815                                 IORWF                   _F_TEMP,W
               00816                                 ANDLW                   0x01                    
               00817 
               00818                                 ADDWF                   _F_AARGB5,F
               00819                                 skpnc
               00820                                 INCF                    _F_AARGB4,F
               00821                                 skpnz
               00822                                 INCF                    _F_AARGB3,F
               00823 
               00824                                 skpz                                                                    ; test if rounding caused carryout
               00825                                 GOTO                    _DIV32OK
               00826                                 RRF                             _F_AARGB3,F
               00827                                 RRF                             _F_AARGB4,F
               00828                                 RRF                             _F_AARGB5,F
               00829                                 INCF                    _F_EXP,F
               00830                                 skpnz                                                                   ; test for overflow
               00831                                 _@BTFGS                 STATUS,Z,_SETFOV32
               00832 
               00833 _DIV32OK                BTFSS                   _F_SIGN,_F_MSB
               00834                                 BCF                             _F_AARGB3,_F_MSB                          ;     clear explicit _F_MSB if positive
               00835 
               00836                                 MOVFW                   _F_AARGB3  
               00837                                 MOVWF                   _F_AARGB0                                  ; move result to     AARG
               00838                                 MOVFW                   _F_AARGB4  
               00839                                 MOVWF                   _F_AARGB1
               00840                                 MOVFW                   _F_AARGB5  
               00841                                 MOVWF                   _F_AARGB2
               00842 
               00843                                 RETLW                   0
               00844                 endif
               00845 
               00100 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB54AB~1.LIB" ;mbasic14\mbasicenh.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFSTR_GETVAL
               00004 _STR_GETVAL
               00005                         movfw   _WORK+9
               00006                         movwf   _WORK
               00007                         clrf    _WORK+1
               00008                         movfw   _WORK+4
               00009                         movwf   _CMD
               00010                         movfw   _WORK+5
               00011                         movwf   _CMD+1
               00012                         _@CALL  _ADDRESSARRAY_LET
               00013                         _@GOTO  _VALCMD
               00014         endif
               00015 
               00016         ifdef _DEFSTR_SETVAL
               00017 _STR_SETVAL
               00018                         movfw   _WORK+9
               00019                         movwf   _WORK
               00020                         clrf    _WORK+1
               00021                         movfw   _WORK+4
               00022                         movwf   _CMD
               00023                         movfw   _WORK+5
               00024                         movwf   _CMD+1
               00025                         _@CALL  _ADDRESSARRAY_LET
               00026                         _@GOTO  _LETFUNC
               00027         endif
               00028 
               00029         ifdef _DEFENHPACKROTNIB
               00030 _ENHPACKROTNIB
               00031                         swapf   _WORK+8,F
               00032                         movlw   0xF0
               00033                         andwf   _WORK+8,F
               00034                         swapf   _WORK+7,F
               00035                         movlw   0x0F
               00036                         andwf   _WORK+7,w
               00037                         iorwf   _WORK+8,F
               00038                         movlw   0xF0
               00039                         andwf   _WORK+7,F
               00040                         swapf   _WORK+6,F
               00041                         movlw   0x0F
               00042                         andwf   _WORK+6,w
               00043                         iorwf   _WORK+7,F
               00044                         movlw   0xF0
               00045                         andwf   _WORK+6,F
               00046                         swapf   _WORK+5,F
               00047                         movlw   0x0F
               00048                         andwf   _WORK+5,w
               00049                         iorwf   _WORK+6,F
               00050                         movlw   0xF0
               00051                         andwf   _WORK+5,F
               00052                         swapf   _WORK+4,F
               00053                         movlw   0x0F
               00054                         andwf   _WORK+4,w
               00055                         iorwf   _WORK+5,F
               00056                         movlw   0xF0
               00057                         andwf   _WORK+4,F
               00058                         return
               00059         endif
               00060 
               00061         ifdef _DEFENHPUT
               00062 _ENHPUT
               00063                         movwf   _WORK
               00064                         clrf    _WORK+1
               00065                         clrf    _WORK+2
               00066                         clrf    _WORK+3
               00067                         movfw   _WORK+11
               00068                         _@CALLFIXED     _CALLCMD
               00069                         return
               00070         endif
               00071 
               00072         ifdef _DEFENHGET_CMD_FLAG
               00073 _ENHGET_CMD_FLAG
               00074                         _@GETCMD ;FLAG
               00075                         movwf   _WORK+10
               00076                         _@GETCMD ;CMD
               00077                         movwf   _WORK+11
               00078                                                 clrf    _WORK+4
               00079                                                 clrf    _WORK+5
               00080                                                 clrf    _WORK+6
               00081                                                 clrf    _WORK+7
               00082                                                 clrf    _WORK+8
               00083                                                 return
               00084         endif
               00085 
               00086         ifdef _DEFENH_CONSTROUT
               00087         _@ALIGNPAGE D'40'
               00088 _ENH_CONSTROUT
               00089                         movwf   _WORK+8
               00090 _enh_constroutlp
               00091                         btfss   _WORK+8,0
               00092                         goto    _enh_constrout_testword
               00093                         _@GETCMD ;Chr
               00094                         movwf   _WORK
               00095                         clrf    _WORK+1
               00096                         clrf    _WORK+2
               00097                         clrf    _WORK+3
               00098                         goto    _enh_constrout_finish
               00099 _enh_constrout_testword
               00100                         btfss   _WORK+8,1
               00101                         goto    _enh_constrout_testlong
               00102                         _@GETCMD ;Chr
               00103                         movwf   _WORK+1
               00104                         _@GETCMD ;Chr
               00105                         movwf   _WORK
               00106                         clrf    _WORK+2
               00107                         clrf    _WORK+3
               00108                         goto    _enh_constrout_finish
               00109 _enh_constrout_testlong
               00110                         _@GETCMD ;Chr
               00111                         movwf   _WORK+3
               00112                         _@GETCMD ;Chr
               00113                         movwf   _WORK+2
               00114                         _@GETCMD ;Chr
               00115                         movwf   _WORK+1
               00116                         _@GETCMD ;Chr
               00117                         movwf   _WORK
               00118 _enh_constrout_finish
               00119                         movfw   _WORK+11
               00120                         _@CALLFIXED     _CALLCMD
               00121                         decfsz  _WORK+9,F
               00122                         incf    _WORK+10,F
               00123                         decfsz  _WORK+10,F
               00124                         goto    _enh_constroutlp
               00125                                                 _@DONE
               00126         endif
               00127 
               00128         ifdef _DEFENH_CMD_CNT
               00129 _ENH_CMD_CNT
               00130                         _@GETCMD ;CMD
               00131                         movwf   _WORK+11
               00132                         _@GETCMD ;HICNT
               00133                         addlw   1
               00134                         movwf   _WORK+10
               00135                         _@GETCMD ;LoCnt
               00136                         movwf   _WORK+9
               00137                         return
               00138         endif
               00139 
               00140         ifdef _DEFENH_STRSETUP
               00141 _ENH_STRSETUP
               00142                         _@CALL  _POPCMD ;EOLCHR
               00143                         movfw   _WORK
               00144                         movwf   _WORK+8
               00145                         _@CALL  _POPCMD ;CNT
               00146                         movfw   _WORK
               00147                         movwf   _WORK+6
               00148                         incf    _WORK+1,w
               00149                         movwf   _WORK+7
               00150                         _@CALL  _POPCMD ;ADDRESS
               00151                         movfw   _WORK
               00152                         movwf   _WORK+4
               00153                         movfw   _WORK+1
               00154                         movwf   _WORK+5
               00155                         _@GETCMD ;CMD
               00156                         movwf   _WORK+11
               00157                         clrf    _WORK+9 ;INDEX
               00158                         return
               00159         endif
               00160 
               00161         ifdef _DEFENHGET_CNT_CMD
               00162 _ENHGET_CNT_CMD
               00163                         _@GETCMD
               00164                         movwf   _WORK+10;cnt
               00165                         _@GETCMD
               00166                         movwf   _WORK+11;cmd
               00167                         return
               00168         endif
               00169 
               00170         ifdef _DEFENHGET_INDICATE
               00171 _ENHGET_INDICATE
               00172                         btfss   _WORK+10,6
               00173                         return
               00174                         movwf   _WORK+9
               00175 _enhget_indicatelp
               00176                         movfw   _WORK+11
               00177                         _@CALLFIXED     _CALLCMD
               00178                         movfw   _STACK
               00179                         subwf   _WORK+9,W
               00180                         _@BTFGC STATUS,Z,_enhget_indicatelp
               00181                         clrf    _WORK+9 
               00182                         return
               00183         endif
               00184 
               00185         ifdef _DEFENHINDICATE
               00186 _ENHINDICATE
               00187                         btfss   _WORK+10,6
               00188                         return
               00189                         _@CALL  _ENHPUT
               00190                         return
               00191         endif
               00192 
               00193         ifdef _DEFENHSIGN
               00194 _ENHSIGN
               00195                         _@CALL  _POPCMD
               00196                         btfss   _WORK+10,7
               00197                         return
               00198                         btfss   _WORK+3,7
               00199                         return
               00200                         _@CALL  _NEGCMD
               00201                         _@CALL  _PUSHCMD
               00202                         movlw   "-"
               00203                         _@CALL  _ENHPUT
               00204                         _@CALL  _POPCMD
               00205                         return
               00206         endif
               00207 
               00208         ifdef _DEFENHPACKOUT
               00209         _@ALIGNPAGE D'50'
               00210 _ENHPACKOUT
               00211                         movlw   h'3f'
               00212                         andwf   _WORK+10,F
               00213                                                 movlw   10
               00214                                                 movwf   _WORK+9
               00215 _packlp1
               00216                                                 movfw   _WORK+10
               00217                                                 subwf   _WORK+9,w
               00218                                                 skpnz
               00219                                                 goto    _packlp2
               00220                                                 _@CALL  _ENHPACKROTNIB
               00221                         decfsz  _WORK+9,F
               00222                         goto    _packlp1
               00223 _packlp2
               00224                         movfw   _CMD+2          ;Test for Ncount
               00225                         subwf   _WORK+10,W
               00226                         skpnz
               00227                         goto    _packlp3
               00228                         swapf   _WORK+8,w       ;Test for Zero
               00229                         andlw   H'0F'
               00230                         skpz
               00231                         goto    _packstart
               00232                                                 _@CALL  _ENHPACKROTNIB
               00233                         decfsz  _WORK+10,F
               00234                         goto    _packlp2
               00235                         incf    _WORK+10,F
               00236                         clrf    _WORK+8
               00237 _packlp3
               00238                         swapf   _WORK+8,w
               00239                         andlw   H'0F'
               00240 _packstart
               00241                         movwf   _WORK+9
               00242                                                 addlw   -10
               00243                                                 movlw   "0"
               00244                                                 skpnc
               00245                                                 movlw   "A"-10
               00246                         addwf   _WORK+9,w
               00247                         _@CALL  _ENHPUT
               00248                                                 _@CALL  _ENHPACKROTNIB
               00249                         decfsz  _WORK+10,F
               00250                         goto    _packlp3
               00251                         return
               00252         endif
               00253 
               00101 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB1BE1~1.LIB" ;mbasic14\mbasicnummod.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFDECOUTFUNC
               00004 _DECOUTFUNC
               00005                         _@CALL  _PUSHCMD
               00006                         _@CALL  _ENHGET_CNT_CMD
               00007                         _@CALL  _ENHSIGN
               00008                         _@CALL  _BIN2BCDFUNC
               00009                         _@CALL  _ENHPACKOUT
               00010                         return
               00011         endif
               00012 
               00013         ifdef _DEFNDECOUT
               00014 _NDECOUTCMD
               00015                         movfw   _WORK
               00016                         movwf   _CMD+2
               00017                         _@CALL  _POPCMD
               00018                         _@GOTO  _DECOUTFUNC
               00019         endif
               00020 
               00021         ifdef _DEFDECOUT
               00022 _DECOUTCMD
               00023                         clrf    _CMD+2         
               00024                         _@GOTO  _DECOUTFUNC
               00025         endif
               00026 
               00027         ifdef _DEFHEXOUTFUNC
               00028 _HEXOUTFUNC
               00029                         _@CALL  _PUSHCMD
               00030                         _@CALL  _ENHGET_CNT_CMD
               00031                         movlw   "$"
               00032                         _@CALL  _ENHINDICATE
               00033                         _@CALL  _ENHSIGN
               00034                         movlw   _WORK+4
               00035                         _@CALL  _SWAPWORK_VAR
               00036                         clrf    _WORK+8
               00037                         _@CALL  _ENHPACKOUT
               00038                         return
               00039         endif
               00040 
               00041         ifdef _DEFNHEXOUT
               00042 _NHEXOUTCMD
               00043                         movfw   _WORK
               00044                         movwf   _CMD+2
               00045                         _@CALL  _POPCMD
               00046                         _@GOTO  _HEXOUTFUNC
               00047         endif
               00048 
               00049         ifdef _DEFHEXOUT
               00050 _HEXOUTCMD
               00051                         clrf    _CMD+2         
               00052                         _@GOTO  _HEXOUTFUNC
               00053         endif
               00054 
               00055         ifdef _DEFBINOUTFUNC
               00056                         _@ALIGNPAGE D'70'
               00057 _BINOUTFUNC
               00058                         _@CALL  _PUSHCMD
               00059                         _@CALL  _ENHGET_CNT_CMD
               00060                         movlw   "%"
               00061                         _@CALL  _ENHINDICATE
               00062                         _@CALL  _ENHSIGN
               00063                         movlw   _WORK+4
               00064                         _@CALL  _SWAPWORK_VAR
               00065                         clrf    _WORK+8
               00066 
               00067                         movlw   h'3f'
               00068                         andwf   _WORK+10,F
               00069                         movlw   -32
               00070                         addwf   _WORK+10,w
               00071                         movwf   _WORK+9
               00072                         skpnz
               00073                         goto    _binoutlp2
               00074 _binoutlp1
               00075                         rlf     _WORK+4,F
               00076                         rlf     _WORK+5,F
               00077                         rlf     _WORK+6,F
               00078                         rlf     _WORK+7,F
               00079                         incfsz  _WORK+9,F
               00080                         goto    _binoutlp1
               00081                                                 skpnc
               00082                                                 goto    _binoutstart
               00083 _binoutlp2
               00084                         movfw   _CMD+2
               00085                         subwf   _WORK+10,W
               00086                         skpnz
               00087                         goto    _binoutlp3
               00088                         rlf     _WORK+4,F
               00089                         rlf     _WORK+5,F
               00090                         rlf     _WORK+6,F
               00091                         rlf     _WORK+7,F
               00092                         skpnc
               00093                         goto    _binoutstart
               00094                         decfsz  _WORK+10,F
               00095                         goto    _binoutlp2
               00096                         incf    _WORK+10,F
               00097                         goto    _binoutstart
               00098 _binoutlp3
               00099                         rlf     _WORK+4,F
               00100                         rlf     _WORK+5,F
               00101                         rlf     _WORK+6,F
               00102                         rlf     _WORK+7,F
               00103 _binoutstart
               00104                         movlw   "0"
               00105                         skpnc
               00106                         movlw   "1"
               00107                         _@CALL  _ENHPUT
               00108                         decfsz  _WORK+10,F
               00109                         goto    _binoutlp3
               00110                                                 _@DONE
               00111         endif
               00112 
               00113         ifdef _DEFNBINOUT
               00114 _NBINOUTCMD
               00115                         movfw   _WORK
               00116                         movwf   _CMD+2
               00117                         _@CALL  _POPCMD
               00118                         _@GOTO  _BINOUTFUNC
               00119         endif
               00120 
               00121         ifdef _DEFBINOUT
               00122 _BINOUTCMD
               00123                         clrf    _CMD+2
               00124                         _@GOTO  _BINOUTFUNC
               00125         endif
               00126 
               00127         ifdef _DEFREALOUT
               00128                         _@ALIGNPAGE D'120'
               00129 _REALOUTCMD
               00130                         movlw   _WORK+4         ;Save Fraction Count
               00131                         _@CALL  _SWAPWORK_VAR
               00132                         _@CALL  _POPCMD
               00133 
               00134                         movlw   _WORK+4         ;Save Fraction
               00135                         _@CALL  _SWAPWORK_VAR
               00136 
               00137                         _@CALL  _PUSHCMD        ;Push Fraction Count
               00138 
               00139                         _@CALL  _ENHGET_CNT_CMD
               00140 
               00141                         btfss   _WORK+6,7
               00142                         goto    _real_skip_sign
               00143                         movlw   "-"
               00144                         _@CALL  _ENHPUT         ;Send decimal point
               00145 _real_skip_sign                        
               00146                         _@CALL  _CLRWCMD
               00147                         bsf     _WORK+6,7       ;Set Implicit MSB
               00148                         movlw   H'81'-23        ;Get Exponent
               00149                         addwf   _WORK+7,F
               00150 _real_lp
               00151                         clrc                    ;Convert Exponent
               00152                         rrf     _WORK+6,F
               00153                         rrf     _WORK+5,F
               00154                         rrf     _WORK+4,F
               00155                         rrf     _WORK+3,F
               00156                         rrf     _WORK+2,F
               00157                         rrf     _WORK+1,F
               00158                         rrf     _WORK+0,F
               00159                         incfsz  _WORK+7,F
               00160                         goto    _real_lp
               00161 _real_integer
               00162                         _@CALL  _PUSHCMD
               00163                                                 movlw   _WORK+4
               00164                         _@CALL  _SWAPWORK_VAR
               00165                                                 _@CALL  _BIN2BCDFUNC
               00166                                                 clrf    _CMD+2
               00167                                                 _@CALL  _ENHPACKOUT
               00168 
               00169                         movlw   "."
               00170                         _@CALL  _ENHPUT         ;Send decimal point
               00171 
               00172                         _@CALL  _POPCMD
               00173                         movlw   _WORK+4
               00174                         _@CALL  _SWAPWORK_VAR
               00175                         _@CALL  _POPCMD
               00176                         movfw   _WORK
               00177                         movwf   _WORK+10
               00178                         movlw   _WORK+4
               00179                         _@CALL  _SWAPWORK_VAR
               00180 _real_out
               00181                         clrf    _WORK+8
               00182                         clrc
               00183                         rlf     _WORK+0,W
               00184                         movwf   _WORK+4
               00185                         rlf     _WORK+1,W
               00186                         movwf   _WORK+5
               00187                         rlf     _WORK+2,W
               00188                         movwf   _WORK+6
               00189                         rlf     _WORK+3,W
               00190                         movwf   _WORK+7
               00191                         rlf     _WORK+8,F
               00192                         clrc
               00193                         rlf     _WORK+4,F
               00194                         rlf     _WORK+5,F
               00195                         rlf     _WORK+6,F
               00196                         rlf     _WORK+7,F
               00197                         rlf     _WORK+8,F
               00198 
               00199                         movf    _WORK+0,w
               00200                         addwf   _WORK+4,f
               00201 
               00202                         movf    _WORK+1,w
               00203                         skpnc
               00204                          incfsz _WORK+1,w
               00205                           addwf _WORK+5,f
               00206 
               00207                         movf    _WORK+2,w
               00208                         skpnc
               00209                          incfsz _WORK+2,w
               00210                           addwf _WORK+6,f
               00211 
               00212                         movf    _WORK+3,w
               00213                         skpnc
               00214                          incfsz _WORK+3,w
               00215                           addwf _WORK+7,f
               00216 
               00217                         skpnc
               00218                          incfsz _WORK+8,F
               00219 
               00220                         clrc
               00221                         rlf     _WORK+4,F
               00222                         rlf     _WORK+5,F
               00223                         rlf     _WORK+6,F
               00224                         rlf     _WORK+7,F
               00225                         rlf     _WORK+8,F
               00226 
               00227                         movfw   _WORK+8
               00228                         addlw   "0"     ;Convert to ASCII
               00229                         _@CALL  _ENHPUT
               00230 
               00231                         movlw   _WORK+4
               00232                         _@CALL  _SWAPWORK_VAR ;Copy Fraction Back
               00233 
               00234                         decfsz  _WORK+10,F
               00235                         goto    _real_out
               00236                                                 _@DONE
               00237         endif
               00238 
               00239         ifdef _DEFDECIN
               00240                         _@ALIGNPAGE D'90'
               00241 _DECINCMD
               00242                                                 _@CALL  _ENHGET_CMD_FLAG
               00243 _decinlp1
               00244                         movfw   _WORK+11
               00245                         _@CALLFIXED     _CALLCMD
               00246 
               00247                         btfss   _WORK+10,7
               00248                         goto    _decin_skipsign
               00249                         movfw   _STACK
               00250                         sublw   "-"
               00251                         skpnz
               00252                         goto    _decinneg
               00253 _decin_skipsign
               00254                         movfw   _STACK
               00255                         sublw   "0"
               00256                         skpnz
               00257                         goto    _decinwaitnonzero
               00258                                                 movfw   _STACK
               00259                         sublw   "0"-1
               00260                                                 skpnc                   ;Less than "0"?
               00261                                                 goto    _decinlp1       ;Yes
               00262                         movfw   _STACK
               00263                         sublw   "9"
               00264                                                 skpc                    ;Greater than "9"?
               00265                                                 goto    _decinlp1       ;Yes
               00266 
               00267                                                 goto    _decinstart
               00268 _decinneg
               00269                         bsf     _WORK+9,7
               00270 _decinwaitnonzero
               00271                         movfw   _WORK+11
               00272                         _@CALLFIXED     _CALLCMD
               00273 
               00274                                                 movfw   _STACK
               00275                         sublw   "0"             
               00276                         skpnz                           ;Equal "0"?
               00277                         goto    _decinwaitnonzero       ;Yes
               00278 
               00279                         goto    _decinstartnonzero
               00280 _decinlp2
               00281                         movfw   _WORK+11
               00282                         _@CALLFIXED     _CALLCMD
               00283 _decinstartnonzero
               00284                         movfw   _STACK
               00285                         sublw   "0"-1
               00286                                                 skpnc                   ;Less than "0"?
               00287                                                 goto    _decinfinish    ;Yes
               00288                         movfw   _STACK
               00289                         sublw   "9"
               00290                                                 skpc                    ;Greater than "9"?
               00291                                                 goto    _decinfinish    ;Yes
               00292 _decinstart
               00293                                                 movlw   -("0")
               00294                         addwf   _STACK,f
               00295                         
               00296                                                 _@CALL  _ENHPACKROTNIB
               00297 
               00298                         movfw   _STACK
               00299                                                 iorwf   _WORK+4,F
               00300 
               00301                         movlw   0x3f
               00302                         andwf   _WORK+10,F
               00303                                                 decfsz  _WORK+10,F
               00304                                                 goto    _decinlp2
               00305 _decinfinish
               00306                         _@CALL  _PUSHCMD
               00307                         _@CALL  _BCD2BINFUNC
               00308                         _@BTFCS _WORK+9,7,_NEGCMD
               00309                         movlw   _STACK
               00310                         _@CALL  _SWAPWORK_VAR
               00311                         _@CALL  _POPCMD
               00312                         _@GOTO  _LETFUNC
               00313         endif
               00314 
               00315         ifdef _DEFHEXIN
               00316                         _@ALIGNPAGE D'110'
               00317 _HEXINCMD
               00318                                                 _@CALL  _ENHGET_CMD_FLAG
               00319 _hexinlp1
               00320                         movlw   "$"
               00321                         _@CALL  _ENHGET_INDICATE
               00322 
               00323                         movfw   _WORK+11
               00324                         _@CALLFIXED     _CALLCMD
               00325 
               00326                         btfss   _WORK+10,7
               00327                         goto    _hexin_skipsign
               00328                         movfw   _STACK
               00329                         sublw   "-"
               00330                         skpnz
               00331                         goto    _hexinneg
               00332 _hexin_skipsign
               00333                         movfw   _STACK
               00334                         sublw   "0"
               00335                         skpnz
               00336                         goto    _hexinwaitnonzero
               00337 
               00338                         movfw   _STACK
               00339                         sublw   "F"
               00340                                                 skpc                    ;Greater than "F"?
               00341                                                 goto    _hexinlp1       ;Yes
               00342 
               00343                         movfw   _STACK
               00344                         sublw   "0"-1
               00345                                                 skpnc                   ;Less than "0"?
               00346                                                 goto    _hexinlp1               ;Yes
               00347 
               00348                         movfw   _STACK
               00349                         sublw   "9"
               00350                         skpnc                   ;LessEqual than "9"?
               00351                                                 goto    _hexinstart     ;Yes
               00352 
               00353                         movfw   _STACK
               00354                         sublw   "A"-1
               00355                                                 skpnc                   ;Less than "A"?
               00356                                                 goto    _hexinlp1       ;Yes
               00357 
               00358                         goto    _hexinstarthigh
               00359 _hexinneg
               00360                         bsf     _WORK+9,7
               00361 _hexinwaitnonzero
               00362                         movfw   _WORK+11
               00363                         _@CALLFIXED     _CALLCMD
               00364 
               00365                                                 movfw   _STACK
               00366                         sublw   "0"             
               00367                         skpnz                           ;Equal "0"?
               00368                         goto    _hexinwaitnonzero       ;Yes
               00369 
               00370                         goto    _hexinstartnonzero
               00371 _hexinlp2
               00372                         movfw   _WORK+11
               00373                         _@CALLFIXED     _CALLCMD
               00374 _hexinstartnonzero
               00375                         movfw   _STACK
               00376                         sublw   "0"-1
               00377                                                 skpnc                   ;Less than "0"?
               00378                                                 goto    _hexinfinish    ;Yes
               00379                         movfw   _STACK
               00380                         sublw   "9"
               00381                                                 skpnc                   ;LessEqual than "9"?
               00382                                                 goto    _hexinstart     ;Yes
               00383 
               00384                         movfw   _STACK
               00385                         sublw   "A"-1
               00386                                                 skpnc                   ;Less than "A"?
               00387                                                 goto    _hexinfinish    ;Yes
               00388                         movfw   _STACK
               00389                         sublw   "F"
               00390                                                 skpc                    ;Greater than "F"?
               00391                                                 goto    _hexinfinish    ;Yes
               00392 _hexinstarthigh
               00393                                                 movlw   -(("A")-("9")-1)
               00394                                                 addwf   _STACK,F
               00395 _hexinstart
               00396                                                 movlw   -("0")
               00397                         addwf   _STACK,F
               00398 
               00399                                                 _@CALL  _ENHPACKROTNIB
               00400 
               00401                         movfw   _STACK
               00402                                                 iorwf   _WORK+4,F
               00403 
               00404                         movlw   0x3f
               00405                         andwf   _WORK+10,F
               00406                                                 decfsz  _WORK+10,F
               00407                         goto    _hexinlp2
               00408 _hexinfinish
               00409                         _@CALL  _PUSHCMD
               00410                         movlw   _WORK+4
               00411                         _@CALL  _SWAPWORK_VAR
               00412                         _@BTFCS _WORK+9,7,_NEGCMD
               00413                         movlw   _STACK
               00414                         _@CALL  _SWAPWORK_VAR
               00415                         _@CALL  _POPCMD
               00416                         _@GOTO  _LETFUNC
               00417         endif
               00418 
               00419         ifdef _DEFBININ
               00420                         _@ALIGNPAGE D'90'
               00421 _BININCMD
               00422                                                 _@CALL  _ENHGET_CMD_FLAG
               00423 _bininlp1
               00424                         movlw   "%"
               00425                         _@CALL  _ENHGET_INDICATE
               00426 
               00427                         movfw   _WORK+11
               00428                         _@CALLFIXED     _CALLCMD
               00429 
               00430                         btfss   _WORK+10,7
               00431                         goto    _binin_skipsign
               00432                         movfw   _STACK
               00433                         sublw   "-"
               00434                         skpnz
               00435                         goto    _bininneg
               00436 _binin_skipsign
               00437                                                 movfw   _STACK
               00438                         sublw   "0"             
               00439                         skpnz                   ;Equal "0"?
               00440                         goto    _bininwaitnonzero;Yes
               00441 
               00442                         movfw   _STACK
               00443                         sublw   "1"
               00444                         skpnz                   ;Equal "1"?
               00445                         goto    _bininstart1    ;Yes
               00446 
               00447                         goto    _bininlp1
               00448 _bininneg
               00449                         bsf     _WORK+9,7
               00450 _bininwaitnonzero
               00451                         movfw   _WORK+11
               00452                         _@CALLFIXED     _CALLCMD
               00453 
               00454                                                 movfw   _STACK
               00455                         sublw   "0"             
               00456                         skpnz                           ;Equal "0"?
               00457                         goto    _bininwaitnonzero       ;Yes
               00458 
               00459                         goto    _bininstartnonzero
               00460 _bininlp2
               00461                         movfw   _WORK+11
               00462                         _@CALLFIXED     _CALLCMD
               00463 
               00464                                                 movfw   _STACK
               00465                                                 sublw   "0"
               00466                         skpnz
               00467                         goto    _bininstart0
               00468 
               00469 _bininstartnonzero
               00470                         movfw   _STACK
               00471                         sublw   "1"
               00472                         skpz                    ;NotEqual "1"?
               00473                         goto    _bininfinish    ;Yes
               00474 _bininstart1
               00475                                                 setc
               00476                                                 goto    $+2
               00477 _bininstart0
               00478                         clrc
               00479 
               00480                         rlf     _WORK+4,F
               00481                         rlf     _WORK+5,F
               00482                         rlf     _WORK+6,F
               00483                         rlf     _WORK+7,F
               00484                         
               00485                         movlw   0x3f
               00486                         andwf   _WORK+10,F
               00487                                                 decfsz  _WORK+10,F
               00488                         goto    _bininlp2
               00489 _bininfinish
               00490                         _@CALL  _PUSHCMD
               00491                         movlw   _WORK+4
               00492                         _@CALL  _SWAPWORK_VAR
               00493                         _@BTFCS _WORK+9,7,_NEGCMD
               00494                         movlw   _STACK
               00495                         _@CALL  _SWAPWORK_VAR
               00496                         _@CALL  _POPCMD
               00497                         _@GOTO  _LETFUNC
               00498         endif
               00499 
               00102 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB1AF2~1.LIB" ;mbasic14\mbasicstrmod.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef   _DEFCONSTROUT
               00004 _CONSTROUTCMD
               00005                         _@CALL  _ENH_CMD_CNT
               00006                         movlw   1
               00007                         _@GOTO  _ENH_CONSTROUT
               00008         endif
               00009 
               00010         ifdef   _DEFCONWORDSTROUT
               00011 _CONWORDSTROUTCMD
               00012                         _@CALL  _ENH_CMD_CNT
               00013                         movlw   2
               00014                         _@GOTO  _ENH_CONSTROUT
               00015         endif
               00016 
               00017         ifdef   _DEFCONLONGSTROUT
               00018 _CONLONGSTROUTCMD
               00019                         _@CALL  _ENH_CMD_CNT
               00020                         movlw   4
               00021                         _@GOTO  _ENH_CONSTROUT
               00022         endif
               00023 
               00024         ifdef   _DEFBYTETABLESTROUT
               00025 _BYTETABLESTROUTCMD
               00026                         _@CALL  _ENH_STRSETUP
               00027                         _@CALL  _POPCMD
               00028                         _@CALL  _GETTABLEOFFSET
               00029 _bytestroutlp
               00030                         _@CALLFIXED _GETTABLEVALUE
               00031                         movwf   _WORK
               00032                         clrf    _WORK+1
               00033                         clrf    _WORK+2
               00034                         clrf    _WORK+3
               00035                         movfw   _WORK+11
               00036                         _@CALLFIXED     _CALLCMD
               00037                         decfsz  _WORK+6,F
               00038                         incf    _WORK+7,F
               00039                         _@DECFGNZ _WORK+7,F,_bytestroutlp
               00040                                                 _@DONE
               00041         endif
               00042 
               00043         ifdef   _DEFWORDTABLESTROUT
               00044 _WORDTABLESTROUTCMD
               00045                         _@CALL  _ENH_STRSETUP
               00046                         _@CALL  _POPCMD
               00047                         _@CALL  _GETTABLEOFFSET
               00048 _wordstroutlp
               00049                         _@CALLFIXED _GETTABLEVALUE
               00050                         movwf   _WORK
               00051                         _@CALLFIXED _GETTABLEVALUE
               00052                         movwf   _WORK+1
               00053                         clrf    _WORK+2
               00054                         clrf    _WORK+3
               00055                         movfw   _WORK+11
               00056                         _@CALLFIXED     _CALLCMD
               00057                         decfsz  _WORK+6,F
               00058                         incf    _WORK+7,F
               00059                         _@DECFGNZ _WORK+7,F,_wordstroutlp
               00060                                                 _@DONE
               00061                 endif
               00062 
               00063         ifdef   _DEFFLOATTABLESTROUT
               00064 _FLOATTABLESTROUTCMD
               00065         endif
               00066 
               00067         ifdef   _DEFLONGTABLESTROUT
               00068 _LONGTABLESTROUTCMD
               00069                         _@CALL  _ENH_STRSETUP
               00070                         _@CALL  _POPCMD
               00071                         _@CALL  _GETTABLEOFFSET
               00072 _longstroutlp
               00073                         _@CALLFIXED _GETTABLEVALUE
               00074                         movwf   _WORK
               00075                         _@CALLFIXED _GETTABLEVALUE
               00076                         movwf   _WORK+1
               00077                         _@CALLFIXED _GETTABLEVALUE
               00078                         movwf   _WORK+2
               00079                         _@CALLFIXED _GETTABLEVALUE
               00080                         movwf   _WORK+3
               00081                         movfw   _WORK+11
               00082                         _@CALLFIXED     _CALLCMD
               00083                         decfsz  _WORK+6,F
               00084                         incf    _WORK+7,F
               00085                         _@DECFGNZ _WORK+7,F,_longstroutlp
               00086                                                 _@DONE
               00087                 endif
               00088 
               00089         ifdef   _DEFSTROUT
               00090 _STROUTCMD
               00091                         _@CALL  _ENH_STRSETUP
               00092 _stroutlp
               00093                         _@CALL  _STR_GETVAL
               00094                         movfw   _WORK+11
               00095                         _@CALLFIXED     _CALLCMD
               00096                         incf    _WORK+9,F
               00097                         decfsz  _WORK+6,F
               00098                         incf    _WORK+7,F
               00099                         _@DECFGNZ _WORK+7,F,_stroutlp
               00100                                                 _@DONE
               00101         endif
               00102 
               00103         ifdef   _DEFBYTETABLESTROUTEOL
               00104         _@ALIGNPAGE D'55'
               00105 _BYTETABLESTROUTEOLCMD
               00106                         _@CALL  _ENH_STRSETUP
               00107                         _@CALL  _POPCMD
               00108                         _@CALL  _GETTABLEOFFSET
               00109 _bytestrouteollp
               00110                         _@CALLFIXED _GETTABLEVALUE
               00111                         movwf   _WORK
               00112                         clrf    _WORK+1
               00113                         clrf    _WORK+2
               00114                         clrf    _WORK+3
               00115                         movfw   _WORK+8
               00116                         subwf   _WORK,w
               00117                         skpnz
               00118                         goto    _bytestrouteolfinish
               00119                         movfw   _WORK+11
               00120                         _@CALLFIXED     _CALLCMD
               00121                         decfsz  _WORK+6,F
               00122                         incf    _WORK+7,F
               00123                         decfsz  _WORK+7,F
               00124                         goto    _bytestrouteollp
               00125 _bytestrouteolfinish
               00126                                                 _@DONE
               00127         endif
               00128 
               00129         ifdef   _DEFWORDTABLESTROUTEOL
               00130         _@ALIGNPAGE D'60'
               00131 _WORDTABLESTROUTEOLCMD
               00132                         _@CALL  _ENH_STRSETUP
               00133                         _@CALL  _POPCMD
               00134                         _@CALL  _GETTABLEOFFSET
               00135 _wordstrouteollp
               00136                         _@CALLFIXED _GETTABLEVALUE
               00137                         movwf   _WORK
               00138                         _@CALLFIXED _GETTABLEVALUE
               00139                         movwf   _WORK+1
               00140                         clrf    _WORK+2
               00141                         clrf    _WORK+3
               00142                         movfw   _WORK+8
               00143                         subwf   _WORK,w
               00144                         skpnz
               00145                         goto    _wordstrouteolfinish
               00146                         movfw   _WORK+11
               00147                         _@CALLFIXED     _CALLCMD
               00148                         decfsz  _WORK+6,F
               00149                         incf    _WORK+7,F
               00150                         decfsz  _WORK+7,F
               00151                         goto    _wordstrouteollp
               00152 _wordstrouteolfinish
               00153                                                 _@DONE
               00154         endif
               00155 
               00156         ifdef   _DEFFLOATTABLESTROUTEOL
               00157 _FLOATTABLESTROUTEOLCMD
               00158         endif
               00159 
               00160         ifdef   _DEFLONGTABLESTROUTEOL
               00161         _@ALIGNPAGE D'60'
               00162 _LONGTABLESTROUTEOLCMD
               00163                         _@CALL  _ENH_STRSETUP
               00164                         _@CALL  _POPCMD
               00165                         _@CALL  _GETTABLEOFFSET
               00166 _longstrouteollp
               00167                         _@CALLFIXED _GETTABLEVALUE
               00168                         movwf   _WORK
               00169                         _@CALLFIXED _GETTABLEVALUE
               00170                         movwf   _WORK+1
               00171                         _@CALLFIXED _GETTABLEVALUE
               00172                         movwf   _WORK+2
               00173                         _@CALLFIXED _GETTABLEVALUE
               00174                         movwf   _WORK+3
               00175                         movfw   _WORK+8
               00176                         subwf   _WORK,w
               00177                         skpnz
               00178                         goto    _longstrouteolfinish
               00179                         movfw   _WORK+11
               00180                         _@CALLFIXED     _CALLCMD
               00181                         decfsz  _WORK+6,F
               00182                         incf    _WORK+7,F
               00183                         decfsz  _WORK+7,F
               00184                         goto    _longstrouteollp
               00185 _longstrouteolfinish
               00186                                                 _@DONE
               00187         endif
               00188 
               00189         ifdef   _DEFSTROUTEOL
               00190 _STROUTEOLCMD
               00191                         _@CALL  _ENH_STRSETUP
               00192 _strouteollp
               00193                         _@CALL  _STR_GETVAL
               00194                         movfw   _WORK+8
               00195                         subwf   _WORK,w
               00196                         _@BTFGS STATUS,Z,_DONE   ;#DONE#
               00197                         movfw   _WORK+11
               00198                         _@CALLFIXED     _CALLCMD
               00199                         incf    _WORK+9,F
               00200                         decfsz  _WORK+6,F
               00201                         incf    _WORK+7,F
               00202                         _@DECFGNZ _WORK+7,F,_strouteollp
               00203                                                 _@DONE
               00204         endif
               00205 
               00206         ifdef   _DEFREPOUT
               00207 _REPOUTCMD
               00208                         _@CALL  _POPCMD ;CNT
               00209                         movfw   _WORK
               00210                         movwf   _WORK+6
               00211                         incf    _WORK+1,w
               00212                         movwf   _WORK+7
               00213                         _@CALL  _POPCMD ;CHR
               00214                         movfw   _WORK
               00215                         movwf   _WORK+8
               00216                         _@GETCMD
               00217                         movwf   _WORK+11
               00218 _repoutlp
               00219                         movfw   _WORK+8
               00220                         movwf   _WORK
               00221                         clrf    _WORK+1
               00222                         clrf    _WORK+2
               00223                         clrf    _WORK+3
               00224                         movfw   _WORK+11
               00225                         _@CALLFIXED     _CALLCMD
               00226                         decfsz  _WORK+6,F
               00227                         incf    _WORK+7,F
               00228                         _@DECFGNZ _WORK+7,F,_repoutlp
               00229                                                 _@DONE
               00230         endif
               00231 
               00232         ifdef   _DEFSTRIN
               00233 _STRINCMD
               00234                         _@CALL  _ENH_STRSETUP
               00235 _strinlp
               00236                         movfw   _WORK+11
               00237                         _@CALLFIXED     _CALLCMD
               00238                         _@CALL  _STR_SETVAL
               00239                         incf    _WORK+9,F
               00240                         decfsz  _WORK+6,F
               00241                         incf    _WORK+7,F
               00242                         _@DECFGNZ _WORK+7,F,_strinlp
               00243                                                 _@DONE
               00244         endif
               00245 
               00246         ifdef   _DEFSTRINEOL
               00247 _STRINEOLCMD
               00248                         _@CALL  _ENH_STRSETUP
               00249 _strineollp
               00250                         movfw   _WORK+11
               00251                         _@CALLFIXED     _CALLCMD
               00252                         movfw   _WORK+8
               00253                         subwf   _STACK,w
               00254                         _@BTFGS STATUS,Z,_DONE   ;#DONE#
               00255                         _@CALL  _STR_SETVAL
               00256                         incf    _WORK+9,F
               00257                         decfsz  _WORK+6,F
               00258                         incf    _WORK+7,F
               00259                         _@DECFGNZ _WORK+7,F,_strineollp
               00260                                                 _@DONE
               00261         endif
               00262 
               00263         ifdef   _DEFBYTETABLEWAITSTR
               00264 _BYTETABLEWAITSTRCMD
               00265                         _@CALL  _ENH_STRSETUP
               00266                         _@CALL  _POPCMD
               00267                         _@CALL  _GETTABLEOFFSET
               00268                         movfw   _WORK+6
               00269                         movwf   _WORK+10
               00270                         movfw   _WORK+4
               00271                         movwf   _WORK+8
               00272                         movfw   _WORK+5
               00273                         movwf   _WORK+9
               00274 _bytewaitstrstart
               00275                         movfw   _WORK+10
               00276                         movwf   _WORK+6
               00277                         movfw   _WORK+8
               00278                         movwf   _WORK+4
               00279                         movfw   _WORK+9
               00280                         movwf   _WORK+5
               00281 _bytewaitstrlp
               00282                         _@CALLFIXED _GETTABLEVALUE
               00283                         movwf   _WORK
               00284                         clrf    _WORK+1
               00285                         clrf    _WORK+2
               00286                         clrf    _WORK+3
               00287                         movfw   _WORK+11
               00288                         _@CALLFIXED     _CALLCMD
               00289                         movfw   _STACK
               00290                         subwf   _WORK,w
               00291                         _@BTFGC STATUS,Z,_bytewaitstrstart
               00292                         _@DECFGNZ _WORK+6,F,_bytewaitstrlp
               00293                                                 _@DONE
               00294         endif
               00295 
               00296         ifdef   _DEFWORDTABLEWAITSTR
               00297 _WORDTABLEWAITSTRCMD
               00298                         _@CALL  _ENH_STRSETUP
               00299                         _@CALL  _POPCMD
               00300                         _@CALL  _GETTABLEOFFSET
               00301                         movfw   _WORK+6
               00302                         movwf   _WORK+10
               00303                         movfw   _WORK+4
               00304                         movwf   _WORK+8
               00305                         movfw   _WORK+5
               00306                         movwf   _WORK+9
               00307 _wordwaitstrstart
               00308                         movfw   _WORK+10
               00309                         movwf   _WORK+6
               00310                         movfw   _WORK+8
               00311                         movwf   _WORK+4
               00312                         movfw   _WORK+9
               00313                         movwf   _WORK+5
               00314 _wordwaitstrlp
               00315                         _@CALLFIXED _GETTABLEVALUE
               00316                         movwf   _WORK
               00317                         _@CALLFIXED _GETTABLEVALUE
               00318                         movwf   _WORK+1
               00319                         clrf    _WORK+2
               00320                         clrf    _WORK+3
               00321                         movfw   _WORK+11
               00322                         _@CALLFIXED     _CALLCMD
               00323                         movfw   _STACK
               00324                         subwf   _WORK,w
               00325                         _@BTFGC STATUS,Z,_wordwaitstrstart
               00326                         _@DECFGNZ _WORK+6,F,_wordwaitstrlp
               00327                                                 _@DONE
               00328         endif
               00329 
               00330         ifdef   _DEFFLOATTABLEWAITSTR
               00331 _FLOATTABLEWAITSTRCMD
               00332         endif
               00333 
               00334         ifdef   _DEFLONGTABLEWAITSTR
               00335 _LONGTABLEWAITSTRCMD
               00336                         _@CALL  _ENH_STRSETUP
               00337                         _@CALL  _POPCMD
               00338                         _@CALL  _GETTABLEOFFSET
               00339                         movfw   _WORK+6
               00340                         movwf   _WORK+10
               00341                         movfw   _WORK+4
               00342                         movwf   _WORK+8
               00343                         movfw   _WORK+5
               00344                         movwf   _WORK+9
               00345 _longwaitstrstart
               00346                         movfw   _WORK+10
               00347                         movwf   _WORK+6
               00348                         movfw   _WORK+8
               00349                         movwf   _WORK+4
               00350                         movfw   _WORK+9
               00351                         movwf   _WORK+5
               00352 _longwaitstrlp
               00353                         _@CALLFIXED _GETTABLEVALUE
               00354                         movwf   _WORK
               00355                         _@CALLFIXED _GETTABLEVALUE
               00356                         movwf   _WORK+1
               00357                         _@CALLFIXED _GETTABLEVALUE
               00358                         movwf   _WORK+2
               00359                         _@CALLFIXED _GETTABLEVALUE
               00360                         movwf   _WORK+3
               00361                         movfw   _WORK+11
               00362                         _@CALLFIXED     _CALLCMD
               00363                         movfw   _STACK
               00364                         subwf   _WORK,w
               00365                         _@BTFGC STATUS,Z,_longwaitstrstart
               00366                         _@DECFGNZ _WORK+6,F,_longwaitstrlp
               00367                                                 _@DONE
               00368         endif
               00369 
               00370         ifdef   _DEFWAITSTR
               00371 _WAITSTRCMD
               00372                         _@CALL  _ENH_STRSETUP
               00373                         movfw   _WORK+6
               00374                         movwf   _WORK+10
               00375 _waitstrstart
               00376                         movfw   _WORK+10
               00377                         movwf   _WORK+6
               00378                         clrf    _WORK+9 ;INDEX
               00379 _waitstrlp
               00380                         _@CALL  _STR_GETVAL
               00381                         movfw   _WORK+11
               00382                         _@CALLFIXED     _CALLCMD
               00383                         movfw   _STACK
               00384                         subwf   _WORK,w
               00385                         _@BTFGC STATUS,Z,_waitstrstart
               00386                         incf    _WORK+9,F
               00387                         _@DECFGNZ _WORK+6,F,_waitstrlp
               00388                                                 _@DONE
               00389         endif
               00390         
               00391         ifdef   _DEFBYTETABLEWAITSTREOL
               00392         _@ALIGNPAGE D'50'
               00393 _BYTETABLEWAITSTREOLCMD
               00394                         _@CALL  _ENH_STRSETUP
               00395                         _@CALL  _POPCMD
               00396                         _@CALL  _GETTABLEOFFSET
               00397                         movfw   _WORK+6
               00398                         movwf   _WORK+10
               00399                         movfw   _WORK+4
               00400                         movwf   _WORK+8
               00401                         movfw   _WORK+5
               00402                         movwf   _WORK+9
               00403 _bytewaitstreolstart
               00404                         movfw   _WORK+10
               00405                         movwf   _WORK+6
               00406                         movfw   _WORK+8
               00407                         movwf   _WORK+4
               00408                         movfw   _WORK+9
               00409                         movwf   _WORK+5
               00410 _bytewaitstreollp
               00411                         _@CALLFIXED _GETTABLEVALUE
               00412                         movwf   _WORK
               00413                         clrf    _WORK+1
               00414                         clrf    _WORK+2
               00415                         clrf    _WORK+3
               00416                         movfw   _WORK+8
               00417                         subwf   _WORK,w
               00418                         skpnz
               00419                         goto    _bytewaitstreolfinish
               00420                         movfw   _WORK+11
               00421                         _@CALLFIXED     _CALLCMD
               00422                         movfw   _STACK
               00423                         subwf   _WORK,w
               00424                         skpz
               00425                         goto    _bytewaitstreolstart
               00426                         decfsz  _WORK+6,F
               00427                         goto    _bytewaitstreollp
               00428 _bytewaitstreolfinish
               00429                                                 _@DONE
               00430         endif
               00431 
               00432         ifdef   _DEFWORDTABLEWAITSTREOL
               00433         _@ALIGNPAGE D'50'
               00434 _WORDTABLEWAITSTREOLCMD
               00435                         _@CALL  _ENH_STRSETUP
               00436                         _@CALL  _POPCMD
               00437                         _@CALL  _GETTABLEOFFSET
               00438                         movfw   _WORK+6
               00439                         movwf   _WORK+10
               00440                         movfw   _WORK+4
               00441                         movwf   _WORK+8
               00442                         movfw   _WORK+5
               00443                         movwf   _WORK+9
               00444 _wordwaitstreolstart
               00445                         movfw   _WORK+10
               00446                         movwf   _WORK+6
               00447                         movfw   _WORK+8
               00448                         movwf   _WORK+4
               00449                         movfw   _WORK+9
               00450                         movwf   _WORK+5
               00451 _wordwaitstreollp
               00452                         _@CALLFIXED _GETTABLEVALUE
               00453                         movwf   _WORK
               00454                         clrf    _WORK+1
               00455                         clrf    _WORK+2
               00456                         clrf    _WORK+3
               00457                         movfw   _WORK+8
               00458                         subwf   _WORK,w
               00459                         skpnz
               00460                         goto    _wordwaitstreolfinish
               00461                         movfw   _WORK+11
               00462                         _@CALLFIXED     _CALLCMD
               00463                         movfw   _STACK
               00464                         subwf   _WORK,w
               00465                         skpz
               00466                         goto    _wordwaitstreolstart
               00467                         decfsz  _WORK+6,F
               00468                         goto    _wordwaitstreollp
               00469 _wordwaitstreolfinish
               00470                                                 _@DONE
               00471         endif
               00472 
               00473         ifdef   _DEFFLOATTABLEWAITSTREOL
               00474 _FLOATTABLEWAITSTREOLCMD
               00475         endif
               00476 
               00477         ifdef   _DEFLONGTABLEWAITSTREOL
               00478         _@ALIGNPAGE D'50'
               00479 _LONGTABLEWAITSTREOLCMD
               00480                         _@CALL  _ENH_STRSETUP
               00481                         _@CALL  _POPCMD
               00482                         _@CALL  _GETTABLEOFFSET
               00483                         movfw   _WORK+6
               00484                         movwf   _WORK+10
               00485                         movfw   _WORK+4
               00486                         movwf   _WORK+8
               00487                         movfw   _WORK+5
               00488                         movwf   _WORK+9
               00489 _longwaitstreolstart
               00490                         movfw   _WORK+10
               00491                         movwf   _WORK+6
               00492                         movfw   _WORK+8
               00493                         movwf   _WORK+4
               00494                         movfw   _WORK+9
               00495                         movwf   _WORK+5
               00496 _longwaitstreollp
               00497                         _@CALLFIXED _GETTABLEVALUE
               00498                         movwf   _WORK
               00499                         clrf    _WORK+1
               00500                         clrf    _WORK+2
               00501                         clrf    _WORK+3
               00502                         movfw   _WORK+8
               00503                         subwf   _WORK,w
               00504                         skpnz
               00505                         goto    _longwaitstreolfinish
               00506                         movfw   _WORK+11
               00507                         _@CALLFIXED     _CALLCMD
               00508                         movfw   _STACK
               00509                         subwf   _WORK,w
               00510                         skpz
               00511                         goto    _longwaitstreolstart
               00512                         decfsz  _WORK+6,F
               00513                         goto    _longwaitstreollp
               00514 _longwaitstreolfinish
               00515                                                 _@DONE
               00516         endif
               00517 
               00518         ifdef   _DEFWAITSTREOL
               00519 _WAITSTREOLCMD
               00520                         _@CALL  _ENH_STRSETUP
               00521                         movfw   _WORK+6
               00522                         movwf   _WORK+10
               00523 _waitstreolstart
               00524                         movfw   _WORK+10
               00525                         movwf   _WORK+6
               00526                         clrf    _WORK+9 ;INDEX
               00527 _waitstreollp
               00528                         _@CALL  _STR_GETVAL
               00529                         movfw   _WORK+8
               00530                         subwf   _WORK,w
               00531                         _@BTFGS STATUS,Z,_DONE   ;#DONE#
               00532                         movfw   _WORK+11
               00533                         _@CALLFIXED     _CALLCMD
               00534                         movfw   _STACK
               00535                         subwf   _WORK,w
               00536                         _@BTFGC STATUS,Z,_waitstreolstart
               00537                         incf    _WORK+9,F
               00538                         _@DECFGNZ _WORK+6,F,_waitstreollp
               00539                                                 _@DONE
               00540         endif
               00541         
               00542         ifdef   _DEFWAITCONSTR
               00543 _WAITCONSTRCMD
               00544                         _@GETCMD ;CMD
               00545                         movwf   _WORK+11
               00546                         _@GETCMD ;CMD
               00547                         addlw   1
               00548                         movwf   _WORK+9
               00549                         _@GETCMD ;CMD
               00550                         movwf   _WORK+8
               00551                         movfw   _PC
               00552                         movwf   _WORK+4
               00553                         movfw   _PCH
               00554                         movwf   _WORK+5
               00555 _waitconstrstart
               00556                         movfw   _WORK+9
               00557                         movwf   _WORK+7
               00558                         movfw   _WORK+8
               00559                         movwf   _WORK+6
               00560                         movfw   _WORK+4
               00561                         movwf   _PC
               00562                         movfw   _WORK+5
               00563                         movwf   _PCH
               00564                 ifdef   _PACKEDTOKENS
               00565                                                 _@CALL  _RELOADCACHE
               00566                 endif
               00567 _waitconstrlp
               00568                         movfw   _WORK+11
               00569                         _@CALLFIXED     _CALLCMD
               00570                         _@GETCMD
               00571                         subwf   _STACK,w
               00572                         _@BTFGC STATUS,Z,_waitconstrstart
               00573                         decfsz  _WORK+6,F
               00574                         incf    _WORK+7,F
               00575                         _@DECFGNZ _WORK+7,F,_waitconstrlp
               00576                                                 _@DONE
               00577         endif
               00578 
               00579         ifdef   _DEFSKIP
               00580 _SKIPCMD
               00581                         incf    _WORK+1,W
               00582                         movwf   _WORK+7
               00583                         movfw   _WORK
               00584                         movwf   _WORK+6
               00585                         _@GETCMD ;CMD
               00586                         movwf   _WORK+11
               00587 _skiplp
               00588                         movfw   _WORK+11
               00589                         _@CALLFIXED     _CALLCMD
               00590                         decfsz  _WORK+6,F
               00591                         incf    _WORK+7,F
               00592                         _@DECFGNZ _WORK+7,F,_skiplp
               00593                                                 _@DONE
               00594         endif
               00595 
               00103 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB5D50~1.LIB" ;mbasic14\mbasictime.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                 ifdef _DEFNAP
               00004 ;NAP             _EXP _EXEC:    ;WORK0:3
               00005                         _@ALIGNPAGE     D'20'
               00006 _NAPCMD
               00007                                         bsf             STATUS,RP0
               00008                                         movlw   0f0h
               00009                                         andwf   OPTION_REG&0x7f,w
               00010                                         bcf             STATUS,RP0
               00011                                         iorlw   0x08
               00012                                         iorwf   _WORK,w
               00013                                         bsf             STATUS,RP0
               00014                                         clrwdt
               00015                                         movwf   OPTION_REG&0x7f
               00016                                         clrwdt
               00017                                         sleep
               00018                                         iorlw   0x0f
               00019                                         clrwdt
               00020                                         movwf   OPTION_REG&0x7f
               00021                                         bcf             STATUS,RP0
               00022                                         _@DONE
               00023                 endif
               00024 
               00025                 ifdef _DEFSLEEP
               00026 ;SLEEP           _EXP _EXEC:    ;WORK0:3
               00027                         _@ALIGNPAGE     D'20'
               00028 _SLEEPCMD
               00029 _sleeploop
               00030                                         movlw   -1
               00031                                         addwf   _WORK,F         
               00032                                         skpc
               00033                                         addwf   _WORK+1,F                       
               00034                                         skpc
               00035                                         addwf   _WORK+2,F                       
               00036                                         skpc
               00037                                         addwf   _WORK+3,F                       
               00038                                         skpc
               00039                                         goto    _sleepfinish
               00040                                         
               00041                                         bsf             STATUS, RP0
               00042                                         movlw   0F8h | 6                ;64:1 Prescaler
               00043                                         clrwdt                                  ;Clear Watchdog Timer
               00044                                         movwf   OPTION_REG&0x7f
               00045                                         sleep                                   ;Sleep 64*18ms
               00046                                         movlw   0x0f
               00047                                         iorwf   OPTION_REG&0x7f,F
               00048                                         bcf             STATUS, RP0
               00049                                         clrwdt                                  ;Clear Watchdog Timer
               00050                                         goto    _sleeploop              ;Keep sleeping
               00051 
               00052 _sleepfinish                                    
               00053                                         _@DONE
               00054                 endif
               00055 
               00056 ;********************************
               00057 ;PauseUS Function
               00058 ;********************************
               00059         ifdef _DEFPAUSEUSFUNC                                            
               00060                         _@ALIGNPAGE     D'100'
               00061 _PAUSEUSFUNC16
               00062                         clrf    _STACK+2
               00063                         clrf    _STACK+3
               00064 _PAUSEUSFUNC
               00065                         clrf    _CMD                                    ;3
               00066                         clrf    _CMD+1                                  ;1
               00067                         _@ADDCYCLES 75                                  ;10
               00068                         goto    _pauseusstart                   ;2
               00069 _pauseusloop
               00070                         clrwdt                                                  ;1 Keep Watchdog happy                  
               00071                         _@SETCYCLES 27                                  ;6
               00072 _pauseusstart
               00073                         movfw   _CMD+2                                  ;1
               00074                         subwf   _CMD,F                                  ;1
               00075                         movfw   _CMD+3                                  ;1
               00076                         skpc                                                    ;1
               00077                         addlw   1                                               ;1
               00078                         subwf   _CMD+1,F                                ;1
               00079                         movfw   _CMD+4                                  ;1
               00080                         skpc                                                    ;1
               00081                         addlw   1                                               ;1
               00082                         subwf   _STACK,F                                ;1 Sub Used     Time
               00083                         movlw   1                                               ;1 Set sub
               00084                         skpc                                                    ;1 Carry?
               00085                         subwf   _STACK+1,F                              ;1
               00086                         skpc                                                    ;1 Carry?
               00087                         subwf   _STACK+2,F                              ;1
               00088                         skpc                                                    ;1 Carry?
               00089                         subwf   _STACK+3,F                              ;1
               00090                         skpnc                                                   ;1 Carry?
               00091                         GOTO    _pauseusloop                    ;2(27) No, Keep wasting time
               00092                         nop                                                             ;1(27)
               00093 _pauseusfinish
               00094                         _@DELAYJMPTABLE _STACK                  ;12
               00095                 endif
               00096 
               00097 ;********************************
               00098 ;PauseUS CMD
               00099 ;********************************
               00100         ifdef _DEFPAUSEUS
               00101 ;PAUSEUS         _EXP _EXEC:    ;WORK0:3
               00102                         _@ALIGNPAGE     D'20'
               00103 _PAUSEUSCMD
               00104                                                 movfw   _WORK           ;1
               00105                                                 movwf   _STACK          ;1
               00106                                                 movfw   _WORK+1         ;1
               00107                                                 movwf   _STACK+1        ;1
               00108                                                 movfw   _WORK+2         ;1
               00109                                                 movwf   _STACK+2        ;1
               00110                                                 movfw   _WORK+3         ;1
               00111                                                 movwf   _STACK+3        ;1
               00112                                                 _@SETCYCLES 14          ;6
               00113                                                 _@CALL  _PAUSEUSFUNC
               00114                                                 _@DONE
               00115         endif
               00116         
               00117 ;********************************
               00118 ;PauseCLK Function
               00119 ;********************************
               00120         ifdef _DEFPAUSECLKFUNC                                            
               00121 _PAUSECLKINIT = 39
               00122 _PAUSECLKUNIT = 13    
               00123                         _@ALIGNPAGE     D'80'
               00124 _PAUSECLKFUNC16
               00125                         clrf    _STACK+2                                ;1
               00126                         clrf    _STACK+3                                ;1
               00127                         addlw   -3                                              ;1
               00128 _PAUSECLKFUNC
               00129                         addlw   -_PAUSECLKINIT                  ;1 Load used time(used + 10)
               00130                         goto    _pauseclkstart                  ;0
               00131 _pauseclkloop           
               00132                         movlw   -_PAUSECLKUNIT                  ;1 Load used time
               00133                         clrwdt                                                  ;1 Keep Watchdog happy                  
               00134 _pauseclkstart          
               00135                         addwf   _STACK,F                                ;1 Sub Used     Time
               00136                         movlw   -1                                              ;1 Set sub
               00137                         skpc                                                    ;1 Carry?
               00138                         addwf   _STACK+1,F                              ;1
               00139                         skpc                                                    ;1 Carry?
               00140                         addwf   _STACK+2,F                              ;1
               00141                         skpc                                                    ;1 Carry?
               00142                         addwf   _STACK+3,F                              ;1
               00143                         skpnc                                                   ;1 Carry?
               00144                         GOTO    _pauseclkloop                   ;2 No, Keep     wasting time
               00145 _pauseclkwaste          
               00146                         comf    _STACK,f                                ;1
               00147                         movlw   HIGH _pauseclkoffset    ;1
               00148                         movwf   PCLATH                                  ;1
               00149                         incf    _STACK,w                                ;1
               00150                         addlw   LOW     _pauseclkoffset         ;1
               00151                         skpnc                                                   ;2
               00152                         incf    PCLATH,F                                ;0
               00153                         movwf   PCL                                             ;2 Waste Spec time(0-10)
               00154 _pauseclkoffset
               00155                         nop                                                             ;Dummy
               00156                         nop                                                             ;2(12)
               00157                         nop                                                             ;2(11)
               00158                         nop                                                             ;2(10)
               00159                         nop                                                             ;2(9)
               00160                         nop                                                             ;2(8)
               00161                         nop                                                             ;2(7)
               00162                         nop                                                             ;2(6)
               00163                         nop                                                             ;2(5)
               00164                         nop                                                             ;2(4)
               00165                         nop                                                             ;2(3)
               00166                         nop                                                             ;2(2)
               00167                         nop                                                             ;2(1)
               00168                         return                                                  ;2(0)
               00169                         return                                                  ;2(-1)
               00170                         return                                                  ;2(-2)
               00171                         return                                                  ;2(-3)
               00172                         return                                                  ;2(-4)
               00173                         return                                                  ;2(-5)
               00174                         return                                                  ;2(-6)
               00175                         return                                                  ;2(-7)
               00176                         return                                                  ;2(-8)
               00177                         return                                                  ;2(-9)
               00178                         return                                                  ;2(-10)
               00179                         return                                                  ;2(-11)
               00180                         return                                                  ;2(-12)
               00181                         return                                                  ;2(-13)
               00182                         return                                                  ;2(-14)
               00183                         return                                                  ;2(-15)
               00184                         return                                                  ;2(-16)
               00185                         return                                                  ;2(-17)
               00186                         return                                                  ;2(-18)
               00187                         return                                                  ;2(-19)
               00188                         return                                                  ;2(-20)
               00189                         return                                                  ;2(-21)
               00190                         return                                                  ;2(-22)
               00191                         return                                                  ;2(-23)
               00192         endif
               00193 
               00194 ;********************************
               00195 ;PauseCLK CMD
               00196 ;********************************
               00197         ifdef _DEFPAUSECLK
               00198 ;PAUSECLK        _EXP _EXEC:    ;WORK0:3
               00199                         _@ALIGNPAGE     D'20'
               00200 _PAUSECLKCMD
               00201                                                 movfw   _WORK
               00202                                                 movwf   _STACK
               00203                                                 movfw   _WORK+1
               00204                                                 movwf   _STACK+1
               00205                                                 movfw   _WORK+2
               00206                                                 movwf   _STACK+2
               00207                                                 movfw   _WORK+3
               00208                                                 movwf   _STACK+3
               00209                                                 clrw
               00210                                                 _@CALL  _PAUSECLKFUNC
               00211                                                 _@DONE
               00212         endif
               00213         
               00214 ;********************************
               00215 ;Pause Function
               00216 ;********************************
               00217         ifdef _DEFPAUSEFUNC                                                
               00218                         _@ALIGNPAGE     D'20'
               00219 _PAUSEFUNC16
               00220                                                 clrf    _WORK+2
               00221                                                 clrf    _WORK+3
               00222 _PAUSEFUNC
               00223                                                 clrwdt                                                  ;1
               00224                                                 movlw   LOW     1000                            ;1
               00225                                                 movwf   _STACK                                  ;1
               00226                                                 movlw   HIGH 1000                               ;1
               00227                                                 movwf   _STACK+1                                ;1
               00228                                                 _@SETCYCLES 26                                  ;6
               00229                                                 _@CALLFIXED     _PAUSEUSFUNC16          ;4 1000us
               00230                                                 movlw   -1                                              ;1 Set sub
               00231                                                 addwf   _WORK,F                                 ;1 Sub Used     Time
               00232                                                 skpc                                                    ;1 Carry?
               00233                                                 addwf   _WORK+1,F                               ;1
               00234                                                 skpc                                                    ;1 Carry?
               00235                                                 addwf   _WORK+2,F                               ;1
               00236                                                 skpc                                                    ;1 Carry?
               00237                                                 addwf   _WORK+3,F                               ;1
               00238                                                 skpnc                                                   ;1 Carry?
               00239                                                 goto    _PAUSEFUNC                              ;2(26)
               00240                                                 return
               00241         endif
               00242 
               00243 ;********************************
               00244 ;Pause CMD
               00245 ;********************************
               00246         ifdef _DEFPAUSE
               00247 ;PAUSE           _EXP _EXEC:    ;WORK0:3
               00248                         _@ALIGNPAGE     D'5'
               00249 _PAUSECMD
               00250                                                 _@CALL  _PAUSEFUNC
               00251                                                 _@DONE
               00252         endif
               00253                 
               00104 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBF13A~1.LIB" ;mbasic14\mbasicfornext.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFFLFOR
               00004                         _@ALIGNPAGE D'50'
               00005 _FLFORCMD
               00006                         movfw   _WORK
               00007                         movwf   _WORK+4
               00008                         movfw   _WORK+1
               00009                         movwf   _WORK+5
               00010                         movfw   _WORK+2
               00011                         movwf   _WORK+6
               00012                         movfw   _WORK+3
               00013                         movwf   _WORK+7
               00014                         _@CALL  _POPCMD
               00015                         btfsc   _WORK+3,7
               00016                         goto    _FLFORNEG
               00017 _FLFORPOS
               00018                         _@CALL  _POPCMD
               00019                         _@CALL  _FGREATCMD
               00020                         goto    _FLFORFINISH
               00021 _FLFORNEG
               00022                         _@CALL  _POPCMD
               00023                         _@CALL  _FLESSCMD
               00024 _FLFORFINISH
               00025                         movfw   _WORK                           ;Get CMP state
               00026                         _@BTFGC STATUS,Z,_GOTOCMD       ;Exit loop if TRUE
               00027                         movfw   _WORK+4
               00028                         movwf   _WORK
               00029                         movfw   _WORK+5
               00030                         movwf   _WORK+1
               00031                         movfw   _WORK+6
               00032                         movwf   _WORK+2
               00033                         movfw   _WORK+7
               00034                         movwf   _WORK+3
               00035                         _@CALL  _LETFUNC
               00036                         _@GOTO  _LGOFALSE
               00037         endif
               00038 
               00039         ifdef _DEFFNEXT
               00040                         _@ALIGNPAGE D'13'
               00041 _FNEXTCMD
               00042                                                 _@CALL          _SETUPBARG
               00043                                                 call            _FPA32
               00044                                                 _@CLRSP
               00045                         _@GOTO          _GOTOCMD
               00046         endif
               00047 
               00048         ifdef _DEFLFOR
               00049                         _@ALIGNPAGE D'50'
               00050 _LFORCMD
               00051                         movfw   _WORK
               00052                         movwf   _WORK+4
               00053                         movfw   _WORK+1
               00054                         movwf   _WORK+5
               00055                         _@CALL  _POPCMD
               00056                         btfsc   _WORK+3,7
               00057                         goto    _LFORNEG
               00058 _LFORPOS
               00059                         _@CALL  _POPCMD
               00060                         _@CALL  _GREATCMD
               00061                         goto    _LFORFINISH
               00062 _LFORNEG
               00063                         _@CALL  _POPCMD
               00064                         _@CALL  _LESSCMD
               00065 _LFORFINISH
               00066                         movfw   _WORK                           ;Get CMP state
               00067                         _@BTFGC STATUS,Z,_GOTOCMD       ;Exit loop if TRUE
               00068                         movfw   _WORK+4
               00069                         movwf   _WORK
               00070                         movfw   _WORK+5
               00071                         movwf   _WORK+1
               00072                         _@CALL  _LETFUNC
               00073                         _@GOTO  _LGOFALSE
               00074         endif
               00075 
               00076         ifdef _DEFNEXT
               00077                         _@ALIGNPAGE D'13'
               00078 _NEXTCMD
               00079                         _@CALL  _ADDFUNC
               00080                                                 _@CLRSP
               00081                         _@GOTO  _GOTOCMD
               00082         endif
               00105 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBASIC~2.LIB" ;mbasic14\mbasicbranch.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFBRANCH
               00004                         _@ALIGNPAGE D'40'
               00005 _BRANCHCMD
               00006                         _@GETCMD
               00007                         movwf   _WORK+5
               00008                         _@GETCMD
               00009                         movwf   _WORK+4
               00010 
               00011 _branchloop
               00012                                                 _@GETCMD
               00013                                                 movwf   _CMD+1
               00014                                                 _@GETCMD
               00015                                                 movwf   _CMD
               00016 
               00017                                                 movlw   -1
               00018                                                 addwf   _WORK,F
               00019                                                 skpc
               00020                                                 addwf   _WORK+1,F
               00021                                                 skpc
               00022                                                 goto    _branchgo
               00023                                                 
               00024                                                 movlw   -1
               00025                                                 addwf   _WORK+4,F
               00026                                 skpc
               00027                                 addwf   _WORK+5,F
               00028                                 skpc
               00029                                 goto    _branchfinish
               00030                                 goto    _branchloop
               00031 _branchgo                               
               00032                                                 movfw   _CMD+1
               00033                                                 movwf   _PCH
               00034                                                 movfw   _CMD
               00035                                                 movwf   _PC
               00036 _branchfinish
               00037                                                 _@DONE
               00038         endif
               00039 
               00106 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBASIC~3.LIB" ;mbasic14\mbasicbutton.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFBUTTON
               00004 ;BUTTON                 _EXP,                   ;PIN            STACK0:STACK3
               00005 ;                               _EXP,                   ;PRESSED        STACK4:STACK7
               00006 ;                               _EXP,                   ;DELAY          STACK8:STACK11
               00007 ;                               _EXP,                   ;REPEAT         STACK12:STACK15
               00008 ;                               _VAR,                   ;WORKVAR        STACK16:STACK19
               00009 ;                               _EXP _EXEC,             ;LOGIC          WORK:WORK3
               00010 ;                               _ENHLABEL:
               00011 
               00012 _BUTTON_WORK1   equ _STACK
               00013 _BUTTON_WORK2   equ _STACK+1
               00014 _BUTTON_WORK3   equ _STACK+2
               00015 _BUTTON_WORK4   equ _STACK+3
               00016 
               00017 _BUTTON_DOWN    equ _STACK+4
               00018 
               00019 _BUTTON_PIN     equ _STACK+6
               00020 
               00021 _BUTTON_DELAY   equ _STACK+8
               00022 
               00023 _BUTTON_REPEAT  equ _STACK+12
               00024 
               00025 _BUTTON_WORK    equ _STACK+16
               00026 
               00027 _BUTTON_LOGIC   equ _WORK
               00028 
               00029                         _@ALIGNPAGE D'50'
               00030 _BUTTONCMD
               00031                                                 movfw   _BUTTON_WORK1   ;Save PIN number
               00032                                                 movwf   _BUTTON_PIN
               00033                                                 
               00034                                                 movfw   _BUTTON_DOWN
               00035                                                 skpz
               00036                                                 movlw   0xFF
               00037                                                 movwf   _BUTTON_DOWN    ;Down = 0 or 0xFF
               00038 
               00039                                                 movfw   _BUTTON_LOGIC   
               00040                                                 skpz                                    ;If logic = pressed
               00041                                                 movlw   0xFF                    ;down = !down 0xFF^0xFF=0
               00042                                                 xorlw   0xFF
               00043                                                 xorwf   _BUTTON_DOWN,F  ;else down = down(0^0xFF=0xFF
               00044 
               00045                                                 call    _button_checkpin
               00046                                                 skpz                    ; button is Pressed if zero 
               00047                                                 goto    _button_reset   ; button not Pressed so Finish
               00048 
               00049                         movfw   _BUTTON_WORK            ; Get Workspace Address
               00050                                                 movwf   FSR                                     ; Set Workspace Address
               00051         if _BANK2_START != 0
               00052                         btfsc   _BUTTON_WORK+1,0
               00053                         bsf     STATUS,IRP
               00054         endif
               00055 
               00056                                                 ;check for delay/repeat here and branch if delay/repeat
               00057                                                 movf    _BUTTON_DELAY,w
               00058                                                 skpz
               00059                                                 addlw   1
               00060                                                 skpz
               00061                                                 goto    _button_delay
               00062 
               00063                                                 movfw   INDF                            ; Test Workspace
               00064                                                 skpz                                            ; if not zero then don't run
               00065                                                 goto    _button_norun           ; Exit
               00066                                                 incf    INDF,f
               00067 
               00068                         movf    _BUTTON_DELAY,f         ; Test for debounce
               00069                                                 skpnz                                           ; Debounce
               00070                                                 goto    _button_run                     ; No, so run
               00071 _button_debounce
               00072                                                 movlw   LOW 20000
               00073                                                 movwf   _STACK
               00074                                                 movlw   HIGH 20000
               00075                                                 movwf   _STACK+1
               00076                                                 clrw
               00077                                                 _@CALL  _PAUSEUSFUNC16
               00078 
               00079                                                 call    _button_checkpin
               00080                                                 skpz                            ; button is Pressed if zero 
               00081                                                 goto    _button_reset           ; button not Pressed so Finish
               00082                                                 goto    _button_run
               00083 
               00084 _button_delay
               00085                                                 movfw   INDF
               00086                                                 skpz
               00087                                                 goto    _button_repeat
               00088 
               00089                         movfw   _BUTTON_DELAY           ; Get Delay value
               00090                                                 movwf   INDF                            ; Set Delay value
               00091                                                 goto    _button_debounce        ; Finish
               00092 _button_repeat
               00093                                                 decfsz  INDF,F                          ; Count down workspace
               00094                                                 goto    _button_norun           ; Exit
               00095                         movfw   _BUTTON_REPEAT          ; Get Repeat rate value
               00096                                                 movwf   INDF                            ; Set Repeat rate value
               00097                                                 goto    _button_run                     ; Exit
               00098 
               00099 _button_checkpin
               00100         if _BANK2_START != 0
               00101                                                 bcf             STATUS,IRP
               00102                 endif
               00103                                                 movfw   _BUTTON_PIN
               00104                                                 movwf   _BUTTON_WORK1
               00105                         _@CALL  _GETPIN                 ; Set Input PIN
               00106                                                 bsf             FSR,7                   ;
               00107                                                 iorwf   INDF,F                  ;
               00108                                                 bcf             FSR,7                   ;
               00109                                                 andwf   INDF,W                  ; Mask Current State(0 or 1)
               00110                                                 skpz
               00111                                                 movlw   0xFF                    ; State = 0 or 0xFF
               00112                                                 subwf   _BUTTON_DOWN,W  ; if Z then correct state
               00113                         return
               00114 _button_reset
               00115                                                 movfw   _BUTTON_WORK            ; Get Workspace Address
               00116                                                 movwf   FSR                                     ; Set Workspace Address
               00117         if _BANK2_START != 0
               00118                         btfsc   _BUTTON_WORK+1,0
               00119                         bsf     STATUS,IRP
               00120         endif
               00121                                                 movlw   0xFF
               00122                                                 movwf   INDF
               00123 _button_stall
               00124                                                 incf    INDF,F
               00125 _button_norun
               00126                                                 movlw   2
               00127                             addwf   _PC,F
               00128                         skpnc
               00129                                                 incf    _PCH,F
               00130                 ifdef _PACKEDTOKENS
               00131                                                 movlw   0xF
               00132                                                 iorwf   _PC,F
               00133                 endif
               00134         if _BANK2_START != 0
               00135                                                 bcf             STATUS,IRP
               00136                 endif
               00137                         _@CLRSP
               00138                                                 _@DONE
               00139 _button_run
               00140         if _BANK2_START != 0
               00141                                                 bcf             STATUS,IRP
               00142                 endif
               00143                                                 _@CLRSP
               00144                                                 _@GOTO  _GOTOCMD
               00145         endif
               00146 
               00107 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBASIC~4.LIB" ;mbasic14\mbasicclear.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFCLEAR
               00004 ;CLEAR           _EXEC:
               00005                         _@ALIGNPAGE D'35'
               00006 _CLEARCMD               
               00007                         movlw   _STACK
               00008                         movwf   FSR
               00009                         movlw   _BANK0_END-_STACK
               00010                         movwf   _WORK
               00011                         call    _clearbank
               00012         if _BANK1_START != 0
               00013                         movlw   _BANK1_START
               00014                         movwf   FSR
               00015                         movlw   _BANK1_END-_BANK1_START
               00016                         movwf   _WORK
               00017                         call    _clearbank
               00018         endif
               00019         if _BANK2_START != 0
               00020                         movlw   (_BANK2_START & 0ffh)
               00021                         movwf   FSR
               00022                         bsf     STATUS,IRP
               00023                         movlw   _BANK2_END-_BANK2_START
               00024                         movwf   _WORK
               00025                         call    _clearbank
               00026         endif
               00027         if _BANK3_START != 0
               00028                         movlw   (_BANK3_START & 0ffh)
               00029                         movwf   FSR
               00030                         bsf     STATUS,IRP
               00031                         movlw   _BANK3_END-_BANK3_START
               00032                         movwf   _WORK
               00033                         call    _clearbank
               00034         endif
               00035         if _BANK2_START != 0
               00036                                                 bcf     STATUS,IRP
               00037                 endif
               00038                                                 _@DONE
               00039 _clearbank              clrwdt
               00040                                                 clrf    INDF
               00041                         incf    FSR,F
               00042                         decfsz  _WORK,F
               00043                         goto    _clearbank
               00044                         return
               00045         endif
               00046 
               00108 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB0D77~1.LIB" ;mbasic14\mbasiccount.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFCOUNT
               00004 ;Timebase(resolution
               00005 ;20mhz  3.4us
               00006 ;16mhz  4.25us
               00007 ;12mhz  5.67us
               00008 ;10mhz  6.8us
               00009 ;8mhz   8.5us
               00010 ;4mhz   17us
               00011 
               00012 ;COUNT                  #                               ;STACK0:3
               00013 ;                               _EXP,                   ;STACK4:7
               00014 ;                               _EXP,                   ;STACK8:11
               00015 ;                               _VAR _EXEC:             ;WORK0:3
               00016 
               00017 #define _COUNT_WORK1    _STACK+0
               00018 #define _COUNT_WORK2    _STACK+1
               00019 #define _COUNT_WORK3    _STACK+2
               00020 #define _COUNT_WORK4    _STACK+3
               00021 
               00022 #define _COUNT_MASK             _STACK+4
               00023 
               00024 #define _COUNT_PERIOD1  _STACK+8
               00025 #define _COUNT_PERIOD2  _STACK+9
               00026 #define _COUNT_PERIOD3  _STACK+10
               00027 #define _COUNT_PERIOD4  _STACK+11
               00028 
               00029                         _@ALIGNPAGE D'100'
               00030 _COUNTCMD
               00031                                 ;Setup PIN variables
               00032                                 movfw   _COUNT_MASK             ;Get PIN#
               00033                                 movwf   _COUNT_WORK1    ;Set PIN#
               00034                                 _@CALL  _GETPIN
               00035                                 bsf     FSR,7
               00036                                 iorwf   INDF,F          ;Set pin to INPUT
               00037                 bcf     FSR,7
               00038                                 movwf   _COUNT_MASK     ;Save pin MASK
               00039                                 
               00040                                 ;Clear count
               00041                                 clrf    _COUNT_WORK1
               00042                                 clrf    _COUNT_WORK2
               00043                                 clrf    _COUNT_WORK3
               00044                                 clrf    _COUNT_WORK4
               00045 
               00046                                 ;Get Initial State
               00047                                 movfw   _COUNT_MASK
               00048                                 andwf   INDF,W
               00049                                 skpz
               00050                                 goto    _count_waithigh                         
               00051                                 goto    _count_waitlow
               00052                                 
               00053 _countinc       ;when pin goes high increment count
               00054                                                 incf    _COUNT_WORK1,F          ; 1
               00055                                                 skpnz                                           ; 1
               00056                                                 incf    _COUNT_WORK2,F          ; 1
               00057                                                 skpnz                                           ; 1
               00058                                                 incf    _COUNT_WORK3,F          ; 1
               00059                                                 skpnz                                           ; 1
               00060                                                 incf    _COUNT_WORK4,F          ; 1
               00061                                                 goto    $+1                                     ; 2
               00062                                                 goto    $+1                                     ; 2(17)
               00063                                                 
               00064                         movfw   INDF                            ; 1
               00065                             andwf   _COUNT_MASK,W               ; 1
               00066                                                 movlw   2                                       ; 1 handle 2 cycle inc
               00067                                                 skpz                                            ; 1
               00068                                                 goto    _count_waithigh_entry   ; 1/2(6)
               00069                                                 nop                                                     ; 1(6)
               00070 
               00071                                                 subwf   _COUNT_PERIOD1,F        ; 1
               00072                                                 movlw   1                                       ; 1
               00073                                                 skpc                                            ; 1
               00074                                                 subwf   _COUNT_PERIOD2,F        ; 1
               00075                                                 skpc                                            ; 1
               00076                                                 subwf   _COUNT_PERIOD3,F        ; 1
               00077                                                 skpc                                            ; 1
               00078                                                 subwf   _COUNT_PERIOD4,F        ; 1
               00079                                                 skpnc                                           ; 1
               00080                                                 goto    _count_waitlow          ; 2(17)
               00081                                                 goto    _count_finish
               00082 
               00083 _count_waitlow                                                                          ;while pin is low dec counter
               00084                                                 clrwdt                          ; 1
               00085                         movfw   INDF                            ; 1            oldstate 1 1 0 0
               00086                             andwf   _COUNT_MASK,W               ; 1     current state   1 0 1 0
               00087                                                 skpz                                            ; 1
               00088                                                 goto    _countinc                       ; 1/2(6)
               00089                                                 nop                                                     ; 1(6)
               00090 _count_waitlow_entry                                            
               00091                                                 movlw   1                                       ; 1
               00092                                                 subwf   _COUNT_PERIOD1,F        ; 1
               00093                                                 skpc                                            ; 1
               00094                                                 subwf   _COUNT_PERIOD2,F        ; 1
               00095                                                 skpc                                            ; 1
               00096                                                 subwf   _COUNT_PERIOD3,F        ; 1
               00097                                                 skpc                                            ; 1
               00098                                                 subwf   _COUNT_PERIOD4,F        ; 1
               00099                                                 skpnc                                           ; 1
               00100                                                 goto    _count_waitlow          ; 2(17)
               00101                                                 goto    _count_finish
               00102 
               00103 _count_waithigh                                                                         ;while pin is high dec counter
               00104                                                 clrwdt                          ; 1
               00105                         movfw   INDF                            ; 1            oldstate 1 1 0 0
               00106                             andwf   _COUNT_MASK,W               ; 1     current state   1 0 1 0
               00107                                                 skpnz                                           ; 1
               00108                                                 goto    _count_waitlow_entry    ; 1/2(6)
               00109                                                 movlw   1                                       ; 1(6)
               00110 _count_waithigh_entry
               00111                                                 subwf   _COUNT_PERIOD1,F        ; 1
               00112                                                 movlw   1                                       ; 1
               00113                                                 skpc                                            ; 1
               00114                                                 subwf   _COUNT_PERIOD2,F        ; 1
               00115                                                 skpc                                            ; 1
               00116                                                 subwf   _COUNT_PERIOD3,F        ; 1
               00117                                                 skpc                                            ; 1
               00118                                                 subwf   _COUNT_PERIOD4,F        ; 1
               00119                                                 skpnc                                           ; 1
               00120                                                 goto    _count_waithigh         ; 2(17)
               00121 _count_finish
               00122                         _@CALL  _LETFUNC                ; Save Count
               00123                         _@CLRSP
               00124                                                 _@DONE
               00125                 endif           
               00109 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB7D3E~1.LIB" ;mbasic14\mbasicdtmf.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFDTMFOUT
               00004 ;DTMFOUT                        ####                    ;STACK0:3 4:7 8:11 12:15
               00005 ;                                       _EXP                    ;STACK16:19
               00006 ;                                       {,_EXP|200}             ;STACK20:23
               00007 ;                                       {,_EXP|50},             ;STACK24:27
               00008 ;                                       [_ENHEXP]               ;WORK0:3
               00009 
               00010 ;Calls FREQOUTCMD
               00011 ;FREQOUT                _EXP                            :STACK0:3
               00012 ;                               #,                                      ;STACK4:7
               00013 ;                               _EXP,                           ;STACK8:11
               00014 ;                               _EXP{,                          ;STACK12:15
               00015 ;                               _EXP|0} _EXEC:          ;WORK0:3
               00016 
               00017 ;#define _FREQPIN               _STACK
               00018 
               00019 ;#define _FREQON1               _STACK+8
               00020 ;#define _FREQON2               _STACK+9
               00021 ;#define _FREQON3               _STACK+10
               00022 ;#define _FREQON4               _STACK+11
               00023 
               00024 ;#define _FREQLO                _STACK+12
               00025 ;#define _FREQHI                _STACK+13
               00026 ;#define _FREQLO2               _STACK+14
               00027 ;#define _FREQHI2               _STACK+15
               00028 
               00029 #define _DTMFPIN                _STACK+16
               00030 #define _DTMFWORK2              _STACK+17
               00031 #define _DTMFWORK3              _STACK+18
               00032 #define _DTMFWORK4              _STACK+19
               00033 
               00034 #define _DTMFON1                _STACK+20
               00035 #define _DTMFON2                _STACK+21
               00036 #define _DTMFON3                _STACK+22
               00037 #define _DTMFON4                _STACK+23
               00038 
               00039 #define _DTMFOFF1               _STACK+24
               00040 #define _DTMFOFF2               _STACK+25
               00041 #define _DTMFOFF3               _STACK+26
               00042 #define _DTMFOFF4               _STACK+27
               00043 
               00044                         _@ALIGNPAGE D'80'
               00045 _DTMFOUTCMD
               00046                         call    _dtmfxlt                ; Translate tone number
               00047                         movwf   _WORK+4                 ; Save Frequency Entries
               00048                                                 call    _dtmfgtf                ; Get high byte of Freq2
               00049                         movwf   _WORK+1                 ; Save HFreq2
               00050                         
               00051                         incf    _WORK+4,F               ; Point to low byte
               00052                                                 call    _dtmfgtf        ; Get low byte of Freq2
               00053                         movwf   _WORK                   ; Save LFreq2
               00054                         
               00055                         swapf   _WORK+4,F               ; Point to Freq1
               00056                                                 call    _dtmfgtf        ; Get high byte of Freq1
               00057                         movwf   _FREQHI         ; Save HFreq1
               00058                         
               00059                         incf    _WORK+4,F               ; Point to low byte
               00060                                                 call    _dtmfgtf        ; Get low byte of Freq1
               00061                         movwf   _FREQLO         ; Save LFreq1
               00062                                                 
               00063                                                 movfw   _DTMFPIN
               00064                                                 movwf   _FREQCNT
               00065 
               00066                                                 ;FREQON is in .5us increments
               00067                                                 _@MOVE  _DTMFON1,_FREQON1
               00068                                                 
               00069                                                 _@CALL  _FREQOUTCMD     ; Play the tones
               00070                                                 
               00071                         rrf             _DTMFOFF4,w             ;Move 1/2 OFF time to _STACK
               00072                         movwf   _STACK+3
               00073                         rrf             _DTMFOFF3,w
               00074                         movwf   _STACK+2
               00075                         rrf             _DTMFOFF2,w
               00076                         movwf   _STACK+1
               00077                         rrf             _DTMFOFF1,w
               00078                         movwf   _STACK
               00079                                                 clrw
               00080                                                 _@CALL  _PAUSEUSFUNC
               00081                                                 
               00082                                                 _@DONE
               00083 
               00084 _dtmfxlt                                movlw   LOW _dtmftbl
               00085                         addwf   _WORK,F
               00086                                                 movlw   HIGH _dtmftbl
               00087                                                 skpnc
               00088                                                 addlw   1
               00089                                                 movwf   PCLATH
               00090                         movfw   _WORK
               00091                                                 movwf   PCL
               00092 _dtmftbl                retlw   0xa6            ; 0 7
               00093                         retlw   0x80            ; 1 0
               00094                         retlw   0xa0            ; 2 4
               00095                         retlw   0xc0            ; 3 8
               00096                         retlw   0x82            ; 4 1
               00097                         retlw   0xa2            ; 5 5
               00098                         retlw   0xc2            ; 6 9
               00099                         retlw   0x84            ; 7 2
               00100                         retlw   0xa4            ; 8 6
               00101                         retlw   0xc4            ; 9 10
               00102                         retlw   0x86            ; * 3
               00103                         retlw   0xc6            ; # 11
               00104                         retlw   0xe0            ; A 12
               00105                         retlw   0xe2            ; B 13
               00106                         retlw   0xe4            ; C 14
               00107                         retlw   0xe6            ; D 15
               00108 _dtmfgtf                movfw   _WORK+4
               00109                                                 andlw   0fh
               00110                                                 addlw   LOW _dtmfr
               00111                         movwf   _WORK
               00112                                                 movlw   HIGH _dtmfr
               00113                                                 skpnc
               00114                                                 addlw   1
               00115                                                 movwf   PCLATH
               00116                         movfw   _WORK
               00117                                                 movwf   PCL
               00118 _dtmfr                  retlw   high 697
               00119                         retlw   low 697
               00120                         retlw   high 770
               00121                         retlw   low 770
               00122                         retlw   high 852
               00123                         retlw   low 852
               00124                         retlw   high 941
               00125                         retlw   low 941
               00126                         retlw   high 1209
               00127                         retlw   low 1209
               00128                         retlw   high 1336
               00129                         retlw   low 1336
               00130                         retlw   high 1477
               00131                         retlw   low 1477
               00132                         retlw   high 1633
               00133                         retlw   low 1633
               00134         endif   
               00135 
               00110 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB0D47~1.LIB" ;mbasic14\mbasicsound.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                 ifdef _DEFSOUND8
               00004 ;SOUND8          _VAR,                          ;STACK0:3
               00005 ;                               [_EXP\                          ;STACK4:7
               00006 ;                               _EXP                            ;STACK8:11
               00007 ;                               {\_EXP|0}                       ;STACK12:15
               00008 ;                               {\_EXP|0}                       ;STACK16:19
               00009 ;                               {\_EXP|0}                       ;STACK20:23
               00010 ;                               {\_EXP|0}                       ;STACK24:27
               00011 ;                               {\_EXP|0}                       ;STACK28:31
               00012 ;                               {\_EXP|0}                       ;STACK32:35
               00013 ;                               {\_EXP|0} _EXEC]        ;WORK0:3
               00014                         _@ALIGNPAGE D'200'
               00015 _SOUND8CMD
               00016 #define _SOUND8PORT             _STACK
               00017 #define _SOUND8MASK             _STACK+1
               00018 #define _SOUND8CNT              _STACK+2
               00019 #define _SOUND8FLAG             _STACK+3
               00020 
               00021 #define _SOUND8TIME1    _STACK+4
               00022 #define _SOUND8TIME2    _STACK+5
               00023 #define _SOUND8TIME3    _STACK+6
               00024 #define _SOUND8TIME4    _STACK+7
               00025 
               00026 #define _SOUND8FREQ1LO  _STACK+8
               00027 #define _SOUND8FREQ1HI  _STACK+9
               00028 #define _SOUND8WORK1    _STACK+10
               00029 #define _SOUND8WORK2    _STACK+11
               00030 
               00031 #define _SOUND8FREQ2LO  _STACK+12
               00032 #define _SOUND8FREQ2HI  _STACK+13
               00033 #define _SOUND8WORK3    _STACK+14
               00034 #define _SOUND8WORK4    _STACK+15
               00035 
               00036 #define _SOUND8FREQ3LO  _STACK+16
               00037 #define _SOUND8FREQ3HI  _STACK+17
               00038 #define _SOUND8WORK5    _STACK+18
               00039 #define _SOUND8WORK6    _STACK+19
               00040 
               00041 #define _SOUND8FREQ4LO  _STACK+20
               00042 #define _SOUND8FREQ4HI  _STACK+21
               00043 #define _SOUND8WORK7    _STACK+22
               00044 #define _SOUND8WORK8    _STACK+23
               00045 
               00046 #define _SOUND8FREQ5LO  _STACK+24
               00047 #define _SOUND8FREQ5HI  _STACK+25
               00048 #define _SOUND8WORK9    _STACK+26
               00049 #define _SOUND8WORK10   _STACK+27
               00050 
               00051 #define _SOUND8FREQ6LO  _STACK+28
               00052 #define _SOUND8FREQ6HI  _STACK+29
               00053 #define _SOUND8WORK11   _STACK+30
               00054 #define _SOUND8WORK12   _STACK+31
               00055 
               00056 #define _SOUND8FREQ7LO  _STACK+32
               00057 #define _SOUND8FREQ7HI  _STACK+33
               00058 #define _SOUND8WORK13   _STACK+34
               00059 #define _SOUND8WORK14   _STACK+35
               00060 
               00061 #define _SOUND8FREQ8LO  _STACK+36
               00062 #define _SOUND8FREQ8HI  _STACK+37
               00063 #define _SOUND8WORK15   _STACK+38
               00064 #define _SOUND8WORK16   _STACK+39
               00065 
               00066                                                 movlw   _STACK + 4
               00067                                                 movwf   _SP
               00068 
               00069                                                 movfw   _WORK
               00070                                                 movwf   _SOUND8FREQ8LO
               00071                                                 movfw   _WORK+1
               00072                                                 movwf   _SOUND8FREQ8HI
               00073                                                 
               00074                                                 ;Divide freqs by 8
               00075                                                 movlw   3
               00076                                                 movwf   _WORK+5
               00077 _SOUND8SETUP1
               00078                                                 movlw   8
               00079                                                 movwf   _WORK+4
               00080                                                 movlw   _SOUND8FREQ1LO
               00081                                                 movwf   FSR
               00082 _SOUND8SETUP2
               00083                                                 clrc
               00084                                                 rlf     INDF,F
               00085                                                 incf    FSR,F
               00086                                                 rlf     INDF,F
               00087                                                 incf    FSR,F
               00088                                                 
               00089                                                 incf    FSR,F   ;skip workspace areas
               00090                                                 incf    FSR,F
               00091                                                 
               00092                                                 decfsz  _WORK+4,F
               00093                                                 goto    _SOUND8SETUP2
               00094                                                 decfsz  _WORK+5,F
               00095                                                 goto    _SOUND8SETUP1
               00096 
               00097                                                 ;Clear MASK
               00098                                                 clrf    _SOUND8MASK
               00099                                                 
               00100                                                 ;Test/Setup first run
               00101                                                 movfw   _SOUND8PORT
               00102                                                 movwf   FSR
               00103                                                 btfsc   _SOUND8FLAG,0   ; Test Runonce flag
               00104                                                 goto    _sound8loop
               00105                                                 bsf             FSR,7
               00106                                                 clrf    INDF
               00107                                                 bcf             FSR,7
               00108                                                 clrf    INDF
               00109                                                 bsf     _SOUND8FLAG,0   ; Set Runonce flag
               00110 
               00111 _sound8loop             
               00112                                                 clrwdt                  ;1 Keep Watchdog happy
               00113 
               00114                                                 movfw   _SOUND8FREQ1LO  ;1
               00115                                                 addwf   _SOUND8WORK1,F  ;1
               00116                                                 movfw   _SOUND8FREQ1HI  ;1
               00117                                                 skpnc                   ;1
               00118                                                 addlw   1                               ;1
               00119                                                 addwf   _SOUND8WORK2,F  ;1
               00120                                                 movlw   0x01            ;1
               00121                                                 skpnc                   ;1
               00122                                                 xorwf   _SOUND8MASK,F   ;1
               00123 
               00124                                                 movfw   _SOUND8FREQ2LO  ;1
               00125                                                 addwf   _SOUND8WORK3,F  ;1
               00126                                                 movfw   _SOUND8FREQ2HI  ;1
               00127                                                 skpnc                   ;1
               00128                                                 addlw   1               ;1
               00129                                                 addwf   _SOUND8WORK4,F  ;1
               00130                                                 movlw   0x02            ;1
               00131                                                 skpnc                   ;1
               00132                                                 xorwf   _SOUND8MASK,F   ;1
               00133 
               00134                                                 movfw   _SOUND8FREQ3LO  ;1
               00135                                                 addwf   _SOUND8WORK5,F  ;1
               00136                                                 movfw   _SOUND8FREQ3HI  ;1
               00137                                                 skpnc                   ;1
               00138                                                 addlw   1               ;1
               00139                                                 addwf   _SOUND8WORK6,F  ;1
               00140                                                 movlw   0x04            ;1
               00141                                                 skpnc                   ;1
               00142                                                 xorwf   _SOUND8MASK,F   ;1
               00143 
               00144                                                 movfw   _SOUND8FREQ4LO  ;1
               00145                                                 addwf   _SOUND8WORK7,F  ;1
               00146                                                 movfw   _SOUND8FREQ4HI  ;1
               00147                                                 skpnc                   ;1
               00148                                                 addlw   1               ;1
               00149                                                 addwf   _SOUND8WORK8,F  ;1
               00150                                                 movlw   0x08            ;1
               00151                                                 skpnc                   ;1
               00152                                                 xorwf   _SOUND8MASK,F   ;1
               00153 
               00154                                                 movfw   _SOUND8FREQ5LO  ;1
               00155                                                 addwf   _SOUND8WORK9,F  ;1
               00156                                                 movfw   _SOUND8FREQ5HI  ;1
               00157                                                 skpnc                   ;1
               00158                                                 addlw   1               ;1
               00159                                                 addwf   _SOUND8WORK10,F ;1
               00160                                                 movlw   0x10            ;1
               00161                                                 skpnc                   ;1
               00162                                                 xorwf   _SOUND8MASK,F   ;1
               00163 
               00164                                                 movfw   _SOUND8FREQ6LO  ;1
               00165                                                 addwf   _SOUND8WORK11,F ;1
               00166                                                 movfw   _SOUND8FREQ6HI  ;1
               00167                                                 skpnc                   ;1
               00168                                                 addlw   1               ;1
               00169                                                 addwf   _SOUND8WORK12,F ;1
               00170                                                 movlw   0x20            ;1
               00171                                                 skpnc                   ;1
               00172                                                 xorwf   _SOUND8MASK,F   ;1
               00173 
               00174                                                 movfw   _SOUND8FREQ7LO  ;1
               00175                                                 addwf   _SOUND8WORK13,F ;1
               00176                                                 movfw   _SOUND8FREQ7HI  ;1
               00177                                                 skpnc                   ;1
               00178                                                 addlw   1               ;1
               00179                                                 addwf   _SOUND8WORK14,F ;1
               00180                                                 movlw   0x40            ;1
               00181                                                 skpnc                   ;1
               00182                                                 xorwf   _SOUND8MASK,F   ;1
               00183 
               00184                                                 movfw   _SOUND8FREQ8LO  ;1
               00185                                                 addwf   _SOUND8WORK15,F ;1
               00186                                                 movfw   _SOUND8FREQ8HI  ;1
               00187                                                 skpnc                   ;1
               00188                                                 addlw   1               ;1
               00189                                                 addwf   _SOUND8WORK16,F ;1
               00190                                                 movlw   0x80            ;1
               00191                                                 skpnc                   ;1
               00192                                                 xorwf   _SOUND8MASK,F   ;1
               00193 
               00194                                                 movfw   _SOUND8MASK     ;1
               00195                                                 movwf   INDF                    ;1
               00196                                                 _@RATEDELAY D'16393',D'80'      ;61us
               00197                                                 movlw   -61                             ;1
               00198                                                                                                 
               00199                                                 addwf   _SOUND8TIME1,F          ;1 Countdown Low
               00200                                                 movlw   -1                                      ;1
               00201                                                 skpc                                            ;1
               00202                                                 addwf   _SOUND8TIME2,F          ;1
               00203                                                 skpc                                            ;1
               00204                                                 addwf   _SOUND8TIME3,F          ;1
               00205                                                 skpc                                            ;1
               00206                                                 addwf   _SOUND8TIME4,F          ;1
               00207                                                 skpnc                                           ;1
               00208                                                 goto    _sound8loop                     ;2(87)
               00209 
               00210                                                 _@DONE
               00211                 endif
               00212 
               00213                 ifdef _DEFSOUND
               00214 ;SOUND                  _EXP                    ;STACK0:3
               00215 ;                               #                               ;STACK4:7
               00216 ;                               [_EXP\                  ;STACK8:11
               00217 ;                               _EXP _EXEC]             ;WORK0:3
               00218                                 
               00219 #define _SOUNDWORK1     _STACK
               00220 #define _SOUNDWORK2     _STACK+1
               00221 #define _SOUNDPORT      _STACK+2
               00222 #define _SOUNDMASK      _STACK+3
               00223 
               00224 #define _SOUNDWORK3             _STACK+4
               00225 #define _SOUNDFLAG      _STACK+5
               00226 
               00227 #define _SOUNDTIME1             _STACK+8
               00228 #define _SOUNDTIME2             _STACK+9
               00229 #define _SOUNDTIME3             _STACK+10
               00230 #define _SOUNDTIME4             _STACK+11
               00231 
               00232 #define _SOUNDFREQLO    _WORK
               00233 #define _SOUNDFREQHI    _WORK+1
               00234 
               00235                         _@ALIGNPAGE D'100'
               00236 _SOUNDCMD
               00237                                                 movlw   _STACK+8
               00238                                                 movwf   _SP
               00239                                                 
               00240                                                 clrc                                    ;Freq*2
               00241                                                 rlf     _SOUNDFREQLO,F
               00242                                                 rlf     _SOUNDFREQHI,F
               00243 
               00244                 if _MHZ <5900000
               00245                                                 clrc                                    ;FREQ*2
               00246                                                 rlf     _SOUND2FREQLO,F
               00247                                                 rlf     _SOUND2FREQHI,F
               00248                 endif
               00249 
               00250                                                 btfsc   _SOUNDFLAG,0   ; Test Runonce flag
               00251                                                 goto    _soundskip
               00252                                                 
               00253                                                 _@CALL  _GETPIN
               00254                                                 bsf     FSR,7
               00255                                                 xorlw   0xff
               00256                                                 andwf   INDF,F
               00257                                                 xorlw   0xff
               00258                                                 bcf     FSR,7           ; Point back to port
               00259                                                 movwf   _SOUNDMASK      ; Save Pin mask
               00260                                                 movfw   FSR
               00261                                                 movwf   _SOUNDPORT
               00262                                                 bsf     _SOUNDFLAG,0   ; Set Runonce flag
               00263 _soundskip
               00264                                                 movfw   _SOUNDPORT
               00265                                                 movwf   FSR
               00266                                                 clrf    _SOUNDWORK1     ; Zero counterT6
               00267                                                 clrf    _SOUNDWORK2
               00268 
               00269 _soundloop              clrwdt                  ;1 Keep Watchdog happy
               00270                                                 movfw   _SOUNDFREQLO    ;1
               00271                                                 addwf   _SOUNDWORK1,F   ;1
               00272                                                 movfw   _SOUNDFREQHI    ;1
               00273                                                 skpnc                   ;1
               00274                                                 addlw   1                               ;1
               00275                                                 addwf   _SOUNDWORK2,F   ;1
               00276                                                 movfw   _SOUNDMASK      ;1
               00277                                                 skpnc                   ;1
               00278                                                 xorwf   INDF,F          ;1
               00279                 if _MHZ < 5900000
               00280                                                 _@RATEDELAY 33333,28    ;30us rate
               00281                                                 movlw   -30                                     ;1
               00282                 else
               00283                                                 _@RATEDELAY 66666,28    ;15us rate
               00284                                                 movlw   -15                                     ;1
               00285                 endif
               00286 
               00287                                                 addwf   _SOUNDTIME1,F           ;1 Countdown Low
               00288                                                 movlw   -1                                      ;1
               00289                                                 skpc                                            ;1
               00290                                                 addwf   _SOUNDTIME2,F           ;1
               00291                                                 skpc                                            ;1
               00292                                                 addwf   _SOUNDTIME3,F           ;1
               00293                                                 skpc                                            ;1
               00294                                                 addwf   _SOUNDTIME4,F           ;1
               00295                                                 skpnc                                           ;1
               00296                                                 goto    _soundloop              ;2(22)
               00297                                                 
               00298                                                 _@DONE
               00299                 endif
               00300 
               00301                 ifdef _DEFSOUND2
               00302 ;SOUND2                 _EXP\                           ;STACK0:3
               00303 ;                               _EXP                            ;STACK4:7
               00304 ;                               #,                                      ;STACK8:11
               00305 ;                               [_EXP\                          ;STACK12:15
               00306 ;                               _EXP                            ;STACK16:19
               00307 ;                               {\_EXP|0} _EXEC]        ;WORK0:3
               00308                                 
               00309 #define _SOUND2WORK1    _STACK
               00310 #define _SOUND2WORK2    _STACK+1
               00311 #define _SOUND2WORK3    _STACK+2
               00312 #define _SOUND2WORK4    _STACK+3
               00313 
               00314 #define _SOUND2PORT2    _STACK+4
               00315 #define _SOUND2MASK2    _STACK+5
               00316 #define _SOUND2PORT             _STACK+6
               00317 #define _SOUND2MASK             _STACK+7
               00318 
               00319 #define _SOUND2WORK5    _STACK+8
               00320 #define _SOUND2FLAG             _STACK+9
               00321 
               00322 #define _SOUND2TIME1    _STACK+12
               00323 #define _SOUND2TIME2    _STACK+13
               00324 #define _SOUND2TIME3    _STACK+14
               00325 #define _SOUND2TIME4    _STACK+15
               00326 
               00327 #define _SOUND2FREQLO   _STACK+16
               00328 #define _SOUND2FREQHI   _STACK+17
               00329 
               00330 #define _SOUND2FREQ2LO  _WORK
               00331 #define _SOUND2FREQ2HI  _WORK+1
               00332 
               00333                         _@ALIGNPAGE D'60'
               00334 _SOUND2CMD
               00335                                                 movlw   _STACK+12
               00336                                                 movwf   _SP
               00337 
               00338                                                 clrc
               00339                                                 rlf     _SOUND2FREQLO,F
               00340                                                 rlf     _SOUND2FREQHI,F
               00341                                                 clrc
               00342                                                 rlf     _SOUND2FREQ2LO,F
               00343                                                 rlf     _SOUND2FREQ2HI,F
               00344 
               00345                 if _MHZ < 9350000
               00346                                                 clrc
               00347                                                 rlf     _SOUND2FREQLO,F
               00348                                                 rlf     _SOUND2FREQHI,F
               00349                                                 clrc
               00350                                                 rlf     _SOUND2FREQ2LO,F
               00351                                                 rlf     _SOUND2FREQ2HI,F
               00352                 endif
               00353 
               00354                                                 btfsc   _SOUND2FLAG,0   ; Test Runonce flag
               00355                                                 goto    _sound2skip
               00356 
               00357                                                 _@CALL  _GETPIN
               00358                                                 bsf     FSR,7
               00359                                                 xorlw   0xff
               00360                                                 andwf   INDF,F
               00361                                                 xorlw   0xff
               00362                                                 bcf     FSR,7           ; Point back to port
               00363                                                 movwf   _SOUND2MASK      ; Save Pin mask
               00364                                                 movfw   FSR
               00365                                                 movwf   _SOUND2PORT
               00366 
               00367                                                 movfw   _STACK+4
               00368                                                 movwf   _STACK
               00369                                                 _@CALL  _GETPIN
               00370                                                 bsf     FSR,7
               00371                                                 xorlw   0xff
               00372                                                 andwf   INDF,F
               00373                                                 xorlw   0xff
               00374                                                 bcf     FSR,7           ; Point back to port
               00375                                                 movwf   _SOUND2MASK2    ; Save Pin mask
               00376                                                 movfw   FSR
               00377                                                 movwf   _SOUND2PORT2
               00378 
               00379                                                 bsf     _SOUND2FLAG,0   ; Set Runonce flag
               00380 _sound2skip
               00381                                                 clrf    _SOUND2WORK1    ; Zero counter1
               00382                                                 clrf    _SOUND2WORK2
               00383                                                 clrf    _SOUND2WORK3    ; Zero counter2
               00384                                                 clrf    _SOUND2WORK4
               00385 _sound2loop             clrwdt                  ;1 Keep Watchdog happy
               00386                                                 movfw   _SOUND2FREQLO   ;1
               00387                                                 addwf   _SOUND2WORK1,F  ;1
               00388                                                 movfw   _SOUND2FREQHI   ;1
               00389                                                 skpnc                   ;1
               00390                                                 addlw   1                               ;1
               00391                                                 addwf   _SOUND2WORK2,F  ;1
               00392                                                 movfw   _SOUND2PORT             ;1
               00393                                                 movwf   FSR                             ;1
               00394                                                 movfw   _SOUND2MASK     ;1
               00395                                                 skpnc                   ;1
               00396                                                 xorwf   INDF,F          ;1
               00397                                                 movfw   _SOUND2FREQ2LO  ;1
               00398                                                 addwf   _SOUND2WORK3,F  ;1
               00399                                                 movfw   _SOUND2FREQ2HI  ;1
               00400                                                 skpnc                   ;1
               00401                                                 addlw   1                               ;1
               00402                                                 addwf   _SOUND2WORK4,F  ;1
               00403                                                 movfw   _SOUND2PORT2    ;1
               00404                                                 movwf   FSR                             ;1
               00405                                                 movfw   _SOUND2MASK2    ;1
               00406                                                 skpnc                   ;1
               00407                                                 xorwf   INDF,F          ;1
               00408                 if _MHZ < 9350000
               00409                                                 _@RATEDELAY 33333,28    ;30us rate
               00410                                                 movlw   -30                             ;1
               00411                 else
               00412                                                 _@RATEDELAY 66666,28    ;15us rate
               00413                                                 movlw   -15                             ;1
               00414                 endif
               00415                                                 addwf   _SOUND2TIME1,F  ;1 Countdown Low
               00416                                                 movlw   -1                              ;1
               00417                                                 skpc                                    ;1
               00418                                                 addwf   _SOUND2TIME2,F  ;1
               00419                                                 skpc                                    ;1
               00420                                                 addwf   _SOUND2TIME3,F  ;1
               00421                                                 skpc                                    ;1
               00422                                                 addwf   _SOUND2TIME4,F  ;1
               00423                                                 skpnc                   ;1
               00424                                                 goto    _sound2loop     ;2(35)
               00425 
               00426                                                 _@DONE
               00427                 endif
               00111 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBF565~1.LIB" ;mbasic14\mbasicdtmf2.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFDTMFOUT2
               00004 ;DTMFOUT2                       _EXP\                   ;STACK0:3
               00005 ;                                       _EXP                    ;STACK4:7
               00006 ;                                       ###                             ;STACK8:11 12:15 16:19
               00007 ;                                       {,_EXP|200}             ;STACK20:23
               00008 ;                                       {,_EXP|50},             ;STACK24:27
               00009 ;                                       [_ENHEXP]               ;WORK0:3
               00010 
               00011 ;Calls SOUND2CMD
               00012 ;SOUND2                 _EXP\                           ;STACK0:3
               00013 ;                               _EXP                            ;STACK4:7
               00014 ;                               #,                                      ;STACK8:11
               00015 ;                               [_EXP\                          ;STACK12:15
               00016 ;                               _EXP                            ;STACK16:19
               00017 ;                               {\_EXP|0} _EXEC]        ;WORK0:3
               00018 
               00019 ;#define _SOUND2WORK1   _STACK
               00020 ;#define _SOUND2WORK2   _STACK+1
               00021 ;#define _SOUND2WORK3   _STACK+2
               00022 ;#define _SOUND2WORK4   _STACK+3
               00023 
               00024 ;#define _SOUND2PORT2   _STACK+4
               00025 ;#define _SOUND2MASK2   _STACK+5
               00026 ;#define _SOUND2PORT    _STACK+6
               00027 ;#define _SOUND2MASK    _STACK+7
               00028 
               00029 ;#define _SOUND2WORK5   _STACK+8
               00030 ;#define _SOUND2FLAG    _STACK+9
               00031 
               00032 ;#define _SOUND2TIME1   _STACK+12
               00033 ;#define _SOUND2TIME2   _STACK+13
               00034 ;#define _SOUND2TIME3   _STACK+14
               00035 ;#define _SOUND2TIME4   _STACK+15
               00036 
               00037 ;#define _SOUND2FREQLO  _STACK+16
               00038 ;#define _SOUND2FREQHI  _STACK+17
               00039 
               00040 ;#define _SOUND2FREQ2LO _WORK
               00041 ;#define _SOUND2FREQ2HI _WORK+1
               00042 
               00043 #define _DTMF2TIME1             _STACK+20
               00044 #define _DTMF2TIME2             _STACK+21
               00045 #define _DTMF2TIME3             _STACK+22
               00046 #define _DTMF2TIME4             _STACK+23
               00047 
               00048 #define _DTMF2OFF1              _STACK+24
               00049 #define _DTMF2OFF2              _STACK+25
               00050 #define _DTMF2OFF3              _STACK+26
               00051 #define _DTMF2OFF4              _STACK+27
               00052 
               00053 #define _DTMF2TONE              _WORK
               00054 
               00055                         _@ALIGNPAGE D'80'
               00056 _DTMFOUT2CMD
               00057                         call    _dtmf2xlt               ; Translate tone number
               00058                         
               00059                         movwf   _DTMF2TONE              ; Save Frequency Entries
               00060                         call    _dtmf2gtf               ; Get high byte of Freq2
               00061                         movwf   _SOUND2FREQHI   ; Save HFreq2
               00062                         
               00063                         incf    _DTMF2TONE,F    ; Point to low byte
               00064                         call    _dtmf2gtf               ; Get low byte of Freq2
               00065                         movwf   _SOUND2FREQLO   ; Save LFreq2
               00066                         
               00067                         swapf   _DTMF2TONE,F    ; Point to Freq1
               00068                         call    _dtmf2gtf               ; Get high byte of Freq1
               00069                         movwf   _SOUND2FREQ2HI  ; Save HFreq1
               00070                         
               00071                         incf    _DTMF2TONE,F    ; Point to low byte
               00072                         call    _dtmf2gtf               ; Get low byte of Freq1
               00073                         movwf   _SOUND2FREQ2LO  ; Save LFreq1
               00074                         
               00075                         _@MOVE  _DTMF2TIME1,_SOUND2TIME1
               00076                         
               00077                         _@CALL  _SOUND2CMD      ; Play the tones
               00078                         
               00079                         _@MOVE  _DTMF2OFF1,_STACK       ; Offtime
               00080                         clrw
               00081                         _@CALL  _PAUSEUSFUNC
               00082                         
               00083                                                 _@DONE
               00084                         
               00085 _dtmf2xlt                               movfw   _DTMF2TONE
               00086                                                 addlw   LOW _dtmf2tbl
               00087                         movwf   _DTMF2TONE
               00088                         movlw   HIGH _dtmf2tbl
               00089                                                 skpnc
               00090                                                 addlw   1
               00091                                                 movwf   PCLATH
               00092                         movfw   _DTMF2TONE
               00093                                                 movwf   PCL
               00094 _dtmf2tbl               
               00095                                         retlw   0xa6                    ; 0 7
               00096                         retlw   0x80            ; 1 0
               00097                         retlw   0xa0            ; 2 4
               00098                         retlw   0xc0            ; 3 8
               00099                         retlw   0x82            ; 4 1
               00100                         retlw   0xa2            ; 5 5
               00101                         retlw   0xc2            ; 6 9
               00102                         retlw   0x84            ; 7 2
               00103                         retlw   0xa4            ; 8 6
               00104                         retlw   0xc4            ; 9 10
               00105                         retlw   0x86            ; * 3
               00106                         retlw   0xc6            ; # 11
               00107                         retlw   0xe0            ; A 12
               00108                         retlw   0xe2            ; B 13
               00109                         retlw   0xe4            ; C 14
               00110                         retlw   0xe6            ; D 15
               00111 _dtmf2gtf               movfw   _DTMF2TONE
               00112                                                 andlw   0fh
               00113                         addlw   LOW _dtmf2freq
               00114                                                 movwf   _CMD
               00115                         movlw   HIGH _dtmf2freq
               00116                                                 skpnc
               00117                                                 addlw   1
               00118                                                 movwf   PCLATH
               00119                                                 movfw   _CMD
               00120                                                 movwf   PCL
               00121 _dtmf2freq              retlw   high 697
               00122                         retlw   low 697
               00123                         retlw   high 770
               00124                         retlw   low 770
               00125                         retlw   high 852
               00126                         retlw   low 852
               00127                         retlw   high 941
               00128                         retlw   low 941
               00129                         retlw   high 1209
               00130                         retlw   low 1209
               00131                         retlw   high 1336
               00132                         retlw   low 1336
               00133                         retlw   high 1477
               00134                         retlw   low 1477
               00135                         retlw   high 1633
               00136                         retlw   low 1633
               00137         endif   
               00112 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB7554~1.LIB" ;mbasic14\mbasiclook.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFLOOKDOWN
               00004 ;LOOKDOWN               _EXP,                           ;STACK0:3
               00005 ;                               {_CMP|_EQUAL,}          ;STACK4:7
               00006 ;                               [_EXP _EXEC],           ;WORK0:3
               00007 ;                               _TLET:
               00008 
               00009 _VAL1           equ     _STACK
               00010 _VAL2           equ     _STACK+1
               00011 _VAL3           equ     _STACK+2
               00012 _VAL4           equ     _STACK+3
               00013 
               00014 _CMPCMD         equ     _STACK+4
               00015 _CNTR           equ     _STACK+5
               00016 _STUBH          equ     _STACK+6
               00017 _STUBL          equ     _STACK+7
               00018 
               00019 _DATA1          equ     _WORK+1
               00020 _DATA2          equ     _WORK+2
               00021 _DATA3          equ     _WORK+3
               00022 _DATA4          equ     _WORK+4
               00023 
               00024 
               00025                         _@ALIGNPAGE D'30'
               00026 _LOOKDOWNCMD
               00027                         incf    _CMPCMD,W
               00028                         skpnz
               00029                         goto    _lookdownfinish
               00030 
               00031                         movlw   _STACK+4                ;Prepare for 32bit CMP
               00032                         movwf   _SP           
               00033                         
               00034                                 _@CALL  _CMP
               00035                         andwf   _CMPCMD,w
               00036                                                 skpz
               00037                                                 goto    _lookdowntrue
               00038 _lookdownfalse
               00039                         incf    _CNTR,F                 ;FALSE so inc counter
               00040                                                 goto    _lookdownfinish
               00041 _lookdowntrue                   
               00042                                                 movlw   0ffh
               00043                         movwf   _CMPCMD  
               00044 
               00045                         movfw   _CNTR
               00046                         movwf   _VAL1
               00047                         clrf    _VAL2
               00048                         clrf    _VAL3
               00049                         clrf    _VAL4
               00050 _lookdownfinish
               00051                                                 _@DONE
               00052         endif
               00053 
               00054         ifdef _DEFLOOKUP
               00055 ;LOOKUP                 _EXP                    ;STACK0:3
               00056 ;                               #,                              ;STACK4:7
               00057 ;                               [_EXP _EXEC],   ;WORK0:3
               00058 ;                               _TLET:
               00059 
               00060                         _@ALIGNPAGE D'20'
               00061 _LOOKUPCMD
               00062                                                 incf            _STACK+4,W              ;Check if we already had a match
               00063                                                 skpnz                                           ;If _STACK+4 = 0xFF
               00064                                                 goto            _lookupfinish   ;then finished
               00065                                                 _@DECLSU        _STACK                  ;Dec Long skip if underflow
               00066                                                 goto            _lookupfinish
               00067 _lookupdone                             movlw           0ffh
               00068                         movwf           _STACK+4
               00069                         movfw           _WORK
               00070                         _@MOVE          _WORK,_STACK
               00071 _lookupfinish
               00072                                                 _@DONE
               00073         endif
               00074 
               00113 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB1C37~1.LIB" ;mbasic14\mbasicpulse.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;RCTIME                 #                                       ;STACK0:3
               00004 ;                               _EXP,                           ;STACK4:7
               00005 ;                               _EXP,                           ;STACK8:11
               00006 ;                               {_ADDRESS|$FFFF,        ;STACK12:15
               00007 ;                               _EXP|1,}                        ;STACK16:19
               00008 ;                               _VAR _EXEC:                     ;WORK0:3
               00009 
               00010 ;PULSIN          #                                      ;STACK0:3
               00011 ;                               _EXP,                           ;STACK4:7
               00012 ;                               _EXP,                           ;STACK8:11
               00013 ;                               {_ADDRESS|$FFFF,        ;STACK12:15
               00014 ;                               _EXP|1,}                        ;STACK16:19
               00015 ;                               _VAR _EXEC:                     ;WORK0:3
               00016 
               00017                 ifdef _DEFSTATECNT
               00018 ;WREG holds initial used cycles
               00019 ;_STATE_WORK# holds timeout
               00020 
               00021 #define _STATE_WORK1            _STACK
               00022 #define _STATE_WORK2            _STACK+1
               00023 #define _STATE_WORK3            _STACK+2
               00024 #define _STATE_WORK4            _STACK+3
               00025 
               00026 #define _STATE_MASK                     _STACK+4
               00027 #define _STATE_CURSTATE         _STACK+5
               00028 
               00029 #define _STATE_ADDRESSL         _STACK+12
               00030 #define _STATE_ADDRESSH         _STACK+13
               00031 
               00032 _STATECNT
               00033                                                 addlw   (19*10*4000000)/(14*_MHZ)       ; 3     
               00034                                                 addwf   _STATE_WORK1,F                          ; 1 Increment counter
               00035                                                 movlw   1                                                       ; 1
               00036                                                 skpnc                                           ; 1
               00037                                                 addwf   _STATE_WORK2,F                          ; 1
               00038                                                 skpnc                                                           ; 1
               00039                                                 addwf   _STATE_WORK3,F                          ; 1
               00040                                                 skpnc                                                           ; 1
               00041                                                 addwf   _STATE_WORK4,F                          ; 1
               00042                                                 skpnc                                                           ; 2
               00043                                                 goto    _statecnt_timeout                       ; TIMEOUT
               00044                                                 clrf    _CMD                                            ; 1
               00045                                                 movfw   _STATE_MASK                             ; 1 Flip state each time through here
               00046                                                 xorwf   _STATE_CURSTATE,F                       ; 1
               00047                                                 skpz                                                            ; 1/2
               00048                                                 goto    _statecnt_0loop                         ; 2/0(19)
               00049                                                 nop                                                                     ; 1(19)
               00050 _statecnt_1loop                 
               00051                                                 movfw   INDF                    ; 1 Read pin
               00052                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00053                                                 skpz                            ; 1
               00054                                                 goto    _statecnt_finish1       ; 1 No longer in state
               00055 _statecnt_1entry
               00056                                                 incfsz  _STATE_WORK1,F          ; 1
               00057                                                 goto    _statecnt_1loop         ; 2(7)(1.4us)
               00058                                                 movfw   _STATE_MASK                     ; 1(7) Get Mask
               00059 
               00060                                                 andwf   INDF,W                  ; 1 Read/Mask pin
               00061                                                 skpz                            ; 1
               00062                                                 goto    _statecnt_finish2       ; 1 No longer in state
               00063                                                 clrwdt                                          ; 1
               00064                                                 incfsz  _STATE_WORK2,F          ; 1                     
               00065                                                 goto    _statecnt_1noborrow     ; 2(7)
               00066                                                 incf    _CMD,F                          ; 1(7)
               00067 
               00068                                                 movfw   INDF                    ; 1 Read pin
               00069                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00070                                                 skpz                            ; 1
               00071                                                 goto    _statecnt_finish3       ; 1 No longer in state
               00072                                                 incfsz  _STATE_WORK3,F          ; 1                     
               00073                                                 goto    _statecnt_1noborrow     ; 2(7)
               00074                                                 incf    _CMD,F                          ; 1(7)
               00075                                                 
               00076                                                 movfw   INDF                    ; 1 Read pin
               00077                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00078                                                 skpz                            ; 1
               00079                                                 goto    _statecnt_finish4       ; 1 No longer in state
               00080                                                 incfsz  _STATE_WORK4,F          ; 1
               00081                                                 goto    _statecnt_1noborrow     ; 2(7)
               00082                                                 goto    _statecnt_timeout       ; Timedout
               00083 
               00084 _statecnt_1noborrow
               00085                                                 movfw   INDF                    ; 1 Read pin
               00086                                                 incf    _CMD,f                          ; 1 Get overflow
               00087                                                 andwf   _STATE_MASK,w           ; 1 Mask pin
               00088                                                 skpz                            ; 1
               00089                                                 goto    _statecnt_finish1       ; 1 No longer in state
               00090 
               00091                                                 movfw   _CMD                            ; 1
               00092                                                 addwf   _STATE_WORK1,f          ; 1(7)
               00093 
               00094                                                 movfw   INDF                    ; 1 Read pin
               00095                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00096                                                 skpnz                                           ; 1
               00097                                                 goto    _statecnt_1entry        ; 2(4)
               00098 
               00099                                                 goto    $+1                                     ; 2
               00100                                                 goto    $+1                                     ; 2
               00101                                                 clrf    _CMD                            ; 1
               00102                                                 goto    _statecnt_finish        ; 2(7)
               00103 _statecnt_0loop                 
               00104                                                 movfw   INDF                    ; 1 Read pin
               00105                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00106                                                 skpnz                           ; 1
               00107                                                 goto    _statecnt_finish1       ; 1 No longer in state
               00108 _statecnt_0entry
               00109                                                 incfsz  _STATE_WORK1,F          ; 1
               00110                                                 goto    _statecnt_0loop         ; 2(7)(1.4us)
               00111                                                 movfw   _STATE_MASK                     ; 1(7) Get Mask
               00112 
               00113                                                 andwf   INDF,W                  ; 1 Read/Mask pin
               00114                                                 skpnz                           ; 1
               00115                                                 goto    _statecnt_finish2       ; 1 No longer in state
               00116                                                 clrwdt                                          ; 1
               00117                                                 incfsz  _STATE_WORK2,F          ; 1                     
               00118                                                 goto    _statecnt_0noborrow     ; 2(7)
               00119                                                 incf    _CMD,F                          ; 1(7)
               00120 
               00121                                                 movfw   INDF                    ; 1 Read pin
               00122                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00123                                                 skpnz                           ; 1
               00124                                                 goto    _statecnt_finish3       ; 1 No longer in state
               00125                                                 incfsz  _STATE_WORK3,F          ; 1                     
               00126                                                 goto    _statecnt_0noborrow     ; 2(7)
               00127                                                 incf    _CMD,F                          ; 1(7)
               00128                                                 
               00129                                                 movfw   INDF                    ; 1 Read pin
               00130                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00131                                                 skpnz                           ; 1
               00132                                                 goto    _statecnt_finish4       ; 1 No longer in state
               00133                                                 incfsz  _STATE_WORK4,F          ; 1
               00134                                                 goto    _statecnt_0noborrow     ; 2(7)
               00135                                                 goto    _statecnt_timeout       ; Timedout
               00136 
               00137 _statecnt_0noborrow
               00138                                                 movfw   INDF                    ; 1 Read pin
               00139                                                 incf    _CMD,f                          ; 1 Get overflow
               00140                                                 andwf   _STATE_MASK,w           ; 1 Mask pin
               00141                                                 skpnz                           ; 1
               00142                                                 goto    _statecnt_finish1       ; 1 No longer in state
               00143 
               00144                                                 movfw   _CMD                            ; 1
               00145                                                 addwf   _STATE_WORK1,f          ; 1(7)
               00146 
               00147                                                 movfw   INDF                    ; 1 Read pin
               00148                                                 andwf   _STATE_MASK,W           ; 1 Mask pin
               00149                                                 skpz                                            ; 1
               00150                                                 goto    _statecnt_0entry        ; 2(4)
               00151 
               00152                                                 goto    $+1                                     ; 2
               00153                                                 goto    $+1                                     ; 2
               00154                                                 clrf    _CMD                            ; 1
               00155                                                 goto    _statecnt_finish        ; 2(7)
               00156 
               00157 _statecnt_finish1
               00158                                                 nop                                                     ; 1
               00159                                                 goto    $+1                                     ; 2
               00160                                                 goto    $+1                                     ; 2
               00161                                                 goto    _statecnt_finish        ; 2(7)
               00162 _statecnt_finish2
               00163                                                 incf    _STATE_WORK2,F          ; 1
               00164                                                 skpnz                           ; 1
               00165                                                 incf    _STATE_WORK3,F          ; 1
               00166                                                 skpnz                           ; 1
               00167                                                 incfsz  _STATE_WORK4,F          ; 1
               00168                                                 goto    _statecnt_finish        ; 2(7)
               00169                                                 goto    _statecnt_timeout       ; Timedout
               00170 _statecnt_finish3
               00171                                                 goto    $+1                                     ; 2
               00172                                                 incf    _STATE_WORK3,F          ; 1
               00173                                                 skpnz                           ; 1
               00174                                                 incfsz  _STATE_WORK4,F          ; 1
               00175                                                 goto    _statecnt_finish        ; 2(7)
               00176                                                 goto    _statecnt_timeout       ; Timedout
               00177 _statecnt_finish4
               00178                                                 goto    $+1                                     ; 2
               00179                                                 goto    $+1                                     ; 2
               00180                                                 incfsz  _STATE_WORK4,F          ; 1
               00181                                                 goto    _statecnt_finish        ; 2(7)
               00182                                                 goto    _statecnt_timeout       ; Timedout
               00183 _statecnt_finish
               00184                                                 movfw   _CMD                            ; 1
               00185                                                 addwf   _STATE_WORK1,F          ; 1 Add used time
               00186                                                 movlw   1                                       ; 1
               00187                                                 skpnc                           ; 1
               00188                                                 addwf   _STATE_WORK2,F          ; 1 Add used time
               00189                                                 skpnc                           ; 1
               00190                                                 addwf   _STATE_WORK3,F          ; 1 Add used time
               00191                                                 skpnc                           ; 1
               00192                                                 addwf   _STATE_WORK4,F          ; 1 Add used time
               00193                                                 skpnc                                           ; 1
               00194                                                 goto    _statecnt_timeout       ; 1
               00195                                                 return                                          ; 2(13) 20cycles used to exit
               00196 _statecnt_timeout                                                                       
               00197                                                 clrf    _STATE_WORK1            
               00198                                                 clrf    _STATE_WORK2            
               00199                                                 clrf    _STATE_WORK3            
               00200                                                 clrf    _STATE_WORK4            
               00201                                                 movfw   _STATE_ADDRESSL
               00202                                                 iorwf   _STATE_ADDRESSH,w
               00203                                                 skpnz                                           
               00204                                                 return                          ; Z flag is set on return
               00205                                                 movfw   _STATE_ADDRESSL
               00206                                                 movwf   _PC
               00207                                                 movfw   _STATE_ADDRESSH
               00208                                                 movwf   _PCH
               00209                                                 _@CLRSP
               00210                                                 return
               00211                 endif
               00212 
               00213         ifdef _DEFPULSIN
               00214 ;PULSIN          #                                      ;STACK0:3
               00215 ;                               _EXP,                           ;STACK4:7
               00216 ;                               _EXP,                           ;STACK8:11
               00217 ;                               {_ADDRESS|$FFFF,        ;STACK12:15
               00218 ;                               _EXP|1,}                        ;STACK16:19
               00219 ;                               _VAR _EXEC:                     ;WORK0:3
               00220 
               00221 #define _PULSIN_WORK1 _STACK
               00222 #define _PULSIN_WORK2 _STACK+1
               00223 #define _PULSIN_WORK3 _STACK+2
               00224 #define _PULSIN_WORK4 _STACK+3
               00225 
               00226 #define _PULSIN_MASK  _STACK+4
               00227 #define _PULSIN_CURSTATE _STACK+5
               00228 
               00229 #define _PULSIN_STATE _STACK+8
               00230 
               00231 #define _PULSIN_ADDRESS _STACK+12
               00232 
               00233 #define _PULSIN_TIMEOUT _STACK+16
               00234 
               00235                         _@ALIGNPAGE D'80'
               00236 _PULSINCMD
               00237                         movfw   _PULSIN_MASK
               00238                         movwf   _PULSIN_WORK1
               00239                                                 _@CALL  _GETPIN
               00240                         movwf   _PULSIN_MASK            ; Save bit mask
               00241                                                 bsf     FSR, 7                  ; Point to TRIS
               00242                                                 iorwf   INDF, F                 ; Set bit to input
               00243                                                 bcf     FSR, 7                  ; Point back to port
               00244                         clrf    _PULSIN_CURSTATE        ; Preset state tracking
               00245                         btfss   _PULSIN_STATE,0         ; State tracking preset for flip
               00246                         movwf   _PULSIN_CURSTATE        ; Set state to bit mask
               00247 
               00248                                                 _@2COMP _PULSIN_TIMEOUT,_PULSIN_WORK1
               00249                                                 
               00250                                                 clrw
               00251                         _@CALL  _STATECNT               ; Wait for initial state(eg LOW)
               00252                         skpnz
               00253                         goto    _pulsin_finish
               00254 
               00255                                                 _@2COMP _PULSIN_TIMEOUT,_PULSIN_WORK1
               00256                                                 
               00257                                                 clrw
               00258                         _@CALL  _STATECNT                                       ; Wait for start state(eg HIGH)
               00259                         skpnz                                                                   ;2
               00260                         goto    _pulsin_finish                                  ;0
               00261 
               00262                                                 _@2COMP _PULSIN_TIMEOUT,_PULSIN_WORK1   ;15
               00263                                                 
               00264                                                 movlw   (18*10*4000000)/(14*_MHZ)               ; 1
               00265                         _@CALL  _STATECNT                                       ; Count time until finish state(eg LOW)
               00266                         skpnz
               00267                         goto    _pulsin_finish
               00268 
               00269                                                 _@ADD   _PULSIN_TIMEOUT,_PULSIN_WORK1
               00270 
               00271 _pulsin_finish                        
               00272                         _@CALL  _LETFUNC
               00273                         _@CLRSP
               00274                                                 _@DONE
               00275         endif
               00276 
               00277         ifdef _DEFPULSOUT
               00278 #define _PULSOUT_WORK1          _STACK
               00279 #define _PULSOUT_WORK2          _STACK+1
               00280 #define _PULSOUT_WORK3          _STACK+2
               00281 #define _PULSOUT_WORK4          _STACK+3
               00282 
               00283 #define _PULSOUT_PIN            _STACK+4
               00284 #define _PULSOUT_PORT           _STACK+5
               00285 
               00286 #define _PULSOUT_PERIOD1        _WORK
               00287 #define _PULSOUT_PERIOD2        _WORK+1
               00288 #define _PULSOUT_PERIOD3        _WORK+2
               00289 #define _PULSOUT_PERIOD4        _WORK+3
               00290 
               00291                         _@ALIGNPAGE D'40'
               00292 ;PULSOUT                #                               ;STACK0:3
               00293 ;                               _EXP,                   ;STACK4:7
               00294 ;                               _EXP _EXEC:             ;WORK0:3
               00295 
               00296 _PULSOUTCMD
               00297                         movfw   _PULSOUT_PIN
               00298                         movwf   _PULSOUT_WORK1
               00299                         _@CALL  _GETPIN                                 ; Save bit mask
               00300                         movwf   _PULSOUT_PIN
               00301                                                 bsf     FSR,7
               00302                                                 xorlw   0xff
               00303                                                 andwf   INDF,F
               00304                                                 xorlw   0xff
               00305                                                 bcf     FSR,7
               00306 
               00307                         movfw   FSR
               00308                         movwf   _PULSOUT_PORT                   ; Save Port
               00309 
               00310                         movfw   _PULSOUT_PERIOD1                ; Check for 0 cycles
               00311                         iorwf   _PULSOUT_PERIOD2,W
               00312                         iorwf   _PULSOUT_PERIOD3,W
               00313                         iorwf   _PULSOUT_PERIOD4,W
               00314                         _@BTFGS STATUS,Z,_pulsoutfinish ; Nothing to do
               00315 
               00316                         movfw   _PULSOUT_PERIOD1
               00317                         movwf   _PULSOUT_WORK1
               00318                         movfw   _PULSOUT_PERIOD2
               00319                         movwf   _PULSOUT_WORK2
               00320                         movfw   _PULSOUT_PERIOD3
               00321                         movwf   _PULSOUT_WORK3
               00322                         movfw   _PULSOUT_PERIOD4
               00323                         movwf   _PULSOUT_WORK4
               00324 
               00325                         movfw   _PULSOUT_PIN                    ; Get bit mask
               00326                                                 xorwf   INDF, F                                 ; Flip bit to start it off
               00327                                                 
               00328                                                 _@SETCYCLES 8                                   ;6
               00329                         _@CALL  _PAUSEUSFUNC                    ;
               00330                         movfw   _PULSOUT_PIN                    ;1 Get bit mask
               00331                         xorwf   INDF, F                                 ;1 Flip bit to finish it up
               00332 
               00333 _pulsoutfinish
               00334                         _@CLRSP
               00335                                                 _@DONE
               00336         endif
               00337 
               00114 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB6EC9~1.LIB" ;mbasic14\mbasicpwm.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFPWM
               00004 ;PWM                    _EXP,                   ;STACK0:3
               00005 ;                               _EXP,                   ;STACK4:7
               00006 ;                               _EXP _EXEC:             ;WORK0:3
               00007 
               00008 _PWM_PIN                equ     _STACK
               00009 
               00010 _PWM_DUTY               equ     _STACK+4
               00011 _PWM_ACC                equ     _STACK+5
               00012 
               00013 _PWM_CYCLES1    equ     _WORK+0
               00014 _PWM_CYCLES2    equ     _WORK+1
               00015 _PWM_CYCLES3    equ     _WORK+2
               00016 _PWM_CYCLES4    equ     _WORK+3
               00017 
               00018                         _@ALIGNPAGE D'50'
               00019 _PWMCMD
               00020                         _@CALL  _GETPIN                         ; Setup Pin
               00021                         bsf     FSR,7                           ; Set TRIS
               00022                         xorlw   0xff                            ; Invert Mask
               00023                         andwf   INDF,F                          ; Set Output
               00024                         xorlw   0xff                            ; Reset Mask
               00025                         bcf     FSR,7                           ; Set PORT
               00026                                         movwf   _PWM_PIN                        ; Save Mask
               00027                                         
               00028                         clrf    _PWM_ACC                        ; Clear accumulator
               00029 
               00030                                         clrf    _CMD                            ;Clear fractional count
               00031                                         clrf    _CMD+1
               00032 _pwmloop                
               00033                                         _@SETCYCLES     35                      ; 6
               00034                                         movfw   _CMD+2                  ; 1
               00035                                         subwf   _CMD,F                  ; 1
               00036                                         movfw   _CMD+3                  ; 1
               00037                                         skpc                                    ; 1
               00038                                         addlw   1                               ; 1
               00039                                         subwf   _CMD+1,F                ; 1
               00040                                         movfw   _CMD+4                  ; 1
               00041                                         skpc                                    ; 1
               00042                                         addlw   1                               ; 1
               00043                                         subwf   _PWM_CYCLES1,F  ; 1 Count off cycles
               00044                                         movlw   1                               ; 1
               00045                         skpc                                    ; 1
               00046                                         subwf   _PWM_CYCLES2,F  ; 1
               00047                         skpc                                    ; 1
               00048                                         subwf   _PWM_CYCLES3,F  ; 1
               00049                         skpc                                    ; 1
               00050                                         subwf   _PWM_CYCLES4,F  ; 1
               00051                                         skpc                                    ; 1
               00052                                         goto    _pwmfinish              ; 1
               00053                                         
               00054                                         clrwdt                  ; 1 Clear watchdog
               00055                                         movfw   _PWM_DUTY               ; 1 Get duty cycle
               00056                         addwf   _PWM_ACC,F              ; 1 Add to accumulator
               00057                         movfw   INDF            ; 1 Grab the port
               00058                                         iorwf   _PWM_PIN,W              ; 1 Put in the bit
               00059                         skpc                    ; 1 Accumulator overflow?
               00060                                         xorwf   _PWM_PIN,W              ; 1 No, take out the bit
               00061                         movwf   INDF            ; 1 Put out new data
               00062                         goto    _pwmloop        ; 2(20)
               00063 
               00064 _pwmfinish
               00065                                         movfw   _PWM_PIN                ; Get bit mask
               00066                         bsf     FSR,7                   ; Set TRIS
               00067                         iorwf   INDF,F                  ; Set Input
               00068                         bcf     FSR,7                   ; Set PORT
               00069 
               00070                         _@CLRSP
               00071                                         _@DONE
               00072         endif
               00073 
               00115 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB32DD~1.LIB" ;mbasic14\mbasicram.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                 ifdef _DEFPEEK
               00004 ;PEEK                   _EXP,                   ;STACK0:3
               00005 ;                               _VAR _EXEC:             ;WORK0:3
               00006 
               00007                         _@ALIGNPAGE D'15'
               00008 _PEEKCMD
               00009                                         movfw   _STACK
               00010                                         movwf   FSR                
               00011                 if _BANK2_START != 0
               00012                                         btfsc   _STACK+1,0
               00013                                         bsf     STATUS,IRP
               00014                 endif
               00015                                         movfw   INDF
               00016                                         movwf   _STACK
               00017                                         clrf    _STACK+1
               00018                                         clrf    _STACK+2
               00019                                         clrf    _STACK+3
               00020                                         _@CALL  _LETFUNC
               00021                                         
               00022                                         _@CLRSP
               00023                                         _@DONECLRIRP
               00024                 endif
               00025 
               00026                 ifdef _DEFPOKE
               00027 ;POKE                           _EXP,                   ;STACK0:3
               00028 ;                                       _EXP _EXEC:             ;WORK0:3
               00029 
               00030                         _@ALIGNPAGE D'10'
               00031 _POKECMD
               00032                                         movfw   _STACK
               00033                                         movwf   FSR                
               00034                                         movfw   _WORK
               00035                 if _BANK2_START != 0
               00036                                         btfsc   _STACK+1,0
               00037                                         bsf     STATUS,IRP
               00038                 endif
               00039                                         movwf   INDF
               00040                                         
               00041                                         _@CLRSP
               00042                                         _@DONECLRIRP
               00043                 endif
               00044 
               00045                 ifdef _DEFSWAP
               00046                         _@ALIGNPAGE D'35'
               00047 ;SWAP                           #                               ;STACK0:3
               00048 ;                                       _VAR,                   ;STACK4:7
               00049 ;                                       _VAR _EXEC:             ;WORK0:3
               00050 _SWAPCMD
               00051                                         _@MOVE  _WORK,_WORK+4   ;Save Var2 address
               00052                                         _@CALL  _VALCMD                 ;Get Var2 Value
               00053                                         _@MOVE  _WORK,_STACK    ;Save Val2
               00054                                         
               00055                                         _@CALL  _POPCMD                 ;Get Var1 address
               00056                                         _@MOVE  _WORK,_WORK+8   ;Save Var1 address
               00057                                         _@CALL  _VALCMD                 ;Get Var1 Value
               00058                                         _@MOVE  _WORK,_STACK+4  ;Save Val1
               00059                                         
               00060                                         _@MOVE  _WORK+8,_WORK   ;Get Var1 address
               00061                                         _@CALL  _LETFUNC                ;Set Var1 = Val2
               00062                                         
               00063                                         _@MOVE  _STACK+4,_STACK ;Move Val1 to _STACK
               00064                                         
               00065                                         _@MOVE  _WORK+4,_WORK   ;Get Var2 address
               00066                                         _@CLRSP
               00067                                         _@GOTO  _LETFUNC                ;Set Var2 to Val1
               00068         endif
               00116 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB05FB~1.LIB" ;mbasic14\mbasicrctime.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFRCTIME
               00004 ;RCTIME                 #                                       ;STACK0:3
               00005 ;                               _EXP,                           ;STACK4:7
               00006 ;                               _EXP,                           ;STACK8:11
               00007 ;                               {_ADDRESS|$0,           ;STACK12:15
               00008 ;                               _EXP|$FFFF,}            ;STACK16:19
               00009 ;                               _VAR _EXEC:                     ;WORK0:3
               00010 
               00011 #define _RCT_WORK1              _STACK
               00012 #define _RCT_WORK2              _STACK+1
               00013 #define _RCT_WORK3              _STACK+2
               00014 #define _RCT_WORK4              _STACK+3
               00015 
               00016 #define _RCT_MASK               _STACK+4
               00017 #define _RCT_CURSTATE   _STACK+5
               00018 
               00019 #define _RCT_STATE              _STACK+8
               00020 
               00021 #define _RCT_ADDRESS    _STACK+12
               00022 
               00023 #define _RCT_TIMEOUT    _STACK+16
               00024 
               00025                         _@ALIGNPAGE D'24'
               00026 _RCTIMECMD
               00027                         movfw   _RCT_MASK
               00028                         movwf   _RCT_WORK1
               00029                         _@CALL  _GETPIN
               00030                         movwf   _RCT_MASK                               ; Save bit mask
               00031 
               00032                         _@2COMP _RCT_TIMEOUT,_RCT_WORK1 ; Store 2s Comp Timeout in work
               00033 
               00034                         movfw   _RCT_MASK                               ; Get bit mask
               00035                         bsf     FSR, 7                                  ; Point to TRIS
               00036                         iorwf   INDF, F                                 ; Set bit to input
               00037                         bcf     FSR, 7                                  ;1 Point back to port
               00038                         clrf    _RCT_CURSTATE                   ;1 Preset state tracking
               00039                         btfsc   _RCT_STATE,0                    ;1 State tracking preset for flip
               00040                         movwf   _RCT_CURSTATE                   ;1 Set state to bit mask
               00041                                                 movlw   (5*10*4000000)/(14*_MHZ);1      
               00042                         _@CALL  _STATECNT                               ;  Get time in state
               00043                         skpnz
               00044                         goto    _rctime_finish
               00045                         
               00046                                                 _@ADD   _RCT_TIMEOUT,_RCT_WORK1
               00047 _rctime_finish                        
               00048                         _@CALL  _LETFUNC
               00049                         _@CLRSP
               00050                                                 _@DONE
               00051         endif
               00052 
               00117 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB38E5~1.LIB" ;mbasic14\mbasicser.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;SEROUT                 #                                                               ;STACK0:3
               00004 ;                               _EXP                                                    ;STACK4:7
               00005 ;                               {\_EXP|_DEF SEROUTFLOW 1},              ;STACK8:11
               00006 ;                               _EXP                                                    ;STACK12:15
               00007 ;                               #,                                                              ;STACK16:19
               00008 ;                               {_EXP|_DEF SEROUTPACE 2,}               ;STACK20:23
               00009 ;                               {_ADDRESS|_DEF SEROUTTO 4,}             ;STACK24:27
               00010 ;                               !                                                               ;STACK28:31
               00011 ;                               [_ENHEXP]                                               ;WORK0:3
               00012 
               00013 ;SERIN                  #                                                               ;STACK0:3
               00014 ;                               _EXP                                                    ;STACK4:7
               00015 ;                               {\_EXP|_DEF SERINFLOW 1},               ;STACK8:11
               00016 ;                               _EXP,                                                   ;STACK12:15
               00017 ;                               {_ADDRESS|_DEF SERINPARITY 2,}  ;STACK16:19
               00018 ;                               {_EXP|0,                                                ;STACK20:23
               00019 ;                               _ADDRESS|_DEF SERINTO 4,}               ;STACK24:27
               00020 ;                               !                                                               ;STACK28:31
               00021 ;                               [_ENHVAR]                                               ;WORK0:3
               00022 
               00023 #define _SERWORK1       _STACK          ;IN/OUT
               00024 #define _SERWORK2       _STACK+1        ;IN/OUT
               00025 #define _SERWORK3       _STACK+2        ;IN/OUT
               00026 #define _SERWORK4       _STACK+3        ;IN/OUT
               00027 
               00028 #define _CTSPORT        _STACK+4        ;IN
               00029 #define _CTSMASK        _STACK+5        ;IN
               00030 #define _RXPORT         _STACK+6        ;IN
               00031 #define _RXMASK         _STACK+7        ;IN
               00032 
               00033 #define _RTSPIN         _STACK+4        ;OUT
               00034 #define _RTSMASK        _STACK+5        ;OUT
               00035 #define _TXPORT         _STACK+6        ;OUT
               00036 #define _TXMASK         _STACK+7        ;OUT
               00037 
               00038 #define _RATE1         _STACK+8        ;IN/OUT
               00039 #define _RATE2         _STACK+9        ;IN/OUT
               00040 #define _RATE3         _STACK+10        ;IN/OUT
               00041 #define _RATE4         _STACK+11        ;IN/OUT
               00042 
               00043 #define _PRTYLO         _STACK+12       ;IN(ADDRESS)
               00044 #define _PRTYHI         _STACK+13       ;IN
               00045 #define _PRTYWORK               _STACK+14               ;IN/OUT
               00046 
               00047 #define _TOT1          _STACK+16       ;IN/OUT
               00048 #define _TOT2          _STACK+17       ;IN/OUT
               00049 #define _TOT3          _STACK+18       ;IN/OUT
               00050 #define _TOT4          _STACK+19       ;IN/OUT
               00051 
               00052 #define _PACE1         _STACK+16       ;OUT
               00053 #define _PACE2         _STACK+17       ;OUT
               00054 #define _PACE3         _STACK+18       ;OUT
               00055 #define _PACE4         _STACK+19       ;OUT
               00056 
               00057 #define _TOADDLO        _STACK+20       ;IN/OUT(ADDRESS)
               00058 #define _TOADDHI        _STACK+21       ;IN/OUT
               00059 
               00060 #define _SERFLAG        _STACK+24       ;IN/OUT
               00061 #define _BITCNT         _STACK+25       ;IN/OUT
               00062 #define _DATALO         _STACK+26               ;IN
               00063 #define _DATAHI         _STACK+27               ;IN
               00064 
               00065 ;UUUU:UUUU UUMP:SBDI RRRR:RRRR RRRR:RRRR
               00066 ;M = Mode bit (1 = even parity, 0 = odd parity if Parity enabled)
               00067 ;P = Parity bit (1 = enable parity)
               00068 ;S = Stop bits (1 = 2 stop bits, 0 = 1 stop bit)
               00069 ;B = Data bits (1 = 7 data bits, 0 = 8 data bits)
               00070 ;D = Drive bit (1 = open drain)
               00071 ;I = invert bit (1 = inverted)
               00072 ;R = rate bits (16bit rate in .1 useconds)
               00073 
               00074 ;MPSB   Mode    Disc
               00075 ;0000   8n1             8bits no parity 1stop
               00076 ;0001   7n1             7bits no parity 1stop
               00077 ;0010   8n2             8bits no parity 2stop
               00078 ;0011   7n2             7bits no parity 2stop
               00079 ;0100   8e1             8bits even parity 1stop
               00080 ;0101   7e1             7bits even parity 1stop
               00081 ;0110   8e2             8bits even parity 1stop
               00082 ;0111   7e2             7bits even parity 1stop
               00083 ;1100   8o1             8bits odd parity 1stop
               00084 ;1101   7o1             7bits odd parity 1stop
               00085 ;1110   8o2             8bits odd parity 1stop
               00086 ;1111   7o2             7bits odd parity 1stop
               00087 
               00088 #define _SER_INVERT                     _RATE3,0
               00089 #define _SER_DRIVE                      _RATE3,1
               00090 #define _SER_DATAB                      _RATE3,2
               00091 #define _SER_STOPB                      _RATE3,3
               00092 #define _SER_PARITYENABLE       _RATE3,4
               00093 #define _SER_PARITYMODE         _RATE3,5
               00094 
               00095 ;***********************************
               00096 ;                       SERGOTO
               00097 ;***********************************
               00098         ifdef   _DEFSERGOTO
               00099                         _@ALIGNPAGE     D'10'
               00100 _SERGOTO
               00101                         movfw           _TOADDLO
               00102                         movwf           _PC
               00103                         movfw           _TOADDHI
               00104                         movwf           _PCH
               00105                         _@CLRSP
               00106                         _@GOTO          _RESET
               00107         endif           
               00108 
               00109 ;***********************************
               00110 ;                       SERINFUNC
               00111 ;***********************************
               00112                 ifdef _DEFSERINFUNC
               00113                                 errorlevel -307
               00114 ;***********************************************************
               00115 ;Serin Pin Init
               00116 ;***********************************************************
               00117 _SERINSETUP
               00118                         _@CALL                  _GETPIN                         ; Set RX
               00119                         bsf                             FSR,7                   
               00120                         iorwf                   INDF,F                          ; Set Input
               00121                         bcf                             FSR,7
               00122                         movwf                   _RXMASK                         ; Save RX Mask
               00123                         movfw                   FSR                                     ; Load RX FSR
               00124                         movwf                   _RXPORT                         ; Save RX FSR
               00125 
               00126 ;***********************************************************
               00127 ;Serin Flow Pin Init
               00128 ;***********************************************************
               00129                 ifdef   _DEFSERINFLOW
               00130                         movfw                   _STACK+4                        ; Load CTS Pin
               00131                         movwf                   _SERWORK1                       ; Save CTS Pin
               00132                         _@CALL                  _GETPIN                         ; Get Port/Mask
               00133                         movwf                   _CTSMASK                        ; Save Mask
               00134                         xorlw                   0xFF                            ; Comp Mask
               00135                         bsf                             FSR,7                           ; Point to TRIS
               00136                         andwf                   INDF,F                          ; Set CTS Output
               00137                         bcf                             FSR,7                           ; Point to Port
               00138                         movfw                   FSR                                     ; Get CTSPORT
               00139                         movwf                   _CTSPORT                        ; Save CTSPORT
               00140                 endif                   
               00141                         return
               00142 ;***********************************************************
               00143 ;Serin Flow Util
               00144 ;***********************************************************
               00145                 ifdef   _DEFSERINFLOW
               00146 _SERINSETCTS
               00147                         movfw                   _CTSPORT                        ; Get CTSPORT
               00148                         movwf                   FSR                                     ; Point to Port
               00149                         movfw                   _CTSMASK                        ; Get Mask
               00150                         iorwf                   INDF,W                          ; Get Port,     Set     Pin
               00151                         btfsc                   _SER_INVERT                     ; Invert Bit?
               00152                         xorwf                   _CTSMASK,W                      ; Yes
               00153                         movwf                   INDF                            ; Set Port
               00154                         return
               00155 
               00156 _SERINCLRCTS
               00157                         movfw                   _CTSPORT
               00158                         movwf                   FSR             
               00159                         movfw                   _CTSMASK                        ; Get Mask
               00160                         xorwf                   INDF,F                          ; Reverse CTS Pin
               00161                         return
               00162                 endif
               00163 ;***********************************************************
               00164 ;Serin Timeout Setup
               00165 ;***********************************************************
               00166                 ifdef _DEFSERINTO
               00167 _SERINSETTO
               00168                         movfw                   _TOT1                           ; Load TOT delay
               00169                         movwf                   _SERWORK1
               00170                         movfw                   _TOT2
               00171                         movwf                   _SERWORK2
               00172                         movfw                   _TOT3
               00173                         movwf                   _SERWORK3
               00174                         movfw                   _TOT4
               00175                         movwf                   _SERWORK4
               00176                         return
               00177                 endif
               00178 ;***********************************************************
               00179 ;Serin Even Parity Check/Exception
               00180 ;***********************************************************
               00181                 ifdef _DEFSERINPARITY           
               00182 _SERINCHECKPARITY
               00183                         movlw                   0xFF
               00184                         btfsc                   _SER_PARITYMODE ;if set check for odd parity
               00185                         xorwf                   _DATAHI,F
               00186                         rrf                             _DATAHI,F
               00187                         skpc
               00188                         return
               00189                         movfw                   _PRTYLO
               00190                         movwf                   _PC
               00191                         movfw                   _PRTYHI
               00192                         movwf                   _PCH
               00193                         _@CLRSP
               00194                         _@GOTO                  _RESET
               00195                 endif
               00196 ;***********************************************************
               00197 ;Serin Main Function
               00198 ;***********************************************************
               00199                         _@ALIGNPAGE     D'50'
               00200 _SERINFUNC
               00201                         _@BTFCC                 _SERFLAG,7,_SERINSETUP  ; First Run?
               00202 
               00203                         clrf                    _DATAHI                                 ; Clr Parity ACC
               00204 
               00205                 ifdef   _DEFSERINTO
               00206                         _@BTFCS                 _SERFLAG,2,_SERINSETTO
               00207                 endif
               00208 
               00209                 ifdef   _DEFSERINFLOW
               00210                         _@BTFCS                 _SERFLAG,0,_SERINSETCTS
               00211                 endif   
               00212 
               00213                         movlw                   7                                       ; Set 7 databits by default
               00214                         btfss                   _SER_DATAB
               00215                         addlw                   1                                       ; Set 8 databits
               00216                         btfsc                   _SER_PARITYENABLE
               00217                         addlw                   1                                       ; Add 1 bit for parity
               00218                         movwf                   _BITCNT
               00219 
               00220                         movfw                   _RXPORT                         ; Get Port
               00221                         movwf                   FSR                                     ; Point to Port
               00222 _serinstart     
               00223                         clrwdt                                                          ; 1
               00224 
               00225                         ;_SERINBIT
               00226                         movfw           _RXMASK                                 ; 1     Get     Mask
               00227                         andwf           INDF,W                                  ; 1     Get     Bit
               00228                         btfss           _SER_INVERT                             ; 1     Invert?
               00229                         xorwf           _RXMASK,W                               ; 1     Yes     
               00230                         addlw           0xff                                    ; 1(5)  Move bit to     Carry
               00231                         ;_SERINBITEND
               00232 
               00233                         skpc                                                            ; 2
               00234                         goto            _serinmain                              ; 0
               00235                 ifdef   _DEFSERINTO
               00236                         btfss                   _SERFLAG,2                      ; 2
               00237                         goto                    _serinstart                     ; 0
               00238 ;***********************************************************
               00239 ;Serin Update/Check Timeout
               00240 ;***********************************************************
               00241                         movlw                   -26                                     ;1
               00242                         addwf                   _SERWORK1,F                     ;1
               00243                         movlw                   -1                                      ;1
               00244                         skpc                                                            ;1
               00245                         addwf                   _SERWORK2,F                     ;1
               00246                         skpc                                                            ;1
               00247                         addwf                   _SERWORK3,F                     ;1
               00248                         skpc                                                            ;1
               00249                         addwf                   _SERWORK4,F                     ;1
               00250                         skpnc                                                           ;1
               00251                         goto                    _serinstart                     ;2(22)
               00252                 ifdef   _DEFSERINFLOW
               00253                         _@BTFCS                 _SERFLAG,0,_SERINCLRCTS
               00254                 endif
               00255                         _@GOTO                  _SERGOTO                        
               00256                 else
               00257                         goto                    _serinstart                     ; 2(22)
               00258                 endif
               00259 
               00260                         _@ALIGNPAGE     D'70'
               00261 _serinmain
               00262                         ;_SERINONEHALFDELAY
               00263                         rrf                     _RATE2,W                                ;1
               00264                         movwf           _SERWORK2                               ;1
               00265                         rrf                     _RATE1,W                                ;1
               00266                         movwf           _SERWORK1                               ;1
               00267                         movfw           _RATE1                                  ;1
               00268                         addwf           _SERWORK1,F                             ;1
               00269                         skpnc                                                           ;1
               00270                         incf            _SERWORK2,F                             ;1
               00271                         movfw           _RATE2                                  ;1
               00272                         addwf           _SERWORK2,F                             ;1
               00273                         
               00274                         movlw           _PAUSECLKFUNC16>>8              ;1
               00275                         movwf           PCLATH                                  ;1
               00276                         movlw           -28                                             ;1
               00277                                 errorlevel -306
               00278                         call            _PAUSECLKFUNC16                 ;Delay
               00279                                 errorlevel +306
               00280                         movlw           $>>8                                    ;1
               00281                         movwf           PCLATH                                  ;1(19+11)(1.5*delay)
               00282                         ;_SERINONEHALFDELAYEND
               00283 
               00284                         goto            _serinbit1                              ;2
               00285                         
               00286 _serinbyte
               00287                         ;_SERINDELAY
               00288                         movfw           _RATE1                                  ;1(10+11+delay) Load Delay
               00289                         movwf           _SERWORK1                               ;1
               00290                         movfw           _RATE2                                  ;1
               00291                         movwf           _SERWORK2                               ;1
               00292                         movlw           _PAUSECLKFUNC16>>8              ;1
               00293                         movwf           PCLATH                                  ;1
               00294                         movlw           -20                                             ;1
               00295                                 errorlevel -306
               00296                         call            _PAUSECLKFUNC16                 ;Delay
               00297                                 errorlevel +306
               00298                         movlw           $>>8                                    ;1
               00299                         movwf           PCLATH                                  ;1
               00300                         ;_SERINDELAYEND
               00301 _serinbit1
               00302                         ;_SERINBIT
               00303                         movfw           _RXMASK                                 ; 1     Get     Mask
               00304                         andwf           INDF,W                                  ; 1     Get     Bit
               00305                         btfss           _SER_INVERT                             ; 1     Invert?
               00306                         xorwf           _RXMASK,W                               ; 1     Yes     
               00307                         addlw           0xff                                    ; 1(5)  Move bit to     Carry
               00308                         ;_SERINBITEND
               00309                         skpnc                                                           ; 1                                                                              
               00310                         incf                    _DATAHI,F                       ; 1     Incr Parity     ACC
               00311                         rrf                             _DATALO,F                       ; 1     Load New Bit
               00312                         decfsz                  _BITCNT,F                       ; 1     8 Bits?
               00313                         goto                    _serinbyte                      ; 2(11+Delay)No, Get Next bit
               00314 
               00315                         btfsc           _SER_PARITYENABLE               ;1 If parity enabled move parity bit into _PRTYWORK
               00316                         rlf                     _PRTYWORK,F                             ;1
               00317                         clrc                                                            ;1
               00318                         btfsc           _SER_DATAB                              ;1 If 7databits shift to LSB
               00319                         rrf                     _DATALO,F                               ;1
               00320                         
               00321                         ;_SERINDELAY
               00322                         clrc                                                    ;1 Load Delay
               00323                         movfw           _RATE1                          ;1
               00324                         btfsc           _SER_STOPB                      ;1
               00325                         rlf                     _RATE1,w                        ;1
               00326                         movwf           _SERWORK1                       ;1
               00327                         movfw           _RATE2                          ;1
               00328                         btfsc           _SER_STOPB                      ;1
               00329                         rlf                     _RATE2,w                        ;1
               00330                         movwf           _SERWORK2                       ;1
               00331                         movlw           _PAUSECLKFUNC16>>8      ;1
               00332                         movwf           PCLATH                          ;1
               00333                         movlw           -19                                     ;1
               00334                                 errorlevel -306
               00335                         call            _PAUSECLKFUNC16         ;Delay
               00336                                 errorlevel +306
               00337                         movlw           $>>8                            ;1
               00338                         movwf           PCLATH                          ;1
               00339                         ;_SERINDELAYEND
               00340 
               00341                 ifdef   _DEFSERINFLOW
               00342                         _@BTFCS                 _SERFLAG,0,_SERINCLRCTS ; Clear CTS
               00343                 endif
               00344 
               00345                 ifdef   _DEFSERINPARITY         
               00346                         _@BTFCS                 _SER_PARITYENABLE,_SERINCHECKPARITY
               00347                 endif
               00348 
               00349                         movfw                   _DATALO
               00350                         movwf                   _SERWORK1
               00351                         clrf                    _SERWORK2
               00352                         clrf                    _SERWORK3
               00353                         clrf                    _SERWORK4
               00354 
               00355                         bsf                             _SERFLAG,7
               00356                         return
               00357                                 errorlevel +307
               00358         endif
               00359 
               00360 ;***********************************
               00361 ;                       SERIN
               00362 ;***********************************
               00363         ifdef _DEFSERIN
               00364 _SERINCMD
               00365                         _@CALL                  _SERINFUNC
               00366                         _@GOTO                  _LETFUNC
               00367                 endif
               00368 
               00369 ;***********************************
               00370 ;                       SEROUT
               00371 ;***********************************
               00372                 ifdef _DEFSEROUT
               00373                         errorlevel -307
               00374 ;***********************************
               00375 ;SEROUTSETUP
               00376 ;***********************************
               00377                         _@ALIGNPAGE     D'30'
               00378 _SEROUTSETUP
               00379                         bsf                     _SERFLAG,7                      ; Set First     Run
               00380                         _@CALL          _GETPIN                         ; Set TX
               00381                         bsf                     FSR,7                   
               00382                         xorlw           0ffh                    
               00383                         andwf           INDF,F                          ; Set Output
               00384                         xorlw           0ffh
               00385                         bcf                     FSR,7
               00386                         movwf           _TXMASK                         ; Save TX Mask
               00387                         btfss           _SER_DRIVE                      ; Check for     Drive mode
               00388                         goto            _SEROUTSETUPD
               00389 _SEROUTSETUPO
               00390                         xorlw           0xFF                            ; Invert Mask
               00391                         andwf           INDF,F                          ; Set Port,     Pin     low
               00392                         bsf                     FSR,7                           ; Point FSR     to TRIS
               00393                         goto            _SEROUTSETUPDSKIP
               00394 _SEROUTSETUPD
               00395                         bsf                     FSR,7                           ; Point FSR     to TRIS
               00396                         xorlw           0xff                            ; Invert Mask
               00397                         andwf           INDF,F                          ; Make bit an output
               00398                         bcf                     FSR,7                           ; Point FSR     to PORT
               00399 _SEROUTSETUPDSKIP
               00400                         movfw           FSR                                     ; Load TX FSR
               00401                         movwf           _TXPORT                         ; Save TX FSR
               00402                         return
               00403 ;***********************************
               00404 ;SEROUTFLOW
               00405 ;***********************************
               00406                         _@ALIGNPAGE     D'50'
               00407                 ifdef   _DEFSEROUTFLOW
               00408 _SEROUTFLOW
               00409                         movfw           _RTSPIN                         ; Load RTS Pin
               00410                         movwf           _SERWORK1                       ; Save RTS Pin
               00411                         _@CALL          _GETPIN                         ; Get RTS Mask and Port
               00412                         bsf                     FSR,7                   
               00413                         iorwf           INDF,F                          ; Set Input
               00414                         bcf                     FSR,7                   
               00415                         movwf           _RTSMASK                        ; Save RTS Mask
               00416                 ifdef   _DEFSEROUTTO
               00417                         movfw                   _TOT1                   ; Get TOut
               00418                         movwf                   _SERWORK1               ; Save
               00419                         movfw                   _TOT2                   ; Get TOut
               00420                         movwf                   _SERWORK2               ; Save
               00421                         movfw                   _TOT3                   ; Get TOut
               00422                         movwf                   _SERWORK3               ; Save
               00423                         movfw                   _TOT4                   ; Get TOut
               00424                         movwf                   _SERWORK4               ; Save
               00425                 endif
               00426 _serflowloop
               00427                         movfw                   _RTSMASK                ;1 Get MASK
               00428                         andwf                   INDF,W                  ;1 Get Pin
               00429                         btfsc                   _SER_INVERT             ;1 Invert?
               00430                         xorwf                   _RTSMASK,W              ;1 Yes
               00431                         skpz                                                    ;1 Ready?
               00432                         return                                                  ;1 Yes
               00433                 ifdef   _DEFSEROUTTO
               00434                         btfss                   _SERFLAG,2              ;1 TO on?
               00435                         goto                    _serflowloop    ;1 No,Skip
               00436 
               00437                         movlw                   -20                             ;1
               00438                         addwf                   _SERWORK1,F             ;1
               00439                         movlw                   -1                              ;1
               00440                         skpc                                                    ;1
               00441                         addwf                   _SERWORK2,F             ;1
               00442                         skpc                                                    ;1
               00443                         addwf                   _SERWORK3,F             ;1
               00444                         skpc                                                    ;1
               00445                         addwf                   _SERWORK4,F             ;1
               00446                         skpnc                                                   ;1
               00447                         goto                    _serflowloop    ;2 Continue waiting
               00448                         _@GOTO                  _SERGOTO
               00449                 else
               00450                         goto                    _serflowloop    ; No,Continue
               00451                 endif
               00452                 endif           
               00453 ;***********************************
               00454 ;SEROUTPACE
               00455 ;***********************************
               00456                 ifdef   _DEFSEROUTPACE
               00457 _SEROUTPACE
               00458                         movfw           _PACE1
               00459                         movwf           _SERWORK1                               ;_SERWORK1
               00460                         movfw           _PACE2
               00461                         movwf           _SERWORK2                               ;_SERWORK2
               00462                         movfw           _PACE3
               00463                         movwf           _SERWORK3                               ;_SERWORK3
               00464                         movfw           _PACE4
               00465                         movwf           _SERWORK4                               ;_SERWORK4
               00466                         clrw
               00467                         _@CALL          _PAUSECLKFUNC
               00468                         return
               00469                 endif
               00470 ;***********************************
               00471 ;SEROUTSETPARITY
               00472 ;***********************************
               00473 _SEROUTSETPARITY
               00474                         clrf                    _SERWORK3
               00475                         btfsc                   _WORK,0
               00476                         incf                    _SERWORK3,F
               00477                         btfsc                   _WORK,1
               00478                         incf                    _SERWORK3,F
               00479                         btfsc                   _WORK,2
               00480                         incf                    _SERWORK3,F
               00481                         btfsc                   _WORK,3
               00482                         incf                    _SERWORK3,F
               00483                         btfsc                   _WORK,4
               00484                         incf                    _SERWORK3,F
               00485                         btfsc                   _WORK,5
               00486                         incf                    _SERWORK3,F
               00487                         btfsc                   _WORK,6
               00488                         incf                    _SERWORK3,F
               00489 
               00490                         movlw                   0xFF
               00491                         btfsc                   _SER_PARITYMODE ;if set prepare odd parity
               00492                         xorwf                   _SERWORK3,F
               00493                         
               00494                         rrf                             _SERWORK3,F
               00495                         skpnc
               00496                         bsf                             _WORK+1,0
               00497                         
               00498                         rlf                             _WORK,F
               00499                         btfsc                   _SER_DATAB
               00500                         rrf                             _WORK+1,F
               00501                         rrf                             _WORK,F
               00502                         return          
               00503 
               00504 ;***********************************
               00505 ;SEROUTCMD
               00506 ;***********************************
               00507                         _@ALIGNPAGE     D'90'
               00508 _SEROUTCMD
               00509                         _@BTFCC                 _SERFLAG,7,_SEROUTSETUP ; First Run?
               00510 
               00511         ifdef   _DEFSEROUTFLOW
               00512                         _@BTFCS                 _SERFLAG,0,_SEROUTFLOW  ; Flow control enabled?
               00513         endif
               00514 
               00515                         _@BTFCS                 _SER_PARITYENABLE,_SEROUTSETPARITY
               00516 
               00517                         movfw                   _TXPORT
               00518                         movwf                   FSR
               00519 
               00520                         movlw                   8
               00521                         btfss                   _SER_DATAB
               00522                         addlw                   1
               00523                         btfsc                   _SER_PARITYENABLE
               00524                         addlw                   1
               00525                         movwf                   _BITCNT
               00526 
               00527                         clrc
               00528 _seroutbyte
               00529                         ;_SEROUTBIT
               00530                         movfw           INDF                            ;1 Get TRIS     data
               00531                         iorwf           _TXMASK,W                       ;1 Make bit     an input
               00532                         skpc                                                    ;1 Skip if bit should be input
               00533                         xorwf           _TXMASK,W                       ;1 Make bit     an output
               00534                         btfss           _SER_INVERT                     ;1 inverted?
               00535                         xorwf           _TXMASK,W                       ;1 Yes
               00536                         movwf           INDF                            ;1(7) Write it  out
               00537                         ;_SEROUTBITEND
               00538 
               00539                         ;_SEROUTDELAY
               00540                         movfw           _RATE1                          ;1(11+10+delay) Load Delay
               00541                         movwf           _SERWORK1                       ;1
               00542                         movfw           _RATE2                          ;1
               00543                         movwf           _SERWORK2                       ;1
               00544                         movlw           _PAUSECLKFUNC16>>8      ;1
               00545                         movwf           PCLATH                          ;1
               00546                         movlw           -21                                     ;1
               00547                         errorlevel -306
               00548                         call            _PAUSECLKFUNC16         ;Delay
               00549                         errorlevel +306
               00550                         movlw           $>>8                            ;1
               00551                         movwf           PCLATH                          ;1(10)
               00552                         ;_SEROUTDELAYEND
               00553 
               00554                         rrf                             _WORK+1,F               ; 1     Set     Bit
               00555                         rrf                             _WORK,F                 ; 1     Set     Bit
               00556                         decfsz                  _BITCNT,F               ; 1
               00557                         goto                    _seroutbyte             ; 2(5)(11+Delay)
               00558 
               00559                         setc                                                    ;1
               00560                         ;_SEROUTBIT
               00561                         movfw           INDF                            ;1 Get TRIS     data
               00562                         iorwf           _TXMASK,W                       ;1 Make bit     an input
               00563                         skpc                                                    ;1 Skip if bit should be input
               00564                         xorwf           _TXMASK,W                       ;1 Make bit     an output
               00565                         btfss           _SER_INVERT                     ;1 inverted?
               00566                         xorwf           _TXMASK,W                       ;1 Yes
               00567                         movwf           INDF                            ;1(8) Write it  out
               00568                         ;_SEROUTBITEND
               00569 
               00570                         ;_SEROUTDELAY
               00571                         movfw           _RATE1                          ;1(10+delay)    Load Delay
               00572                         btfsc           _SER_STOPB                      ;1
               00573                         rlf                     _RATE1,w                        ;1
               00574                         movwf           _SERWORK1                       ;1
               00575                         movfw           _RATE2                          ;1
               00576                         btfsc           _SER_STOPB                      ;1
               00577                         rlf                     _RATE2,w                        ;1
               00578                         movwf           _SERWORK2                       ;1
               00579                         movlw           _PAUSECLKFUNC16>>8      ;1
               00580                         movwf           PCLATH                          ;1
               00581                         movlw           -21                                     ;1
               00582                         errorlevel -306
               00583                         call            _PAUSECLKFUNC16         ;Delay
               00584                         errorlevel +306
               00585                         movlw           $>>8                            ;1
               00586                         movwf           PCLATH                          ;1
               00587                         ;_SEROUTDELAYEND
               00588 
               00589         ifdef   _DEFSEROUTPACE
               00590                         _@BTFCS                 _SERFLAG,1,_SEROUTPACE
               00591         endif     
               00592                         _@DONE
               00593                         errorlevel +307
               00594         endif
               00595 
               00118 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB32D7~1.LIB" ;mbasic14\mbasicserdet.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFSERDETECT
               00004 ;SERDETECT                      #                               ;STACK0:3
               00005 ;                                       _EXP,                   ;STACK4:7
               00006 ;                                       _EXP,                   ;STACK8:11
               00007 ;                                       _VAR _EXEC:             ;WORK0:3
               00008                                         
               00009 #define _SERD_WORK1 _STACK
               00010 #define _SERD_WORK2 _STACK+1
               00011 #define _SERD_WORK3 _STACK+2
               00012 #define _SERD_WORK4 _STACK+3
               00013 
               00014 #define _SERD_MASK  _STACK+4
               00015 #define _SERD_PORT  _STACK+5
               00016 
               00017 #define _SERD_MODE1 _STACK+8
               00018 #define _SERD_MODE2 _STACK+9
               00019 #define _SERD_MODE3 _STACK+10
               00020 #define _SERD_MODE4 _STACK+11
               00021 
               00022                         _@ALIGNPAGE D'35'
               00023 _SERDETECTCMD
               00024                         movfw   _SERD_MASK
               00025                         movwf   _SERD_WORK1
               00026                         _@CALL  _GETPIN
               00027                         movwf   _SERD_MASK
               00028                         bsf     FSR,7
               00029                         iorwf   INDF,F
               00030                         bcf     FSR,7
               00031                         
               00032                         clrf    _SERD_WORK1
               00033                         clrf    _SERD_WORK2
               00034 _serdetectlp1
               00035                         clrwdt                  ;1
               00036                         movfw   _SERD_MASK      ;1
               00037                         andwf   INDF,w          ;1
               00038                         skpnz                   ;1/2
               00039                         goto    _serdetectlp1   ;2/0
               00040 _serdetectlp2
               00041                         clrwdt                  ;1
               00042                         movfw   _SERD_MASK      ;1
               00043                         andwf   INDF,w          ;1
               00044                         skpz                    ;1/2
               00045                         goto    _serdetectlp2   ;2/0
               00046 
               00047 _serdetectlp3
               00048                         clrwdt                  ;1
               00049                                                 movlw   D'10'                   ;1
               00050                         addwf   _SERD_WORK1,F   ;1
               00051                         skpnc                   ;1
               00052                         incf    _SERD_WORK2,F   ;1
               00053                         movfw   _SERD_MASK      ;1
               00054                         andwf   INDF,F          ;1
               00055                         skpnz                   ;1/2
               00056                         goto    _serdetectlp3   ;2/0(10)
               00057                         
               00058                         movfw   _SERD_MODE3
               00059                         movwf   _SERD_WORK3
               00060                         movfw   _SERD_MODE4
               00061                         movwf   _SERD_WORK4
               00062                         _@CALL  _LETFUNC
               00063 
               00064                         _@CLRSP
               00065                                                 _@DONE
               00066         endif
               00119 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB0375~1.LIB" ;mbasic14\mbasicservo.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;SERVO                  _EXP,                           ;STACK0:3
               00004 ;                               _EXP                            ;STACK4:7
               00005 ;                               {,_EXP|20}_EXEC:        ;WORK0:3
               00006 
               00007         ifdef _DEFSERVO
               00008 #define _SERVO_WORK1 _STACK
               00009 #define _SERVO_WORK2 _STACK+1
               00010 #define _SERVO_WORK3 _STACK+2
               00011 #define _SERVO_WORK4 _STACK+3
               00012 
               00013 #define _SERVO_POSLO    _STACK+4
               00014 #define _SERVO_POSHI    _STACK+5
               00015 #define _SERVO_MASK             _STACK+6
               00016 #define _SERVO_PORT             _STACK+7        ;not used
               00017 
               00018 #define _SERVO_COUNT1 _WORK
               00019 #define _SERVO_COUNT2 _WORK+1
               00020 #define _SERVO_COUNT3 _WORK+2
               00021 #define _SERVO_COUNT4 _WORK+3
               00022 
               00023                         _@ALIGNPAGE D'50'
               00024 _SERVOCMD
               00025                         _@CLRSP
               00026                         
               00027                         _@CALL  _GETPIN                 ; Set Input PIN
               00028                         movwf   _SERVO_MASK             ; Save Pin Mask
               00029                         
               00030                         xorlw   0xFF                    
               00031                                                 andwf   INDF,F                  ;Set pin low
               00032                         bsf     FSR,7
               00033                         andwf   INDF,F                  ;Set Pin output
               00034                         bcf     FSR,7
               00035 _servolp
               00036                         movlw   -1                              ;1
               00037                         addwf   _SERVO_COUNT1,F ;1
               00038                         skpc                                    ;1
               00039                         addwf   _SERVO_COUNT2,F ;1
               00040                         skpc                                    ;1
               00041                         addwf   _SERVO_COUNT3,F ;1
               00042                         skpc                                    ;1
               00043                         addwf   _SERVO_COUNT4,F ;1
               00044                         skpc                                    ;1
               00045                         goto    _servo_finish   ;1
               00046 
               00047                         movfw   _SERVO_MASK             ;1 Reload Pin Mask
               00048                         iorwf   INDF,F          ;1 Set Pin high
               00049                                                 ;End Low side
               00050                                                 
               00051                         ;High side
               00052                         movlw   LOW 1500        ;1 Center POS
               00053                         movwf   _SERVO_WORK1    ;1
               00054                         movlw   HIGH 1500               ;1
               00055                         movwf   _SERVO_WORK2    ;1
               00056                         movfw   _SERVO_POSLO    ;1 Add offset(in usec)
               00057                         addwf   _SERVO_WORK1,F  ;1
               00058                         skpnc                                   ;1
               00059                         incf    _SERVO_WORK2,F  ;1
               00060                         movfw   _SERVO_POSHI    ;1
               00061                         addwf   _SERVO_WORK2,F  ;1
               00062                         _@SETCYCLES 18                  ;6
               00063                         _@CALL  _PAUSEUSFUNC16
               00064                         movfw   _SERVO_MASK             ;1
               00065                         xorwf   INDF,F                  ;1 Clr Pin
               00066                         ;End High side
               00067                         
               00068                         ;Low side
               00069                         movlw   LOW 20000               ;1
               00070                         movwf   _SERVO_WORK1    ;1
               00071                         movlw   HIGH 20000              ;1
               00072                         movwf   _SERVO_WORK2    ;1
               00073                                                 _@SETCYCLES 24                  ;6
               00074                         _@CALL  _PAUSEUSFUNC16
               00075                         goto    _servolp                ;2
               00076 _servo_finish                        
               00077                                                 _@DONE
               00078         endif
               00079 
               00120 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBE47E~1.LIB" ;mbasic14\mbasicshift.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;SHIFTIN                _EXP,                           ;STACK0:3
               00004 ;                               _EXP,                           ;STACK4:7
               00005 ;                               _EXP,                           ;STACK8:11
               00006 ;                               [_VAR                           ;STACK12:15
               00007 ;                               {\_EXP|16} _EXEC]       ;WORK0:3
               00008 
               00009 ;SHIFTOUT               _EXP,                           ;STACK0:3
               00010 ;                               _EXP,                           ;STACK4:7
               00011 ;                               _EXP,                           ;STACK8:11
               00012 ;                               [_EXP                           ;STACK12:15
               00013 ;                               {\_EXP|16} _EXEC]       :WORK0:3
               00014 
               00015 #define _SHIFT_WORK1          _STACK
               00016 #define _SHIFT_WORK2          _STACK+1
               00017 #define _SHIFT_WORK3          _STACK+2
               00018 #define _SHIFT_WORK4          _STACK+3
               00019 
               00020 #define _SHIFT_CLKMASK        _STACK+4
               00021 #define _SHIFT_CLKPORT        _STACK+5
               00022 #define _SHIFT_DATAMASK       _STACK+6
               00023 #define _SHIFT_DATAPORT       _STACK+7
               00024 
               00025 #define _SHIFT_MODE           _STACK+8
               00026 
               00027 #define _SHIFT_DATALO         _STACK+12
               00028 #define _SHIFT_DATAHI         _STACK+13
               00029 #define _SHIFT_WORK5          _STACK+14
               00030 #define _SHIFT_WORK6          _STACK+15
               00031 
               00032 #define _SHIFT_COUNT          _WORK
               00033 
               00034         ifdef _DEFSHIFTSETUP
               00035                         _@ALIGNPAGE D'40'
               00036 _SHIFTSETUP
               00037                         movfw   _SHIFT_COUNT
               00038                         movwf   _SHIFT_WORK5
               00039                         movwf   _SHIFT_WORK6
               00040 
               00041                         movfw   _SHIFT_DATAPORT         ; First Run?
               00042                                                 skpz
               00043                         return                          ; Not first run, Return
               00044 
               00045                         _@CALL  _GETPIN                 
               00046                         movwf   _SHIFT_DATAMASK
               00047                         bsf     FSR,7
               00048                         iorwf   INDF,F                  ;Set INPUT
               00049                         bcf     FSR,7
               00050                         comf    _SHIFT_DATAMASK,W       ;Invert Pin Mask
               00051                         andwf   INDF,F                  ;Set LOW
               00052                         movfw   FSR
               00053                         movwf   _SHIFT_DATAPORT         ;Save Pin Address
               00054 
               00055                         movfw   _SHIFT_CLKMASK
               00056                         movwf   _SHIFT_WORK1
               00057                         _@CALL  _GETPIN
               00058                         movwf   _SHIFT_CLKMASK
               00059                         bsf     FSR,7                   
               00060                         andwf   INDF,W                  ;Check I/O state
               00061                         skpnz
               00062                         goto    _SHIFT_SKIP_CLKSETUP
               00063                         comf    _SHIFT_CLKMASK,W        ;Get Inverted Mask
               00064                         andwf   INDF,F                  ;Set OUTPUT
               00065                         bcf     FSR,7                                   
               00066                         andwf   INDF,F                  ;Set LOW
               00067 _SHIFT_SKIP_CLKSETUP
               00068                         bcf     FSR,7                                   
               00069                         movfw   FSR                     
               00070                         movwf   _SHIFT_CLKPORT          ;Save Pin Address
               00071                         return
               00072         endif
               00073 
               00074         ifdef _DEFSHIFT_REV
               00075                         _@ALIGNPAGE D'7'
               00076 _SHIFT_REV
               00077                         rrf     _SHIFT_DATAHI,F
               00078                         rrf     _SHIFT_DATALO,F
               00079                         rlf     _SHIFT_WORK1,F
               00080                         rlf     _SHIFT_WORK2,F
               00081                         decfsz  _SHIFT_WORK6,F
               00082                         goto    _SHIFT_REV
               00083                         return
               00084         endif
               00085 
               00086         ifdef _DEFSHIFTIN_DATA
               00087                         _@ALIGNPAGE D'66'
               00088 _SHIFTIN_DATA
               00089                         movfw   _SHIFT_CLKPORT          ;Get clock port
               00090                         movwf   FSR                     ;Put it into FSR
               00091                         movfw   _SHIFT_CLKMASK          ;Get clock bit mask
               00092 _SHIFTIN_DATALP
               00093                         xorwf   INDF, F                 ;1 Toggle clock
               00094 _SHIFTIN_PRESKIP
               00095                         movfw   _SHIFT_DATAPORT         ;1 Get DATA FSR
               00096                         movwf   FSR                     ;1 Put FSR
               00097                         movfw   INDF                    ;1 Get DATA value
               00098                         andwf   _SHIFT_DATAMASK,W       ;1 Mask DATA
               00099                         addlw   -1                      ;1 Move bit to carry
               00100                         rlf     _SHIFT_DATALO,F         ;1 Rotate bit into result
               00101                         rlf     _SHIFT_DATAHI,F         ;1
               00102 
               00103                         btfsc   _SHIFT_MODE,2           ;1/2 Normal SPI?
               00104                         goto    _SHIFTIN_SKIPSLOW1              ;2/0(11/10)
               00105                         
               00106                         goto    $+1                                             ;2(13)
               00107                         goto    $+1                                             ;2
               00108                         goto    $+1                                             ;2
               00109                         goto    $+1                                             ;2
               00110                         goto    $+1                                             ;2
               00111 
               00112                         btfss   _SHIFT_MODE,3           ;1/2 Slow SPI?
               00113                         goto    _SHIFTIN_SKIPSLOW1      ;2/0(24/23)
               00114                         
               00115                         goto    $+1                                             ;2(25)
               00116                         goto    $+1                                             ;2
               00117                         goto    $+1                                             ;2
               00118                         goto    $+1                                             ;2
               00119                         goto    $+1                                             ;2
               00120                         goto    $+1                                             ;2
               00121                         goto    $+1                                             ;2
               00122                         goto    $+1                                             ;2
               00123                         goto    $+1                                             ;2
               00124                         goto    $+1                                             ;2
               00125                         goto    $+1                                             ;2
               00126                         goto    $+1                                             ;2
               00127                         goto    $+1                                             ;2
               00128                                                 nop                                                             ;1(50)                        
               00129 
               00130 _SHIFTIN_SKIPSLOW1
               00131                         movfw   _SHIFT_CLKPORT          ;1 Get clock port
               00132                         movwf   FSR                     ;1 Put it into FSR
               00133                         movfw   _SHIFT_CLKMASK          ;1 Get clock bit mask
               00134                         xorwf   INDF, F                 ;1 Toggle clock
               00135 
               00136                                                 goto    $+1                                             ;2
               00137                                                 goto    $+1                                             ;2
               00138                                                 
               00139                         btfsc   _SHIFT_MODE,2           ;1/2 Normal SPI?
               00140                         goto    _SHIFTIN_SKIPSLOW2      ;2/0(11/10)
               00141 
               00142                         goto    $+1                                             ;2(12)
               00143                         goto    $+1                                             ;2
               00144                         goto    $+1                                             ;2
               00145                         goto    $+1                                             ;2
               00146                         goto    $+1                                             ;2
               00147                                                 
               00148                         btfss   _SHIFT_MODE,3           ;1/2 Slow SPI?
               00149                         goto    _SHIFTIN_SKIPSLOW2      ;2/0(23/22)
               00150 
               00151                         goto    $+1                                             ;2(24)
               00152                         goto    $+1                                             ;2
               00153                         goto    $+1                                             ;2
               00154                         goto    $+1                                             ;2
               00155                         goto    $+1                                             ;2
               00156                         goto    $+1                                             ;2
               00157                         goto    $+1                                             ;2
               00158                         goto    $+1                                             ;2
               00159                         goto    $+1                                             ;2
               00160                         goto    $+1                                             ;2
               00161                         goto    $+1                                             ;2
               00162                         goto    $+1                                             ;2
               00163                                                 nop                                                             ;1(47)
               00164 _SHIFTIN_SKIPSLOW2
               00165                         decfsz  _SHIFT_WORK5,F          ;1 Do all the bits
               00166                         goto    _SHIFTIN_DATALP         ;2(3)(25/50/100)
               00167 
               00168                         return
               00169         endif
               00170 
               00171         ifdef _DEFSHIFTIN_PRE
               00172                         _@ALIGNPAGE D'10'
               00173 _SHIFTIN_PRE
               00174                         _@CALL  _SHIFTIN_PRESKIP
               00175 
               00176                         movfw   _SHIFT_CLKPORT          ;1 Get clock port
               00177                         movwf   FSR                     ;1 Put it into FSR
               00178                         movfw   _SHIFT_CLKMASK          ;1 Get clock bit mask
               00179                         xorwf   INDF, F                 ;1 Toggle clock
               00180 
               00181                         return
               00182         endif
               00183 
               00184         ifdef _DEFSHIFTINFUNC
               00185                         _@ALIGNPAGE D'30'
               00186 _SHIFTINFUNC
               00187                         _@CALL  _SHIFTSETUP             ; Setup PORT/MASK's
               00188 
               00189                                                 movfw   _SHIFT_DATALO                   ; Save VAR address
               00190                                                 movwf   _WORK
               00191                                                 movfw   _SHIFT_DATAHI
               00192                                                 movwf   _WORK+1
               00193                                                 
               00194                         clrf    _SHIFT_WORK1
               00195                         clrf    _SHIFT_WORK2
               00196                         clrf    _SHIFT_WORK3
               00197                         clrf    _SHIFT_WORK4
               00198                         _@BTFCC _SHIFT_MODE,1,_SHIFTIN_PRE
               00199                         _@BTFCS _SHIFT_MODE,1,_SHIFTIN_DATA
               00200 
               00201                         movfw   _SHIFT_DATALO           ;Copy DATA to _STACK
               00202                         movwf   _SHIFT_WORK1
               00203                         movfw   _SHIFT_DATAHI
               00204                         movwf   _SHIFT_WORK2
               00205 
               00206                         _@BTFCS _SHIFT_MODE,0,_SHIFT_REV
               00207 
               00208                         return
               00209         endif
               00210 
               00211         ifdef _DEFSHIFTIN
               00212                         _@ALIGNPAGE D'5'
               00213 _SHIFTINCMD
               00214                         _@CALL  _SHIFTINFUNC
               00215 
               00216                                                 _@DECSP 1
               00217                                                 
               00218                         _@GOTO  _LETFUNC
               00219         endif
               00220 
               00221         ifdef _DEFSHIFTOUT_DATA
               00222                         _@ALIGNPAGE D'66'
               00223 _SHIFTOUT_DATA
               00224                         movfw   _SHIFT_CLKPORT          ;Get clock port
               00225                         movwf   FSR                     ;Put it into FSR
               00226                         movfw   _SHIFT_CLKMASK          ;Get clock bit mask
               00227 _SHIFTOUT_DATALP
               00228                         xorwf   INDF, F                 ;1 Toggle clock
               00229 
               00230 _SHIFTOUT_PRESKIP
               00231                         rrf     _SHIFT_WORK2,F                  ;1 Shift LSB
               00232                         rrf     _SHIFT_WORK1,F                  ;1 Carry has bit
               00233                         movfw   _SHIFT_DATAPORT         ;1 Get data port
               00234                         movwf   FSR                     ;1 Put it into FSR
               00235                         movfw   INDF                    ;1(6) Get pin value
               00236 
               00237                         goto    $+1                                             ;2(8)
               00238                         
               00239                         btfsc   _SHIFT_MODE,2           ;1/2 Slow SPI?
               00240                         goto    _SHIFTOUT_SKIPSLOW1     ;2/0(11/10)
               00241 
               00242                                                 goto    $+1                                             ;2(12)
               00243                                                 goto    $+1                                             ;2
               00244                                                 goto    $+1                                             ;2
               00245                                                 goto    $+1                                             ;2
               00246                                                 goto    $+1                                             ;2
               00247                                                 goto    $+1                                             ;2
               00248                                                 
               00249                         btfss   _SHIFT_MODE,3           ;1/2 Slow SPI?
               00250                         goto    _SHIFTOUT_SKIPSLOW1     ;2/0(25/24)
               00251                         
               00252                                                 goto    $+1                                             ;2(26)
               00253                                                 goto    $+1                                             ;2
               00254                                                 goto    $+1                                             ;2
               00255                                                 goto    $+1                                             ;2
               00256                                                 goto    $+1                                             ;2
               00257                                                 goto    $+1                                             ;2
               00258                                                 goto    $+1                                             ;2
               00259                                                 goto    $+1                                             ;2
               00260                                                 goto    $+1                                             ;2
               00261                                                 goto    $+1                                             ;2
               00262                                                 goto    $+1                                             ;2
               00263                                                 goto    $+1                                             ;2
               00264                                                 goto    $+1                                             ;2(50)
               00265 
               00266 _SHIFTOUT_SKIPSLOW1
               00267                         iorwf   _SHIFT_DATAMASK,W       ;1 Put in 1 for data
               00268                         skpc                            ;1 1 or 0
               00269                         xorwf   _SHIFT_DATAMASK,W       ;1 0, take 1 back out
               00270                         movwf   INDF                    ;1 Put out data
               00271                         movfw   _SHIFT_CLKPORT          ;1 Get clock port
               00272                         movwf   FSR                     ;1 Put it into FSR
               00273                         movfw   _SHIFT_CLKMASK          ;1 Get clock bit mask
               00274                         xorwf   INDF, F                 ;1(8) Toggle clock
               00275 
               00276                         btfsc   _SHIFT_MODE,2           ;1/2 Slow SPI?
               00277                         goto    _SHIFTOUT_SKIPSLOW2     ;2/0(11/10)
               00278 
               00279                                                 goto    $+1                                             ;2(12)
               00280                                                 goto    $+1                                             ;2
               00281                                                 goto    $+1                                             ;2
               00282                                                 goto    $+1                                             ;2
               00283                                                 nop                                                             ;1(19)
               00284                                                 
               00285                         btfss   _SHIFT_MODE,3           ;1/2 Slow SPI?
               00286                         goto    _SHIFTOUT_SKIPSLOW2     ;2/0(22/21)
               00287 
               00288                                                 goto    $+1                                             ;2(23)
               00289                                                 goto    $+1                                             ;2
               00290                                                 goto    $+1                                             ;2
               00291                                                 goto    $+1                                             ;2
               00292                                                 goto    $+1                                             ;2
               00293                                                 goto    $+1                                             ;2
               00294                                                 goto    $+1                                             ;2
               00295                                                 goto    $+1                                             ;2
               00296                                                 goto    $+1                                             ;2
               00297                                                 goto    $+1                                             ;2
               00298                                                 goto    $+1                                             ;2
               00299                                                 goto    $+1                                             ;2
               00300                                                 goto    $+1                                             ;2(47)
               00301 
               00302 _SHIFTOUT_SKIPSLOW2
               00303                         decfsz  _SHIFT_WORK5,F          ;1 Do all the bits
               00304                         goto    _SHIFTOUT_DATALP        ;2(3)(25/50/100)
               00305 
               00306                         return
               00307         endif
               00308 
               00309         ifdef _DEFSHIFTOUT_PRE
               00310                         _@ALIGNPAGE D'10'
               00311 _SHIFTOUT_PRE
               00312                         _@CALL  _SHIFTOUT_PRESKIP
               00313 
               00314                         movfw   _SHIFT_CLKPORT          ;1 Get clock port
               00315                         movwf   FSR                     ;1 Put it into FSR
               00316                         movfw   _SHIFT_CLKMASK          ;1 Get clock bit mask
               00317                         xorwf   INDF, F                 ;1 Toggle clock
               00318 
               00319                         return
               00320         endif
               00321 
               00322         ifdef _DEFSHIFTOUT
               00323                         _@ALIGNPAGE D'30'
               00324 _SHIFTOUTCMD
               00325                         _@CALL  _SHIFTSETUP             ; Setup Pins
               00326 
               00327                         comf    _SHIFT_DATAMASK,W       ; Get Data IMASK
               00328                                                 bsf     FSR,7
               00329                         andwf   INDF,F                  ; Set OUTPUT
               00330                                                 bcf     FSR,7
               00331 
               00332                         movfw   _SHIFT_DATALO           ;Copy DATA to _STACK
               00333                         movwf   _SHIFT_WORK1
               00334                         movfw   _SHIFT_DATAHI
               00335                         movwf   _SHIFT_WORK2
               00336 
               00337                         _@BTFCC _SHIFT_MODE,0,_SHIFT_REV
               00338 
               00339                         _@BTFCC _SHIFT_MODE,1,_SHIFTOUT_PRE
               00340                         _@BTFCS _SHIFT_MODE,1,_SHIFTOUT_DATA
               00341 
               00342                                                 _@DECSP 1
               00343                                                 
               00344                                                 _@DONE
               00345         endif
               00346 
               00347 
               00121 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB9B36~1.LIB" ;mbasic14\mbasicstep.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFSPMOTOR
               00004 ;SPMOTOR                _EXP,                   ;STACK0:3
               00005 ;                               _EXP,                   ;STACK4:7
               00006 ;                               _EXP _EXEC:             ;WORK0:3
               00007 
               00008 #define _SP_PIN                 _STACK
               00009 #define _SP_WORK1               _STACK+1
               00010 
               00011 #define _SP_DELAY1              _STACK+4
               00012 #define _SP_DELAY2              _STACK+5
               00013 #define _SP_DELAY3              _STACK+6
               00014 #define _SP_DELAY4              _STACK+7
               00015 
               00016 #define _SP_FLAGS               _STACK+8        ;Unallocated(must init)
               00017 
               00018 #define _SP_COUNT1              _WORK
               00019 #define _SP_COUNT2              _WORK+1
               00020 #define _SP_COUNT3              _WORK+2
               00021 #define _SP_COUNT4              _WORK+3
               00022 
               00023                         _@ALIGNPAGE D'80'
               00024 _SPMOTORCMD
               00025                         clrf    _SP_FLAGS
               00026                         
               00027                         btfss   _SP_COUNT4,7   ;Is Neg?
               00028                         goto    _spskipneg
               00029                         _@2COMP _SP_COUNT1,_SP_COUNT1   ;Get positive count
               00030                         bsf     _SP_FLAGS,0     ;set neg flag
               00031 _spskipneg
               00032                         movlw   h'FC'           
               00033                         andwf   _SP_PIN,F       ; Limit First pin to 0 or 4
               00034                         _@CALL  _GETPIN         ; Get Port and Mask
               00035                         bsf     FSR,7           ; Setup TRIS
               00036                         addlw   0xfe
               00037                         skpnc                   ;Is High Nib?
               00038                         bsf     _SP_FLAGS,1     ;Yes, set high flag
               00039                                                 movlw   0x0F
               00040                                                 skpnc
               00041                                                 movlw   0xF0
               00042                                                 andwf   INDF,W
               00043                                                 skpnz
               00044                                                 goto    _sprun
               00045                         movlw   0xf0
               00046                         skpnc
               00047                         movlw   0x0f
               00048                         andwf   INDF,F
               00049                         bcf     FSR,7
               00050                         andwf   INDF,F
               00051 _sprun
               00052                         bcf     FSR,7
               00053 _splp
               00054                                                 movlw   -1                              ;1
               00055                                                 addwf   _SP_COUNT1,F    ;1
               00056                                                 skpc                                    ;1
               00057                                                 addwf   _SP_COUNT2,F    ;1
               00058                                                 skpc                                    ;1
               00059                                                 addwf   _SP_COUNT3,F    ;1
               00060                                                 skpc                                    ;1
               00061                                                 addwf   _SP_COUNT4,F    ;1
               00062                                                 skpc                                    ;1
               00063                                                 goto    _spfinish               ;1(10)
               00064                                                 
               00065                         call    _spgetmask              ;  36+delay
               00066                         movwf   _SP_WORK1               ;1
               00067                         btfsc   _SP_FLAGS,1             ;1
               00068                         swapf   _SP_WORK1,w             ;1
               00069                         xorwf   INDF,F                  ;1
               00070                         
               00071                         goto    _splp                   ;2(16)
               00072 _spfinish
               00073                         _@CLRSP
               00074                                                 _@DONE
               00075 _spgetmask
               00076                         movfw   _SP_DELAY1              ;3
               00077                         movwf   _STACK                  ;1
               00078                         movfw   _SP_DELAY2              ;1
               00079                         movwf   _STACK+1                ;1
               00080                         movfw   _SP_DELAY3              ;1
               00081                         movwf   _STACK+2                ;1
               00082                         movfw   _SP_DELAY4              ;1
               00083                         movwf   _STACK+3                ;1
               00084                                                 _@SETCYCLES     52                      ;6
               00085                                                 _@CALL  _PAUSEUSFUNC
               00086                                                 
               00087 
               00088         ifdef SPMOTOR_HALF
               00089                         btfss   _SP_FLAGS,1             ;1
               00090                         movlw   0xf0                    ;1
               00091                         btfsc   _SP_FLAGS,1             ;1
               00092                         movlw   0x0f                    ;1
               00093                         andwf   INDF,F                  ;1
               00094                         movfw   _SP_COUNT1              ;1
               00095                         andlw   0x7                             ;1
               00096                         btfsc   _SP_FLAGS,0             ;1
               00097                         addlw   D'8'                    ;1
               00098                         addlw   LOW _sptbl              ;1
               00099                         movwf   _SP_WORK1               ;1
               00100                         movlw   HIGH _sptbl             ;1
               00101                                                 skpnc                                   ;1
               00102                                                 addlw   1                               ;1
               00103                                                 movwf   PCLATH                  ;1
               00104                         movfw   _SP_WORK1               ;1
               00105                                                 movwf   PCL                             ;4
               00106 _sptbl
               00107                         retlw   0x1
               00108                         retlw   0x3
               00109                         retlw   0x2
               00110                         retlw   0x6
               00111                         retlw   0x4
               00112                         retlw   0xC
               00113                         retlw   0x8
               00114                                                 retlw   0x9
               00115                         retlw   0x8
               00116                         retlw   0xC
               00117                         retlw   0x4
               00118                         retlw   0x6
               00119                         retlw   0x2
               00120                         retlw   0x3
               00121                         retlw   0x1
               00122                                                 retlw   0x9
               00123         else
               00124                         btfss   _SP_FLAGS,1             ;1
               00125                         movlw   0xf0                    ;1
               00126                         btfsc   _SP_FLAGS,1             ;1
               00127                         movlw   0x0f                    ;1
               00128                         andwf   INDF,F                  ;1
               00129                         movfw   _SP_COUNT1              ;1
               00130                         andlw   0x3                             ;1
               00131                         btfsc   _SP_FLAGS,0             ;1
               00132                         addlw   D'4'                    ;1
               00133                         addlw   LOW _sptbl              ;1
               00134                         movwf   _SP_WORK1               ;1
               00135                         movlw   HIGH _sptbl             ;1
               00136                                                 skpnc                                   ;1
               00137                                                 addlw   1                               ;1
               00138                                                 movwf   PCLATH                  ;1
               00139                         movfw   _SP_WORK1               ;1
               00140                                                 movwf   PCL                             ;4
               00141 _sptbl
               00142                         retlw   0x3
               00143                         retlw   0x6
               00144                         retlw   0xC
               00145                         retlw   0x9
               00146                         retlw   0xC
               00147                         retlw   0x6
               00148                         retlw   0x3
               00149                         retlw   0x9
               00150         endif
               00151         endif
               00122 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB38E7~1.LIB" ;mbasic14\mbasiceeprom.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;READ                   #                               ;STACK0:3
               00004 ;                               _EXP,                   ;STACK4:7
               00005 ;                               _VAR _EXEC              ;WORK0:3
               00006                                 
               00007 ;READDM                 #                               ;STACK0:3
               00008 ;                               _EXP,                   ;STACK4:7
               00009 ;                               [_ENHVAR]               ;WORK0:3
               00010 
               00011 ;WRITE                  #                               ;STACK0:3
               00012 ;                               _EXP,                   ;STACK4:7
               00013 ;                               _EXP _EXEC              ;WORK0:3
               00014                                 
               00015 ;WRITEDM                        #                       ;STACK0:3
               00016 ;                                       _EXP,           ;STACK4:7
               00017 ;                                       [_ENHEXP]       ;WORK0:3
               00018                                         
               00019         ifdef _DEFREADDMFUNC
               00020 #define _READDM_WORK1   _STACK
               00021 #define _READDM_WORK2   _STACK+1
               00022 #define _READDM_WORK3   _STACK+2
               00023 #define _READDM_WORK4   _STACK+3
               00024 
               00025 #define _READDM_ADDRESS _STACK+4
               00026 
               00027                         _@ALIGNPAGE D'30'
               00028         errorlevel -219
               00029 _READDMFUNC
               00030         ifdef EEADR
               00031                         _@MOVFW _READDM_ADDRESS
               00032                         _@BANK  _WORK,EEADR
               00033                         _@MOVWF EEADR                   ; Set the EEPROM address
               00034         ifdef EEADRH
               00035                         _@BANK  EEADR,EEADRH
               00036                         _@CLRF  EEADRH
               00037                         _@BANK  EEADRH,EEADR
               00038         endif
               00039                         _@BANK  EEADR,EECON1
               00040         ifdef EEPGD
               00041                         _@BCF   EECON1,EEPGD
               00042         endif
               00043                         _@BSF   EECON1,RD               ; Read the EEPROM
               00044                         _@NOP
               00045                         _@NOP
               00046                         _@BANK  EECON1,EEDATA
               00047                         _@MOVFW EEDATA                  ; Get the data
               00048                         _@BANK  EEDATA,_WORK
               00049                         _@MOVWF _READDM_WORK1
               00050                         _@CLRF  _READDM_WORK2
               00051                         _@CLRF  _READDM_WORK3
               00052                         _@CLRF  _READDM_WORK4
               00053                         _@INCF  _READDM_ADDRESS,F
               00054         endif
               00055                         return
               00056         errorlevel +219
               00057         endif   
               00058 
               00059         ifdef _DEFREAD
               00060                         _@ALIGNPAGE D'10'
               00061 _READCMD
               00062         ifdef EEADR
               00063                         _@CALL  _READDMFUNC
               00064                         _@CALL  _LETFUNC
               00065         endif
               00066                         _@CLRSP
               00067                                                 _@DONE
               00068      endif
               00069 
               00070         ifdef _DEFREADDM
               00071                         _@ALIGNPAGE D'10'
               00072 _READDMCMD
               00073         ifdef EEADR
               00074                         _@CALL  _READDMFUNC
               00075                         _@GOTO  _LETFUNC
               00076         else
               00077                                                 _@DONE
               00078         endif
               00079         endif
               00080 
               00081         ifdef _DEFWRITEDMFUNC
               00082 #define _WRITEDM_WORK1   _STACK
               00083 #define _WRITEDM_WORK2   _STACK+1
               00084 #define _WRITEDM_WORK3   _STACK+2
               00085 #define _WRITEDM_WORK4   _STACK+3
               00086 
               00087 #define _WRITEDM_ADDRESS _STACK+4
               00088 
               00089                         _@ALIGNPAGE D'30'
               00090         errorlevel -219
               00091 _WRITEDMFUNC
               00092         ifdef EEADR
               00093                         _@MOVFW _WRITEDM_ADDRESS
               00094                         _@BANK  _WORK,EEADR
               00095                         _@MOVWF EEADR                   ; Set the EEPROM address
               00096         ifdef EEADRH
               00097                         _@BANK EEADR,EEADRH
               00098                         _@CLRF EEADRH
               00099                         _@BANK EEADRH,EEADR
               00100         endif
               00101                         _@BANK EEADR,_WORK
               00102                         _@MOVFW _WORK                   ; Address Source
               00103                         _@BANK _WORK,EEDATA
               00104                         _@MOVWF EEDATA                  ; Set the EEPROM data
               00105                         _@BANK EEDATA,EECON1
               00106         ifdef EEPGD
               00107                         _@BCF EECON1,EEPGD
               00108         endif                        
               00109                         _@BSF EECON1,WREN
               00110                         _@MOVLW 0x55                    ; Unlock Sequence
               00111                         _@MOVWF EECON2
               00112                         _@MOVLW 0xAA
               00113                         _@MOVWF EECON2
               00114                         _@BSF EECON1,WR                 ; Do the write
               00115 _writeloop              _@CLRWDT                          
               00116                         _@BTFSC EECON1,WR               ; Wait for the write to complete
               00117                         GOTO _writeloop
               00118                         _@BCF EECON1,WREN
               00119                         _@BANK EECON1,_WORK
               00120                         _@INCF _WRITEDM_ADDRESS,F
               00121         endif
               00122                         return
               00123         errorlevel +219
               00124         endif
               00125 
               00126         ifdef _DEFWRITE
               00127                         _@ALIGNPAGE D'8'
               00128 _WRITECMD
               00129         ifdef EEADR
               00130                         _@CALL  _WRITEDMFUNC
               00131         endif
               00132                                                 _@CLRSP
               00133                                                 _@DONE
               00134         endif
               00135 
               00136         ifdef _DEFWRITEDM
               00137                         _@ALIGNPAGE D'8'
               00138 _WRITEDMCMD
               00139         ifdef EEADR
               00140                         _@CALL  _WRITEDMFUNC
               00141         endif
               00142                                                 _@DONE
               00143         endif
               00144 
               00123 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB0820~1.LIB" ;mbasic14\mbasicflash.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;READPM                 #                               ;STACK0:3
               00004 ;                               _EXP,                   ;STACK4:7
               00005 ;                               [_ENHVAR]               ;WORK0:3
               00006 
               00007 ;WRITEPM                #                               ;STACK0:3
               00008 ;                               _EXP,                   ;STACK4:7
               00009 ;                               [_ENHEXP]               ;WORK0:3
               00010 
               00011         ifdef _DEFREADPMFUNC
               00012 #define _READPM_WORK1           _STACK
               00013 #define _READPM_WORK2           _STACK+1
               00014 #define _READPM_WORK3           _STACK+2
               00015 #define _READPM_WORK4           _STACK+3
               00016 
               00017 #define _READPM_ADDRESS_L       _STACK+4
               00018 #define _READPM_ADDRESS_H       _STACK+5
               00019 
               00020 _READPMFUNC
               00021         ifdef EEADRH
               00022                         _@MOVFW _READPM_ADDRESS_L
               00023                         _@BANK  _WORK,EEADR
               00024                         _@MOVWF EEADR                   ; Set the EEPROM address
               00025                         _@BANK  EEADR,_WORK
               00026                         _@MOVFW _READPM_ADDRESS_H
               00027                         _@BANK  _WORK,EEADRH
               00028                         _@MOVWF EEADRH
               00029 
               00030                         _@BANK  EEADRH,EECON1
               00031                         _@BSF   EECON1,EEPGD
               00032                         _@BSF   EECON1,RD               ; Read the EEPROM
               00033                         _@NOP
               00034                         _@NOP
               00035                         _@BANK  EECON1,EEDATA
               00036                         _@MOVFW EEDATA                  ; Get the data
               00037                         _@BANK  EEDATA,_WORK
               00038                         _@MOVWF _READPM_WORK1
               00039                         _@BANK  _WORK,EEDATH
               00040                         _@MOVFW EEDATH
               00041                         _@BANK  EEDATH,_WORK
               00042                         _@MOVWF _READPM_WORK2
               00043                         _@CLRF  _READPM_WORK3
               00044                         _@CLRF  _READPM_WORK4
               00045 
               00046 _READPMEND                        
               00047                         _@INCF  _READPM_ADDRESS_L,F
               00048                         _@SKPNZ
               00049                         _@INCF  _READPM_ADDRESS_H,F
               00050                                                 _@DONE
               00051         endif
               00052         endif   
               00053 
               00054         ifdef _DEFREADPM
               00055 _READPMCMD
               00056         ifdef EEADRH
               00057                         _@CALL  _READPMFUNC
               00058                         _@GOTO  _LETFUNC
               00059         else
               00060                                                 _@DONE
               00061         endif
               00062         endif
               00063 
               00064         ifdef _DEFWRITEPM
               00065 #define _WRITEPM_WORK1           _STACK
               00066 #define _WRITEPM_WORK2           _STACK+1
               00067 #define _WRITEPM_WORK3           _STACK+2
               00068 #define _WRITEPM_WORK4           _STACK+3
               00069 
               00070 #define _WRITEPM_ADDRESS_L       _STACK+4
               00071 #define _WRITEPM_ADDRESS_H       _STACK+5
               00072 
               00073 _WRITEPMCMD
               00074         ifdef EEADRH
               00075                         _@MOVFW _WRITEPM_ADDRESS_L
               00076                         _@BANK  _WORK,EEADR
               00077                         _@MOVWF EEADR                   ; Set the EEPROM address
               00078                         _@BANK  EEADR,_WORK
               00079                         _@MOVFW _WRITEPM_ADDRESS_H
               00080                         _@BANK  _WORK,EEADRH
               00081                         _@MOVWF EEADRH
               00082 
               00083                         _@BANK    EEADRH,_WORK
               00084                         _@MOVFW   _WORK                 ; Address Source
               00085                         _@BANK    _WORK,EEDATA
               00086                         _@MOVWF   EEDATA                ; Set the EEPROM data
               00087                         _@BANK    EEDATA,_WORK
               00088                         _@MOVFW   _WORK+1               ; Address Source
               00089                         _@BANK    _WORK,EEDATH
               00090                         _@MOVWF   EEDATH                ; Set the EEPROM data
               00091 
               00092                         _@BANK  EEADRH,EECON1
               00093                         _@BSF   EECON1,EEPGD               ; Read the EEPROM
               00094                         _@BSF   EECON1,WREN
               00095                       
               00096                         _@MOVLW   0x55                  ; Unlock Sequence
               00097                         _@MOVWF   EECON2
               00098                         _@MOVLW   0xAA
               00099                         _@MOVWF   EECON2
               00100                         _@BSF     EECON1,WR             ; Do the write
               00101                         _@NOP
               00102                         _@NOP
               00103 
               00104                         _@BCF     EECON1,WREN
               00105 
               00106                         _@BANK  EECON1,_WORK
               00107 
               00108 _WRITEPMEND
               00109                         _@INCF  _WRITEPM_ADDRESS_L,F
               00110                         _@SKPNZ
               00111                         _@INCF  _WRITEPM_ADDRESS_H,F
               00112                         _@MOVLW _STACK+8
               00113                         _@MOVWF _SP
               00114                                                 _@DONE
               00115         endif
               00116         endif 
               00124 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB32A1~1.LIB" ;mbasic14\mbasiclcd.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;LCDINIT                        #                               ;STACK0:3
               00004 ;                                       _EXP\                   ;STACK4:7
               00005 ;                                       _EXP                    ;STACK8:11
               00006 ;                                       {\_EXP|$FF},    ;STACK12:15
               00007 ;                                       _VAR _EXEC:             ;WORK0:3
               00008 
               00009 ;LCDWRITE                       #                               ;STACK0:3
               00010 ;                                       _EXP\                   ;STACK4:7
               00011 ;                                       _EXP                    ;STACK8:11
               00012 ;                                       {\_EXP|$ff},    ;STACK12:15
               00013 ;                                       _VAR,                   ;STACK16:19
               00014 ;                                       [_ENHEXP]               ;WORK0:3
               00015 
               00016 ;LCDREAD                        #                               ;STACK0:3
               00017 ;                                       _EXP\                   ;STACK4:7
               00018 ;                                       _EXP\                   ;STACK8:11
               00019 ;                                       _EXP,                   ;STACK12:15
               00020 ;                                       _VAR,                   ;STACK16:19
               00021 ;                                       _EXP,                   ;STACK20:23
               00022 ;                                       [_ENHVAR]               ;WORK0:3
               00023 
               00024 #define _LCD_WORK1       _STACK
               00025 #define _LCD_WORK2       _STACK+1
               00026 #define _LCD_WORK3       _STACK+2
               00027 #define _LCD_WORK4       _STACK+3
               00028 
               00029 #define _LCD_REGSEL      _STACK+4
               00030 #define _LCD_WORK5       _STACK+5
               00031 
               00032 #define _LCD_CLK         _STACK+8
               00033 #define _LCD_WORK6       _STACK+9
               00034 
               00035 #define _LCD_RDWR        _STACK+12
               00036 #define _LCD_WORK7       _STACK+13
               00037 
               00038 #define _LCD_PORT        _STACK+16
               00039 #define _LCD_NIB         _STACK+17
               00040 
               00041 #define _LCD_RDADDRESS   _STACK+20
               00042 
               00043         ifdef _DEFLCDSEND
               00044                         _@ALIGNPAGE D'70'
               00045 _LCDSEND
               00046                         movwf   _LCD_WORK5      ;Save Cmd
               00047                         incf    _LCD_RDWR,w
               00048                         skpnz
               00049                         goto    _LCD_SKIP_RDWR
               00050                         movfw   _LCD_RDWR       ;Mode
               00051                         movwf   _LCD_WORK1
               00052                         _@CALL  _LOWFUNC         
               00053 
               00054 _LCD_SKIP_RDWR
               00055                         movfw   _LCD_REGSEL     ;Mode
               00056                         movwf   _LCD_WORK1
               00057                         _@BTFCS _LCD_WORK5,7,_LOWFUNC
               00058                                 ifdef LCDOPEN                                           
               00059                         _@BTFCC _LCD_WORK5,7,_INPUTFUNC
               00060                                 else
               00061                         _@BTFCC _LCD_WORK5,7,_HIGHFUNC
               00062                                 endif
               00063                         movfw   _LCD_PORT       ;Get PORT
               00064                         movwf   FSR             ;Set INDF to PORT
               00065 
               00066                         movlw   0F0h            ;Clear LOW Latches
               00067                         btfsc   _LCD_NIB,4      ;If HIGH nib
               00068                         movlw   0Fh             ;Clear HIGH Latches
               00069 
               00070                         bsf     FSR,7           
               00071                         andwf   INDF,F          ;Set to OUTPUT
               00072                         bcf     FSR,7
               00073                         andwf   INDF,F          ;Clear Latches
               00074 
               00075                         movfw   _LCD_WORK5      ;Get DATA
               00076                         btfsc   _LCD_NIB,4      ;If HIGH nib
               00077                         swapf   _LCD_WORK5,W    ;Get DATA
               00078 
               00079                         btfss   _LCD_NIB,4      ;If LOW nib
               00080                         andlw   0Fh             ;Iso low NIB
               00081                         btfsc   _LCD_NIB,4      ;IF HIGH nib
               00082                         andlw   0F0h            ;Iso HIGH nib
               00083 
               00084                                 ifdef LCDOPEN                                           
               00085                                                 ;**Opendrain data**                     
               00086                         bsf     FSR,7
               00087                         iorwf   INDF,F          ;Set Direction
               00088                         bcf     FSR,7
               00089                                 else
               00090                                                 ;**Driven data**
               00091                         iorwf   INDF,F          ;Set Latches
               00092                                 endif
               00093 
               00094 _LCDSENDSTROBE
               00095                         movfw   _LCD_CLK        ;Set CLK/Latch Data
               00096                         movwf   _LCD_WORK1
               00097                         _@CALL  _HIGHFUNC
               00098 
               00099                                                 movlw   160
               00100                                                 movwf   _STACK
               00101                                                 clrf    _STACK+1
               00102                                                 clrw
               00103                                                 _@CALL  _PAUSEUSFUNC16
               00104 
               00105                         movfw   _LCD_CLK                ;Clear CLK
               00106                         movwf   _LCD_WORK1
               00107                         _@CALL  _LOWFUNC
               00108 
               00109                         return
               00110         endif
               00111 
               00112         ifdef _DEFLCDINIT
               00113                         _@ALIGNPAGE D'110'
               00114 _LCDINITCMD
               00115                                         _@CALL  _PUSHCMD                ;PUSH Port onto stack
               00116                                         
               00117                                         movlw   HIGH 45000
               00118                                         movwf   _STACK+1
               00119                                         movlw   LOW 45000
               00120                                         movwf   _STACK
               00121                                         clrw
               00122                                         _@CALL  _PAUSEUSFUNC16
               00123 
               00124                                         movlw   83h
               00125                                         _@CALL  _LCDSEND
               00126                         
               00127                                         movlw   HIGH 5000
               00128                                         movwf   _STACK+1
               00129                                         movlw   LOW 5000
               00130                                         movwf   _STACK
               00131                                         clrw
               00132                                         _@CALL  _PAUSEUSFUNC16
               00133 
               00134                                         movlw   83h
               00135                                         _@CALL  _LCDSEND
               00136                         
               00137                                         movlw   160
               00138                                         movwf   _STACK
               00139                                         clrf    _STACK+1
               00140                                         clrw
               00141                                         _@CALL  _PAUSEUSFUNC16
               00142 
               00143                                         movlw   83h
               00144                                         _@CALL  _LCDSEND
               00145                         
               00146                                         movlw   160
               00147                                         movwf   _STACK
               00148                                         clrf    _STACK+1
               00149                                         clrw
               00150                                         _@CALL  _PAUSEUSFUNC16
               00151 
               00152                                         movlw   82h
               00153                                         _@CALL  _LCDSEND
               00154                         
               00155                                         movlw   160
               00156                                         movwf   _STACK
               00157                                         clrf    _STACK+1
               00158                                         clrw
               00159                                         _@CALL  _PAUSEUSFUNC16
               00160 
               00161                                         _@CLRSP
               00162                                         _@DONE
               00163         endif
               00164 
               00165         ifdef _DEFLCDWRITE
               00166                         _@ALIGNPAGE D'45'
               00167 _LCDWRITECMD
               00168                         swapf   _WORK,w
               00169                                                 andlw   0fh
               00170                         btfsc   _WORK+1,0
               00171                                                 iorlw   80h
               00172                                                 _@CALL  _LCDSEND
               00173                         movfw   _WORK
               00174                                                 andlw   0fh
               00175                         btfsc   _WORK+1,0
               00176                                                 iorlw   80h
               00177                                                 _@CALL  _LCDSEND
               00178                         _@BTFGC _WORK+1,0,_DONE ;#DONE#
               00179                         movlw   h'04'
               00180                         subwf   _WORK,W
               00181                         _@BTFGS STATUS,C,_DONE  ;#DONE#
               00182 _lcddelay
               00183                                                 movlw   LOW 5000
               00184                                                 movwf   _STACK
               00185                                                 movlw   HIGH 5000
               00186                                                 movwf   _STACK+1
               00187                                                 clrw                                                    
               00188                                                 _@CALL  _PAUSEUSFUNC16
               00189                                                 _@DONE
               00190         endif
               00191 
               00192         ifdef _DEFLCDREADFUNC
               00193                         _@ALIGNPAGE D'60'
               00194 _LCDREADFUNC
               00195                         swapf   _LCD_RDADDRESS,w;Send Address NIB1
               00196                                                 andlw   0fh
               00197                         iorlw   88h
               00198                                                 _@CALL  _LCDSEND
               00199 
               00200                         movfw   _LCD_RDADDRESS  ;Send Address NIB0
               00201                                                 andlw   0fh
               00202                                                 iorlw   80h
               00203                                                 _@CALL  _LCDSEND
               00204 
               00205                         movfw   _LCD_REGSEL     ;DATA mode
               00206                         movwf   _LCD_WORK1
               00207                         _@CALL  _INPUTFUNC
               00208 
               00209                         movfw   _LCD_RDWR       ;READ mode
               00210                         movwf   _LCD_WORK1
               00211                         _@CALL  _HIGHFUNC
               00212 
               00213                         movfw   _LCD_PORT       ;Set INDF to PORT
               00214                         movwf   FSR
               00215                         bsf     FSR,7           ;Look at TRIS
               00216                         movlw   0Fh             ;Mask LOW nib of PORT
               00217                         btfsc   _LCD_NIB,4      ;If HIGH nib of PORT
               00218                         movlw   0F0h            ;mask HIGH nib of PORT
               00219                         iorwf   INDF,F          ;Set nib to INPUT
               00220                         bcf     FSR,7           ;Look at PORT
               00221 
               00222                         movfw   _LCD_CLK        ;Latch data
               00223                         movwf   _LCD_WORK1
               00224                         _@CALL  _HIGHFUNC
               00225 
               00226                         movfw   _LCD_PORT       ;Set INDF to PORT
               00227                         movwf   FSR
               00228                         movfw   INDF            ;Read NIB
               00229                         btfsc   _LCD_NIB,4      ;If HIGH nib, swap
               00230                         swapf   INDF,w
               00231                         andlw   0Fh             ;Get HIGH nib data
               00232                         movwf   _LCD_WORK6
               00233                         swapf   _LCD_WORK6,F
               00234 
               00235                         movfw   _LCD_CLK        ;CLK low
               00236                         movwf   _LCD_WORK1
               00237                         _@CALL  _LOWFUNC
               00238 
               00239                         movfw   _LCD_CLK        ;CLK high
               00240                         movwf   _LCD_WORK1
               00241                         _@CALL  _HIGHFUNC
               00242 
               00243                         movfw   _LCD_PORT       ;Set INDF to PORT
               00244                         movwf   FSR
               00245                         movfw   INDF            ;Read NIB2
               00246                         btfsc   _LCD_NIB,4      ;if HIGH nib, swap
               00247                         swapf   INDF,W          
               00248 
               00249                         andlw   0Fh             ;Get LOW nib data
               00250                         iorwf   _LCD_WORK6,F    ;IOR to HIGH nib
               00251 
               00252                         movfw   _LCD_CLK        ;CLK low
               00253                         movwf   _LCD_WORK1
               00254                         _@CALL  _LOWFUNC
               00255 
               00256                         movfw   _LCD_WORK6
               00257                         movwf   _LCD_WORK1
               00258                         clrf    _LCD_WORK2
               00259                         return
               00260         endif
               00261 
               00262         ifdef _DEFLCDREAD
               00263                         _@ALIGNPAGE D'50'
               00264 _LCDREADCMD
               00265                         _@CALL  _LCDREADFUNC
               00266                         _@GOTO  _LETFUNC
               00267         endif
               00125 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBD793~1.LIB" ;mbasic14\mbasici2c.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;I2CIN                          _EXP,                           ;STACK0:3
               00004 ;                                       _EXP,                           ;STACK4:7
               00005 ;                                       {_ADDRESS|$0,}          ;STACK8:11
               00006 ;                                       _EXP,                           ;STACK12:15
               00007 ;                                       {_EXP|$10000,}          ;STACK16:19
               00008 ;                                       [_ENHVAR]                       ;WORK0:3
               00009 
               00010 ;I2COUT                         _EXP,                           ;STACK0:3
               00011 ;                                       _EXP,                           ;STACK4:7
               00012 ;                                       {_ADDRESS|$0,}          ;STACK8:11
               00013 ;                                       _EXP,                           ;STACK12:15
               00014 ;                                       {_EXP|$10000,}          ;STACK16:19
               00015 ;                                       [_ENHEXP]                       ;WORK0:3
               00016 
  0000002C     00017 _I2CSCRAP1       equ     _STACK
  0000002D     00018 _I2CSCRAP2       equ     _STACK+1
  0000002E     00019 _I2CSCRAP3       equ     _STACK+2
  0000002F     00020 _I2CSCRAP4       equ     _STACK+3
               00021 
  00000030     00022 _I2CSCLPIN       equ     _STACK+4
  00000031     00023 _I2CSCLPORT      equ     _STACK+5
  00000032     00024 _I2CSDAPIN       equ     _STACK+6
  00000033     00025 _I2CSDAPORT      equ     _STACK+7
               00026 
  00000034     00027 _I2CERRLABEL_L   equ     _STACK+8
  00000035     00028 _I2CERRLABEL_H   equ     _STACK+9
               00029 
  00000038     00030 _I2CCTRL         equ     _STACK+12
  00000039     00031 _I2CFLAG         equ     _STACK+13
               00032 
  0000003C     00033 _I2CADDRESS_L    equ     _STACK+16
  0000003D     00034 _I2CADDRESS_H    equ     _STACK+17
  0000003E     00035 _I2CADDRESS_FLAG equ     _STACK+18
               00036 
               00037         ifdef _DEFI2C_UTIL
               00038                 _@ALIGNPAGE D'110'
               00039 _I2C_SDA_HIGH
               00040                 movfw   _I2CSDAPORT     ;Get Port
               00041                 movwf   FSR             ;Set Port
               00042                 bsf     FSR,7           ;Point TRIS
               00043                 movfw   _I2CSDAPIN      ;Get mask
               00044                 iorwf   INDF,F          ;Set Pin Input
               00045                 return                  
               00046 _I2C_SDA_LOW
               00047                 movfw   _I2CSDAPORT     ;Get Port     
               00048                 movwf   FSR             ;Set Port
               00049                 movfw   _I2CSDAPIN      ;Get Mask
               00050                 xorlw   h'ff'           ;Invert Mask
               00051                 andwf   INDF,F          ;Set Pin Low
               00052                 bsf     FSR,7           ;Point TRIS
               00053                 andwf   INDF,F          ;Set Pin Output
               00054                 return                  
               00055 _I2C_SCL_HIGH
               00056                 call    _I2C_18DELAY    ;18
               00057                 movfw   _I2CSCLPORT     ;Get Port     
               00058                 movwf   FSR             ;Set Port
               00059                 movfw   _I2CSCLPIN      ;Get Mask
               00060                 iorwf   INDF,F          ;Set Pin High
               00061                 xorlw   h'ff'           ;Invert Mask
               00062                 bsf     FSR,7           ;Point TRIS
               00063                 andwf   INDF,F          ;Set Pin Output
               00064                 goto    _I2C_25DELAY    ;25(50)
               00065 _I2C_SCL_LOW
               00066                 call    _I2C_18DELAY    ;18
               00067                 movfw   _I2CSCLPORT     ;Get Port
               00068                 movwf   FSR             ;Set Port
               00069                 movfw   _I2CSCLPIN      ;Get mask
               00070                 xorlw   h'ff'           ;Invert Mask
               00071                 andwf   INDF,F          ;Set pin Low
               00072                 bsf     FSR,7           ;Point TRIS
               00073                 andwf   INDF,F          ;Set Pin Output
               00074                 goto    _I2C_25DELAY    ;25(50)
               00075 _I2C_25DELAY
               00076                 nop                     ;1
               00077                 goto    $+1             ;2
               00078                 goto    $+1             ;2
               00079                 goto    $+1             ;2
               00080                 goto    $+1             ;2
               00081                 goto    $+1             ;2
               00082                 goto    $+1             ;2
               00083                 goto    $+1             ;2
               00084                 goto    $+1             ;2
               00085                 goto    $+1             ;2
               00086                 goto    $+1             ;2
               00087                 return                  ;4
               00088 _I2C_18DELAY
               00089                 goto    $+1             ;2
               00090                 goto    $+1             ;2
               00091                 goto    $+1             ;2
               00092                 goto    $+1             ;2
               00093                 goto    $+1             ;2
               00094                 goto    $+1             ;2
               00095                 goto    $+1             ;2
               00096                 return                  ;4
               00097 _I2C_CLK_PULSE
               00098                 call    _I2C_SCL_HIGH   
               00099                 call    _I2C_SCL_LOW    
               00100                 return                  
               00101 _I2C_START
               00102                 call    _I2C_SDA_HIGH   
               00103                 call    _I2C_SCL_HIGH   
               00104                 call    _I2C_SDA_LOW    
               00105                 call    _I2C_SCL_LOW    
               00106                 return                  
               00107 _I2C_STOP
               00108                 clrwdt                  
               00109                 call    _I2C_SCL_LOW    
               00110                 call    _I2C_SDA_LOW    
               00111                 call    _I2C_SCL_HIGH   
               00112                 call    _I2C_SDA_HIGH   
               00113                 movfw   _I2CSDAPORT     
               00114                 movwf   FSR             
               00115                 movfw   INDF            
               00116                 andwf   _I2CSDAPIN,W    
               00117                 skpnz                   
               00118                 goto    _I2C_STOP       
               00119                 return                  
               00120 _I2C_ACK
               00121                                 clrwdt
               00122                 call    _I2C_SDA_LOW    
               00123                 call    _I2C_CLK_PULSE  
               00124                 call    _I2C_SDA_HIGH   
               00125                 return                  
               00126 _I2C_NACK
               00127                                 clrwdt
               00128                 call    _I2C_SDA_HIGH   
               00129                 call    _I2C_SCL_HIGH   
               00130                 movfw   _I2CSDAPORT     
               00131                 movwf   FSR             
               00132                 movfw   INDF            
               00133                 andwf   _I2CSDAPIN,W    
               00134                 addlw   -1              ; Move bit to Carry
               00135                 call    _I2C_SCL_LOW    
               00136                 skpnc                   
               00137                 goto    _I2C_ERR        
               00138                 return                  
               00139 _I2CENDCMD
               00140                 call    _I2C_STOP       
               00141                 _@CLRSP
               00142                                 _@DONE
               00143 _I2C_ERR
               00144                 movfw   _I2CERRLABEL_L
               00145                 iorwf   _I2CERRLABEL_H,W
               00146                 skpnz
               00147                 return                   
               00148                 movfw   _I2CERRLABEL_L   
               00149                 movwf   _PC              
               00150                 movfw   _I2CERRLABEL_H   
               00151                 movwf   _PCH  
               00152                 _@CLRSP           
               00153                 _@GOTO  _RESET
               00154                 endif
               00155                                 
               00156         ifdef _DEFI2C_IN_BYTE
               00157                 _@ALIGNPAGE D'25'
               00158 _I2C_IN_BYTE
               00159                 movlw   8
               00160                 movwf   _I2CSCRAP4
               00161 _i2c_in_bit
               00162                 clrwdt
               00163                 _@CALL  _I2C_SCL_HIGH   
               00164                 movfw   _I2CSDAPORT     
               00165                 movwf   FSR             
               00166                 movfw   INDF            
               00167                 andwf   _I2CSDAPIN,W    
               00168                 addlw   -1              ; Move bit to Carry
               00169                 _@CALL  _I2C_SCL_LOW    
               00170                 rlf     _I2CSCRAP1,F    
               00171                 decfsz  _I2CSCRAP4,F    
               00172                 goto    _i2c_in_bit     
               00173                 _@GOTO  _I2C_ACK
               00174         endif
               00175 
               00176         ifdef _DEFI2C_OUT_BYTE
               00177                 _@ALIGNPAGE D'25'
               00178 _I2C_OUT_BYTE
               00179                 movwf   _I2CSCRAP1
               00180                 movlw   8
               00181                 movwf   _I2CSCRAP4
               00182 _i2c_out_bit
               00183                 clrwdt
               00184                 rlf     _I2CSCRAP1,F    
               00185                 _@BTFCS STATUS,C,_I2C_SDA_HIGH   
               00186                 _@BTFCC STATUS,C,_I2C_SDA_LOW
               00187                 _@CALL  _I2C_CLK_PULSE  
               00188                 decfsz  _I2CSCRAP4,F    
               00189                 goto    _i2c_out_bit    
               00190                 _@GOTO  _I2C_NACK       
               00191         endif
               00192                 
               00193                 ifdef _DEFI2C_INIT                      
               00194                 _@ALIGNPAGE D'60'
               00195 _I2C_INIT
               00196                 _@CALL  _GETPIN         
               00197                 movwf   _I2CSDAPIN      ; Save SDA MASK
               00198                 movfw   FSR             
               00199                 movwf   _I2CSDAPORT     ; Save SDA PORT
               00200                 _@CALL  _I2C_SDA_LOW    
               00201 
               00202                 movfw   _I2CSCLPIN      
               00203                 movwf   _STACK          
               00204                 _@CALL  _GETPIN         
               00205                 movwf   _I2CSCLPIN      ; Save SCL MASK
               00206                 movfw   FSR             
               00207                 movwf   _I2CSCLPORT     ; Save SCL PORT
               00208                 _@CALL  _I2C_SCL_LOW    
               00209 
               00210 _I2C_INIT_NACK
               00211                 clrwdt                  
               00212                 _@CALL  _I2C_START      
               00213                 movfw   _I2CCTRL        
               00214                 andlw   h'FE'           
               00215                 _@CALL  _I2C_OUT_BYTE   
               00216                 skpnc
               00217                 goto    _I2C_INIT_NACK  
               00218 
               00219                 movfw   _I2CADDRESS_FLAG 
               00220                 skpz
               00221                 return                  
               00222 
               00223                 btfss   _I2CCTRL,0                      ;LSB specifies address width(1=8bits,0=16bits)
               00224                 goto    _I2C_SKIP_ADDRESS_H     
               00225                 movfw   _I2CADDRESS_H    
               00226                 _@CALL  _I2C_OUT_BYTE    
               00227 _I2C_SKIP_ADDRESS_H
               00228                 movfw   _I2CADDRESS_L    
               00229                 _@CALL  _I2C_OUT_BYTE    
               00230                 return                   
               00231         endif
               00232 
               00233         ifdef _DEFI2CINFUNC
               00234                 _@ALIGNPAGE D'30'
               00235 _I2CINFUNC
               00236                 _@BTFCC _I2CFLAG,0,_I2C_INIT
               00237                 btfsc   _I2CFLAG,1
               00238                 goto    _I2CCTRLSKIP
               00239                 _@CALL  _I2C_START
               00240                 movfw   _I2CCTRL
               00241                 iorlw   h'01'
               00242                 _@CALL  _I2C_OUT_BYTE
               00243 _I2CCTRLSKIP
               00244                 bsf     _I2CFLAG,0
               00245                 bsf     _I2CFLAG,1
               00246                 clrf    _I2CSCRAP2
               00247                 clrf    _I2CSCRAP3
               00248                 clrf    _I2CSCRAP4
               00249                 _@GOTO  _I2C_IN_BYTE
               00250         endif
               00251 
               00252         ifdef _DEFI2CIN
               00253                 _@ALIGNPAGE D'10'
               00254 _I2CINCMD
               00255                 _@CALL  _I2CINFUNC
               00256                 _@GOTO  _LETFUNC
               00257         endif
               00258 
               00259         ifdef _DEFI2COUT
               00260                 _@ALIGNPAGE D'10'
               00261 _I2COUTCMD
               00262                 _@BTFCC _I2CFLAG,0,_I2C_INIT
               00263                 movfw   _WORK
               00264                 bsf     _I2CFLAG,0
               00265                 _@GOTO  _I2C_OUT_BYTE
               00266         endif
               00126 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB38FF~1.LIB" ;mbasic14\mbasicwdt.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                 ifdef _DEFTIMEWATCHDOG
               00004 ;TIMEWATCHDOG   _EXEC:
               00005 
               00006 ;Time
               00007 ;STACK+0
               00008 ;STACK+1
               00009 ;STACK+2
               00010 ;STACK+3
               00011 
               00012 _TIMEWATCHDOGCMD
               00013                                                 clrf    _STACK
               00014                                                 clrf    _STACK+1
               00015                                                 clrf    _STACK+2
               00016                                                 clrf    _STACK+3
               00017                                                 
               00018                                                 bsf             STATUS,RP0
               00019                                                 movlw   0f0h
               00020                                                 andwf   OPTION_REG&0x7f,w
               00021                                                 bcf             STATUS,RP0
               00022                                                 iorlw   0x08
               00023                                                 bsf             STATUS,RP0
               00024                                                 clrwdt
               00025                                                 movwf   OPTION_REG&0x7f
               00026                                                 bcf             STATUS,RP0
               00027                                                 
               00028                                                 clrf    _CMD                    ;Clear fraction counters
               00029                                                 clrf    _CMD+1
               00030                                                 
               00031                                                 clrwdt                                  ;Reset WDT
               00032 _timewatchdoglp
               00033                                                 _@SETCYCLES 25                  ; 6
               00034                                                 movfw   _CMD+2                  ; 1
               00035                                                 addwf   _CMD,F                  ; 1
               00036                                                 movfw   _CMD+3                  ; 1
               00037                                                 skpnc                                   ; 1
               00038                                                 addlw   1                               ; 1
               00039                                                 addwf   _CMD+1,F                ; 1
               00040                                                 movfw   _CMD+4                  ; 1
               00041                                                 skpnc                                   ; 1
               00042                                                 addlw   1                               ; 1
               00043                                                 addwf   _STACK,F                ; 1 Increment counter
               00044                                                 movlw   1                               ; 1
               00045                                                 skpnc                                   ; 1
               00046                                                 addwf   _STACK+1,F              ; 1
               00047                                                 skpnc                                   ; 1
               00048                                                 addwf   _STACK+2,F              ; 1
               00049                                                 skpnc                                   ; 1
               00050                                                 addwf   _STACK+3,F              ; 1
               00051                                                 goto    _timewatchdoglp ; 2(20)
               00052                 endif
               00053 
               00054                 ifdef _DEFGETWATCHDOG
               00055 ;GETWATCHDOG            _VAR _EXEC:
               00056 _GETWATCHDOGCMD
               00057                                                 _@CALL  _LETFUNC
               00058                                                 _@DONE
               00059                 endif
               00127 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB1537~1.LIB" ;mbasic14\mbasicowire.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 #define _OWIRE_WORK1    _STACK
               00004 #define _OWIRE_WORK2    _STACK+1
               00005 #define _OWIRE_WORK3    _STACK+2
               00006 #define _OWIRE_WORK4    _STACK+3
               00007 
               00008 #define _OWIRE_MASK     _STACK+4
               00009 #define _OWIRE_PORT     _STACK+5
               00010 
               00011 #define _OWIRE_MODE     _STACK+8
               00012 #define _OWIRE_BITCT    _STACK+9
               00013 
               00014 #define _OWIRE_ADDRESSLO _STACK+12
               00015 #define _OWIRE_ADDRESSHI _STACK+13
               00016 
               00017 #define _OWIRE_DATA     _STACK+16
               00018 
               00019 #define _OWIRE_SPEED    3
               00020 #define _OWIRE_SIZE     2
               00021 #define _OWIRE_BER      1
               00022 #define _OWIRE_FER      0
               00023 #define _OWIRE_ERROR    6
               00024 #define _OWIRE_START    7
               00025 
               00026         ifdef _DEFOWIRESETUP
               00027                         _@ALIGNPAGE D'20'
               00028 _OWIRESETUPCMD
               00029                         btfsc   _OWIRE_MODE,_OWIRE_START        ;Skip PIN setup
               00030                         goto    _owirefinishsetup
               00031                         movfw   _OWIRE_MASK                             ; Get port
               00032                         movwf   _OWIRE_WORK1    
               00033                         _@CALL  _GETPIN
               00034                         movwf   _OWIRE_MASK
               00035 
               00036                         movfw   FSR
               00037                         movwf   _OWIRE_PORT
               00038                         bsf     _OWIRE_MODE,_OWIRE_START
               00039 _owirefinishsetup
               00040                         movfw   _OWIRE_PORT
               00041                         movwf   FSR
               00042                         return
               00043         endif
               00044 
               00045         ifdef _DEFOWIRERESET
               00046                         _@ALIGNPAGE D'50'
               00047 _OWIRERESETCMD
               00048                         movfw   _OWIRE_ADDRESSLO,W
               00049                                                 iorwf   _OWIRE_ADDRESSHI,W
               00050                         skpz
               00051                         bsf     _OWIRE_MODE,_OWIRE_ERROR        ; Set Goto ErrLabel on error
               00052                                                 
               00053                         comf    _OWIRE_MASK,W                           ; W = bit mask(Inverted)
               00054                         bsf     FSR,7                                           ; Point to TRIS
               00055                         andwf   INDF,F                                          ; Set output
               00056                         bcf     FSR, 7                                          ; Point back to port
               00057                         andwf   INDF,F                                          ; Set Low
               00058                         
               00059                         movlw   high 500                                        ; Reset pulse for > 480us
               00060                         movwf   _STACK+1
               00061                         movlw   low 500
               00062                         movwf   _STACK
               00063                         clrw
               00064                         _@CALL  _PAUSEUSFUNC16
               00065                         
               00066                         bsf     FSR,7                                           ; Point to TRIS
               00067                         movfw   _OWIRE_MASK                                     ; Get Mask
               00068                         iorwf   INDF, F                                         ; Set pin to input
               00069                         bcf     FSR, 7                                          ; Point back to port
               00070                         
               00071                         movlw   120                                                     ; Wait at least 120us(60us to 240us presence period)
               00072                         movwf   _STACK
               00073                         clrf    _STACK+1
               00074                         clrw
               00075                         _@CALL  _PAUSEUSFUNC16
               00076                         
               00077                         movfw   INDF                                            ; Check for presence
               00078                         andwf   _OWIRE_MASK,W                           ; Compare
               00079                         btfsc   _OWIRE_MODE,_OWIRE_ERROR        ; ErrLabel enabled?
               00080                         goto    _owire_skipp    
               00081                         skpz                                                            ; Present?
               00082                         goto    _owire_error
               00083 _owire_skipp
               00084                         movlw   high 480                                        ; Wait out rest of pulse
               00085                         movwf   _STACK+1
               00086                         movlw   low 480
               00087                         movwf   _STACK
               00088                         clrw
               00089                         _@CALL  _PAUSEUSFUNC16
               00090                         
               00091                         return
               00092 _owire_error
               00093                         movfw   _OWIRE_ADDRESSLO
               00094                         movwf   _PC
               00095                         movfw   _OWIRE_ADDRESSHI
               00096                         movwf   _PCH
               00097                         _@CLRSP
               00098                         _@GOTO  _RESET
               00099         endif
               00100 
               00101         ifdef _DEFOWINFUNC
               00102                         _@ALIGNPAGE D'60'
               00103 _OWIREINFUNC
               00104                         movlw   8                                                                               ; 8 bits to a byte
               00105                         btfsc   _OWIRE_MODE,_OWIRE_SIZE
               00106                         movlw   1                                                                               ; 1 bit receive
               00107                         movwf   _OWIRE_BITCT                                                    ; Bit counter
               00108                         clrf    _OWIRE_DATA                                                             ; Clear result
               00109                         _@CALL  _OWIRESETUPCMD
               00110 
               00111                         _@BTFCS _OWIRE_MODE,_OWIRE_FER,_OWIRERESETCMD
               00112 
               00113                         bcf     _OWIRE_MODE,_OWIRE_FER
               00114 _owinloop
               00115                         comf    _OWIRE_MASK,W                                                   ; W = bit mask(inverted)
               00116                         andwf   INDF,F                                                                  ; Set low
               00117                         bsf     FSR,7                                                                   ; Point to TRIS
               00118                         andwf   INDF,F                                                                  ; Set output
               00119 
               00120                                                 movlw   (((10*_MHZ)/4000000)-2)/4                               ;1(10us delay)
               00121 _owireindelay1                  addlw   -1                                                                              ;1
               00122                                                 skpz                                                                                    ;1/2
               00123                                                 goto    _owireindelay1                                                  ;2/0(4n)
               00124                         movfw   _OWIRE_MASK                                                             ;1 W = bit mask
               00125                         iorwf   INDF,F                                                                  ;1(4n+2) Set to input
               00126                         
               00127                         bcf     FSR, 7                                                                  ;1 Point back to port
               00128 
               00129                                                 movlw   (((7*_MHZ)/4000000)-2)/4                                ;1(7us delay)
               00130 _owireindelay2                  addlw   -1                                                                              ;1
               00131                                                 skpz                                                                                    ;1/2
               00132                                                 goto    _owireindelay2                                                  ;2/0(4n)
               00133                         movfw   _OWIRE_MASK                                                             ;1 W = bit mask
               00134                         andwf   INDF,W                                                                  ;1(4n+2) Get bit
               00135                         
               00136                         addlw   -1                                                                              ; Move bit to Carry
               00137                         rrf     _OWIRE_DATA,F                                                   ; Move bit into byte
               00138 
               00139                         movlw   60                                                                              ; Wait at least 60us
               00140                         movwf   _STACK
               00141                         clrf    _STACK+1
               00142                         clrw
               00143                         _@CALL  _PAUSEUSFUNC16
               00144 
               00145                         decfsz  _OWIRE_BITCT,F                                                  ; More bits?
               00146                         goto    _owinloop                                                               ; Yes
               00147                         movfw   _OWIRE_DATA                                                             ; Get char to W
               00148                         movwf   _STACK                                                                  ; Save for LET
               00149                         clrf    _STACK+1
               00150                         clrf    _STACK+2
               00151                         clrf    _STACK+3
               00152                         _@BTFCS _OWIRE_MODE,_OWIRE_BER,_OWIRERESETCMD
               00153 
               00154                         bcf     _OWIRE_MODE,_OWIRE_BER
               00155                         return
               00156         endif
               00157 
               00158         ifdef _DEFOWIN
               00159 ;OWIN                   #                                               ;STACK0:3
               00160 ;                               _EXP,                                   ;STACK4:7
               00161 ;                               _EXP,                                   ;STACK8:11
               00162 ;                               {_ADDRESS|$0,}                  ;STACK12:15
               00163 ;                               [_ENHVAR]                               ;WORK0:WORK3
               00164                                 
               00165                         _@ALIGNPAGE D'8'
               00166 _OWIREINCMD
               00167                         _@CALL  _OWIREINFUNC
               00168                                                 _@GOTO  _LETFUNC
               00169         endif
               00170 
               00171         ifdef _DEFOWOUT
               00172 ;OWOUT           #                                              ;STACK0:3
               00173 ;                               _EXP,                                   ;STACK4:7
               00174 ;                               _EXP,                                   ;STACK8:11
               00175 ;                               {_ADDRESS|$0,}                  ;STACK12:15
               00176 ;                               [_ENHEXP]                               ;WORK0:WORK3
               00177 
               00178                         _@ALIGNPAGE D'60'
               00179 _OWIREOUTCMD
               00180                         movfw   _WORK                                                                   ; Get user byte
               00181                         movwf   _OWIRE_DATA                                                             ; Save data
               00182                         movlw   8                                                                               ; 8 bits to a byte
               00183                         btfsc   _OWIRE_MODE,_OWIRE_SIZE
               00184                         movlw   1
               00185                         movwf   _OWIRE_BITCT                                                    ; Bit counter
               00186                         _@CALL  _OWIRESETUPCMD
               00187 
               00188                         _@BTFCS _OWIRE_MODE,_OWIRE_FER,_OWIRERESETCMD
               00189 
               00190                         bcf     _OWIRE_MODE,_OWIRE_FER
               00191 _owoutloop 
               00192                         comf    _OWIRE_MASK,W                                                   ; W = Bit MASK(Inverted)
               00193                         andwf   INDF,F                                                                  ; Set bit low
               00194                         bsf     FSR,7                                                                   ; Point to TRIS
               00195                         andwf   INDF,F                                                                  ; Set bit OUTPUT
               00196                         bcf     FSR,7                                                                   ;1 Point back to PORT
               00197 
               00198                                                 movlw   (((10*_MHZ)/4000000)-5)/4                               ;1(7us delay)
               00199 _owireoutdelay1                 addlw   -1                                                                              ;1
               00200                                                 skpz                                                                                    ;1/2
               00201                                                 goto    _owireoutdelay1                                                 ;2/0(4n)
               00202                         movfw   _OWIRE_MASK                                                             ;1 W = Bit MASK
               00203                         rrf     _OWIRE_DATA,F                                                   ;1 Get next bit
               00204                         bsf     FSR,7                                                           ;1 Point to TRIS
               00205                         skpnc                                                                                   ;1 Should bit be low or high?
               00206                         iorwf   INDF,F                                                                  ;1(4n+5) High (set to input)
               00207 
               00208                         movlw   60                                                                              ; Wait at least 60us
               00209                         movwf   _STACK
               00210                         clrf    _STACK+1
               00211                         clrw
               00212                         _@CALL  _PAUSEUSFUNC16
               00213 
               00214                         movfw   _OWIRE_MASK                                                             ; W = Bit MASK
               00215                         iorwf   INDF,F                                                                  ; Set INPUT
               00216                         bcf     FSR,7                                                                   ; Point back to PORT
               00217                         decfsz  _OWIRE_BITCT,F                                                  ; Do next bit, if any
               00218                         goto    _owoutloop
               00219                         _@BTFCS _OWIRE_MODE,_OWIRE_BER,_OWIRERESETCMD
               00220 
               00221                         bcf     _OWIRE_MODE,_OWIRE_BER
               00222 
               00223                                                 _@DONE
               00224         endif
               00128 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBD9E8~1.LIB" ;mbasic14\mbasicx10.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;WORK space
               00004 #define _X10_WORK1    _STACK+0  ;PAUSEUS
               00005 #define _X10_WORK2    _STACK+1  ;PAUSEUS
               00006 
               00007 ;DATA PIN
               00008 #define _X10_DATAMASK _STACK+4
               00009 #define _X10_DATAPORT _STACK+5
               00010 #define _X10_TTIMEOUT1 _STACK+6
               00011 #define _X10_TTIMEOUT2 _STACK+7
               00012 
               00013 ;ZERO PIN
               00014 #define _X10_ZEROMASK _STACK+8
               00015 #define _X10_ZEROPORT _STACK+9
               00016 #define _X10_TTIMEOUT3 _STACK+10
               00017 #define _X10_TTIMEOUT4 _STACK+11
               00018 
               00019 ;HOUSE CODE
               00020 #define _X10_HOUSE    _STACK+12
               00021 #define _X10_WORK5    _STACK+13 ;Output 3 phase cnt
               00022 #define _X10_BITCT    _STACK+14
               00023 #define _X10_DATA     _STACK+15
               00024 
               00025 ;TIMEOUT ADDRESS(XIN only)
               00026 #define _X10_ADDRESSLO _STACK+16
               00027 #define _X10_ADDRESSHI _STACK+17
               00028 #define _X10_WORK3              _STACK+18
               00029 #define _X10_WORK4              _STACK+19
               00030 
               00031 ;TIMEOUT TIME(XIN only)
               00032 #define _X10_TIMEOUT1 _STACK+20
               00033 #define _X10_TIMEOUT2 _STACK+21
               00034 #define _X10_TIMEOUT3 _STACK+22
               00035 #define _X10_TIMEOUT4 _STACK+23
               00036 
               00037         ifdef _DEFXZNEXT
               00038                         _@ALIGNPAGE D'12'
               00039 _XZNEXT
               00040                         movfw   _X10_ZEROPORT   ; Set Zero PORT
               00041                         movwf   FSR             
               00042                         movfw   _X10_ZEROMASK   ; Get zero crossing bit mask
               00043                         andwf   INDF, W         ; Isolate current state bit
               00044                         movwf   _X10_WORK1      ; Save state
               00045 
               00046 _xznloop
               00047                         clrwdt
               00048                         movfw   _X10_ZEROMASK   ; Get zero crossing bit mask
               00049                         andwf   INDF, W         ; Isolate current state bit
               00050                         xorwf   _X10_WORK1,W    ; Compare to previous state
               00051                         skpnz
               00052                         goto    _xznloop        ; Wait till different
               00053                         return
               00054     endif
               00055 
               00056         ifdef _DEFX10SETUP
               00057                         _@ALIGNPAGE D'30'
               00058 _X10SETUP
               00059                         movfw   _X10_DATAPORT
               00060                         skpz
               00061                         return
               00062                         movfw   _X10_ZEROMASK
               00063                         movwf   _X10_WORK1
               00064                         _@CALL  _GETPIN
               00065                         movwf   _X10_ZEROMASK
               00066                         bsf     FSR,7
               00067                         iorwf   INDF,F          ;Set Zero input
               00068                         bcf     FSR,7
               00069                         movfw   FSR
               00070                         movwf   _X10_ZEROPORT
               00071                         movfw   _X10_DATAMASK
               00072                         movwf   _X10_WORK1
               00073                         _@CALL  _GETPIN
               00074                         movwf   _X10_DATAMASK
               00075                         bsf     FSR,7
               00076                         iorwf   INDF,F          ;Set Data input
               00077                         bcf     FSR,7
               00078                         movfw   FSR
               00079                         movwf   _X10_DATAPORT
               00080                         return
               00081         endif
               00082 
               00083         ifdef _DEFXINFUNC
               00084                         _@ALIGNPAGE D'90'
               00085 _XINFUNC
               00086                         _@CALL  _X10SETUP
               00087                         movfw   _X10_TIMEOUT1  ; Move timeout delay to temp.  Timeout is count of Zero crossings
               00088                         movwf   _X10_TTIMEOUT1
               00089                         movfw   _X10_TIMEOUT2
               00090                         movwf   _X10_TTIMEOUT2
               00091                         movfw   _X10_TIMEOUT3
               00092                         movwf   _X10_TTIMEOUT3
               00093                         movfw   _X10_TIMEOUT4
               00094                         movwf   _X10_TTIMEOUT4
               00095 _xinstartloop
               00096                         movfw   _X10_ADDRESSLO          ;
               00097                         iorwf   _X10_ADDRESSHI,W        ; Timeout used?
               00098                         skpz                                            ;
               00099                         goto    _xinskipto              ; No.Skip Timeout check
               00100                         movlw   -1                                      ;
               00101                         addwf   _X10_TTIMEOUT1,f        ;
               00102                         skpnc                                           ;
               00103                         addwf   _X10_TTIMEOUT2,f        ;
               00104                         skpnc                                           ;
               00105                         addwf   _X10_TTIMEOUT3,f        ;
               00106                         skpnc                                           ;
               00107                         addwf   _X10_TTIMEOUT4,f        ;
               00108                         skpnc                                           ;
               00109                         goto    _xintimedout            ; We're timed out
               00110 _xinskipto
               00111                         call    _xingetbit                      ; Wait for next zero crossing and get bit
               00112                         skpc                                            ; Check for start bit 1
               00113                         goto    _xinstartloop           ; Low bit - no start
               00114                         call    _xingetbit                      ; Wait for next zero crossing and get bit
               00115                         skpc                                            ; Check for start bit 1
               00116                         goto    _xinstartloop           ; Low bit - no start
               00117                         call    _xingetbit                      ; Wait for next zero crossing and get bit
               00118                         skpc                                            ; Check for start bit 1
               00119                         goto    _xinstartloop           ; Low bit - no start
               00120                         call    _xingetbit                      ; Wait for next zero crossing and get bit
               00121                         skpnc                                           ; Check for last start bit
               00122                         goto    _xinstartloop           ; High bit - no start 0
               00123 
               00124                         movlw   4                                       ;
               00125                         call    _xinrcv                         ; Get 4 bits
               00126                         movwf   _X10_WORK5                      ; Save Recv'd House Code
               00127                         movfw   _X10_HOUSE                      ; Get User house code
               00128                         subwf   _X10_WORK5,W            ; Cmp House code
               00129                         skpz
               00130                         goto    _xinstartloop           ; No match
               00131 _xinskiphouse
               00132                         movlw   5
               00133                         call    _xinrcv                         ; Get 5 bits
               00134                         movwf   _X10_WORK4                      ; Save key code
               00135                         ;movfw   _X10_WORK4
               00136                         movwf   _X10_WORK1                      ;Save Command/Key
               00137                         movfw   _X10_WORK5
               00138                         movwf   _X10_WORK2
               00139                         clrf    _X10_WORK3
               00140                         clrf    _X10_WORK4
               00141                                                 _@DONE
               00142 _xintimedout
               00143                         movfw   _X10_ADDRESSLO
               00144                         movwf   _PC
               00145                         movfw   _X10_ADDRESSHI
               00146                         movwf   _PCH
               00147                         _@CLRSP
               00148                         _@GOTO  _RESET
               00149 _xinrcv
               00150                         movwf   _X10_BITCT      ; Save count
               00151                         clrf    _X10_DATA       ; Clean
               00152 _xinrcvloop
               00153                         call    _xingetbit      ; Wait for next zero crossing and get bit
               00154                         rlf     _X10_DATA,F     ; Roll bit into result
               00155                         _@CALL  _XZNEXT         ; Skip next zero crossing
               00156                         decfsz  _X10_BITCT,F    ; Do all the bits
               00157                         goto    _xinrcvloop
               00158                         movfw   _X10_DATA
               00159                         return
               00160 _xingetbit
               00161                         _@CALL  _XZNEXT         ; Wait for next zero crossing
               00162 
               00163                         movlw   LOW 250         ; Wait 250us
               00164                         movwf   _X10_WORK1
               00165                         clrf    _X10_WORK2
               00166                                                 _@SETCYCLES 10
               00167                         _@CALL  _PAUSEUSFUNC16
               00168 
               00169                         movfw   _X10_DATAPORT   ; Get data pin state
               00170                         movwf   FSR             ; Put data port into FSR
               00171                         movfw   _X10_DATAMASK   ; Get data bit mask
               00172                         andwf   INDF, W         ; Isolate current state bit
               00173                         xorwf   _X10_DATAMASK,W ; Invert
               00174                         addlw   -1              ; Move data bit to carry
               00175                         return
               00176         endif
               00177 
               00178         ifdef _DEFXIN
               00179 ;XIN                    #                                       ;STACK0:3
               00180 ;                               _EXP\                           ;STACK4:7
               00181 ;                               _EXP,                           ;STACK8:11
               00182 ;                               _EXP,                           ;STACK12:15
               00183 ;                               {_ADDRESS|$FFFF,        ;STACK16:19
               00184 ;                               _EXP|0,}                        ;STACK20:23
               00185 ;                               [_ENHVAR]                       ;WORK0:3
               00186                                 
               00187                         _@ALIGNPAGE D'8'
               00188 _XINCMD
               00189                         _@CALL  _XINFUNC
               00190                         _@GOTO  _LETFUNC
               00191         endif
               00192 
               00193         ifdef _DEFXOUT
               00194 ;XOUT                   #                                       ;STACK0:3
               00195 ;                               _EXP\                           ;STACK4:7
               00196 ;                               _EXP,                           ;STACK8:11
               00197 ;                               _EXP,                           ;STACK12:15
               00198 ;                               [_ENHEXP]                       ;WORK0:3
               00199                                 
               00200                         _@ALIGNPAGE D'80'
               00201 _XOUTCMD
               00202                         _@CALL  _X10SETUP
               00203                         comf    _X10_DATAMASK,w
               00204                         andwf   INDF,F          ; Set Data Low
               00205                         bsf     FSR,7
               00206                         andwf   INDF,F          ; Set Data output
               00207                         bcf     FSR,7
               00208 
               00209                         movlw   2               ; 2 cycles
               00210                         movwf   _X10_WORK3      ; Save number of cycles
               00211 
               00212                         movlw   6               ; Wait for 3 cycles of silence
               00213                         movwf   _X10_WORK5
               00214 
               00215 _xoutwait
               00216                         _@CALL  _XZNEXT
               00217                         decfsz  _X10_WORK5,F
               00218                         goto    _xoutwait
               00219 
               00220 _xoutstart
               00221                         call    _xout1          ; 1 Send start code
               00222                         call    _xout1          ; 1
               00223                         call    _xout10         ; 10
               00224 
               00225                         swapf   _X10_HOUSE,W    ; Get house code
               00226                         andlw   0xF0            ; Clear low nib
               00227                         movwf   _X10_DATA       ; Save house code
               00228 
               00229                         movlw   4               ; 4 bits in this package
               00230                         movwf   _X10_BITCT      ; Save in bit counter
               00231 _xouthloop
               00232                         rlf     _X10_DATA,F      ; Get a bit
               00233                         call    _xoutsend
               00234                         decfsz  _X10_BITCT,F
               00235                         goto    _xouthloop
               00236 
               00237                         rrf     _WORK,F         ; Move 5th bit into Carry
               00238                         swapf   _WORK,W         ; Get 4bit key
               00239                         andlw   0xF0            ; Clear unused
               00240                         movwf   _X10_DATA       ; Save 4bit key
               00241                         skpnc
               00242                         bsf     _X10_DATA,3     ; Add 5th bit
               00243                         rlf             _WORK,F                 ; Put 5th bit back into WORK
               00244 
               00245                         movlw   5               ; 5 bits in this package
               00246                         movwf   _X10_BITCT      ; Save in bit counter
               00247 _xoutkloop
               00248                         rlf     _X10_DATA,F     ; Get a bit
               00249                         call    _xoutsend
               00250                         decfsz  _X10_BITCT,F
               00251                         goto    _xoutkloop
               00252 
               00253                         decfsz  _X10_WORK3, F   ; Do number of cycles
               00254                         goto    _xoutstart
               00255                                                 _@DONE
               00256 _xoutsend
               00257                         skpc                    ; Bit high or low?
               00258                         goto    _xout01         ; Low
               00259 _xout10
               00260                         call    _xout1          ; Send the high signal
               00261                         _@GOTO  _XZNEXT         ; Wait for next zero crossing
               00262 _xout01
               00263                         _@CALL  _XZNEXT         ; Wait for next zero crossing
               00264 _xout1
               00265                         _@CALL  _XZNEXT         ; Wait for next zero crossing
               00266 
               00267                         movfw   _X10_DATAPORT   ; Get data port
               00268                         movwf   FSR             ; Put it into FSR
               00269 
               00270                         movlw   3               ; Bit sent 3 times per cycle
               00271                         movwf   _X10_WORK5
               00272 _xout1loop
               00273                         movfw   _X10_DATAMASK   ; Get data bit mask
               00274                         iorwf   INDF, F         ; Set the bit High
               00275 
               00276                         movlw   high 1000       ; Pause 1 ms
               00277                         movwf   _X10_WORK2
               00278                         movlw   low 1000
               00279                         movwf   _X10_WORK1
               00280                                                 _@SETCYCLES 10
               00281                         _@CALL  _PAUSEUSFUNC16
               00282 
               00283                         comf    _X10_DATAMASK,W ; Get inverted data bit mask
               00284                         andwf   INDF,F          ; Clear the bit
               00285 
               00286                         decf    _X10_WORK5,F    ; Done 3 phase?
               00287                         skpnz
               00288                         return
               00289 
               00290                         movlw   high 1770       ; Pause another 1.778ms
               00291                         movwf   _X10_WORK2
               00292                         movlw   low 1770
               00293                         movwf   _X10_WORK1
               00294                                                 _@SETCYCLES 10
               00295                         _@CALL  _PAUSEUSFUNC16
               00296 
               00297                         goto    _xout1loop       ; Do it again
               00298         endif
               00129 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MBASIC~1.LIB" ;mbasic14\mbasicadin.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003                 ifdef _DEFADINFUNC
               00004                         _@ALIGNPAGE D'100'
               00005         ifdef ADCON0
               00006 _ADIN_PIN               equ                     _STACK 
               00007 _ADIN_CLK               equ                     _STACK+4 
               00008 _ADIN_SETUP             equ                     _STACK+8
               00009 _ADIN_FINISH    equ                     _STACK+12
               00010 _ADIN_WORK              equ                     _WORK+4
               00011 
               00012 _@ADCHANNEL     macro pin,channel
               00013                         movlw   pin
               00014                         subwf   _ADIN_PIN,w
               00015                         skpz
               00016                         goto    $+3             
               00017                         movlw   channel
               00018                         movwf   _ADIN_WORK
               00019         endm
               00020 
               00021         ifndef _ADIN0
               00022 _ADIN0                  EQU 0
               00023         endif
               00024         ifndef _ADIN1
               00025 _ADIN1                  EQU 1
               00026         endif
               00027         ifndef _ADIN2
               00028 _ADIN2                  EQU 2
               00029         endif
               00030         ifndef _ADIN3
               00031 _ADIN3                  EQU 3
               00032         endif
               00033         ifndef _ADIN4
               00034 _ADIN4                  EQU 5
               00035         endif
               00036         ifndef _ADIN5
               00037 _ADIN5                  EQU 32
               00038         endif
               00039         ifndef _ADIN6
               00040 _ADIN6                  EQU 33
               00041         endif
               00042         ifndef _ADIN7
               00043 _ADIN7                  EQU 34
               00044         endif
               00045         ifndef _ADIN8
               00046 _ADIN8                  EQU 10
               00047         endif
               00048         ifndef _ADIN9
               00049 _ADIN9                  EQU 11
               00050         endif
               00051                 
               00052 _ADIN_INIT
               00053                                 clrf    ADCON0                  ; Reset ADCON0
               00054                                 bsf     ADCON0,0                                ; Enable A/D converter
               00055                                 movfw   _ADIN_SETUP             
               00056                                 _@BANK  _WORK,ADCON1            ; Sel ADCON1 bank
               00057                                 movwf   ADCON1&0x7f             ; Load ADCON1
               00058                                 _@BANK  ADCON1,_WORK            ; Sel WORK bank
               00059                 
               00060                                 clrf    _ADIN_WORK
               00061                                 _@ADCHANNEL _ADIN0,b'00000000'
               00062                                 _@ADCHANNEL _ADIN1,b'00001000'
               00063                                 _@ADCHANNEL _ADIN2,b'00010000'
               00064                                 _@ADCHANNEL _ADIN3,b'00011000'
               00065                                 _@ADCHANNEL _ADIN4,b'00100000'
               00066                                 _@ADCHANNEL _ADIN5,b'00101000'
               00067                                 _@ADCHANNEL _ADIN6,b'00110000'
               00068                                 _@ADCHANNEL _ADIN7,b'00111000'
               00069                                 _@ADCHANNEL _ADIN8,b'00000010'
               00070                                 _@ADCHANNEL _ADIN9,b'00001010'
               00071                                 movfw   _ADIN_WORK                              ; Get Channel
               00072                 iorwf   ADCON0,f                ; IOR ADCON0
               00073 
               00074                                 swapf   _ADIN_CLK,F                             ; Load Pin INDEX
               00075                                 rlf             _ADIN_CLK,F
               00076                                 rlf             _ADIN_CLK,W
               00077                 iorwf   ADCON0,F                ; IOR ADCON0
               00078 
               00079                                 ;Set Pin to input
               00080                                 _@CALL  _INPUTFUNC
               00081 
               00082                 _@USDELAY 100
               00083                                 return
               00084 _ADIN_CONV
               00085                                 bsf             ADCON0,2                
               00086 _adinlp
               00087                 clrwdt                          ; Keep Watchdog happy
               00088                 btfsc   ADCON0,2                                ; Wait for conversion to complete
               00089                 goto    _adinlp
               00090 
               00091                 ifdef ADRES
               00092                 movfw   ADRES&0x7f                              ; Get 8bit result         
               00093                 movwf   _STACK
               00094                 clrf    _STACK+1
               00095                 else                
               00096                 movfw   ADRESH                  ; Get 12-bit result
               00097                 movwf   _STACK+1
               00098                 _@BANK  _WORK,ADRESL
               00099                 movfw   ADRESL&0x7f          
               00100                 _@BANK  ADRESL,_WORK
               00101                 movwf   _STACK
               00102                 endif                
               00103                 clrf    _STACK+2
               00104                 clrf    _STACK+3
               00105                                 return
               00106 _ADIN_STOP
               00107 _adinshutdown
               00108                 clrf    ADCON0                  ; Reset ADCON0
               00109                 movfw   _ADIN_FINISH                    ; Set optional Finish state
               00110                 _@BANK  _WORK,ADCON1            ; Sel ADCON1 bank
               00111                 movwf   ADCON1&0x7f             ; Load ADCON1
               00112                 _@BANK  ADCON1,_WORK            ; Sel WORK bank
               00113                 return
               00114                 endif
               00115                 endif
               00116                 
               00117         ifdef _DEFADIN
               00118         ifdef ADCON0
               00119 ;ADIN                   _EXP,                   ;STACK0:3
               00120 ;                               _EXP,                   ;STACK4:7
               00121 ;                               _EXP                    ;STACK8:11
               00122 ;                               {\_EXP|$7},             ;STACK12:15
               00123 ;                               _VAR _EXEC              ;WORK0:3
               00124                                 
               00125                         _@ALIGNPAGE D'100'
               00126 _ADINCMD
               00127                                 call    _ADIN_INIT
               00128                                 call    _ADIN_CONV
               00129                 _@CALL  _LETFUNC
               00130                                 call    _ADIN_STOP
               00131 
               00132                 _@CLRSP
               00133                                 _@DONE
               00134         endif
               00135         endif
               00136         
               00137         ifdef _DEFADIN16
               00138         ifdef ADCON0
               00139 ;ADIN16                 _EXP,                   ;STACK0:3
               00140 ;                               _EXP,                   ;STACK4:7
               00141 ;                               _EXP                    ;STACK8:11
               00142 ;                               {\_EXP|$7},             ;STACK12:15
               00143 ;                               _VAR _EXEC              ;WORK0:3
               00144                                 
               00145 _ADIN16_CNT     equ     _WORK+5
               00146 _ADIN16_LO      equ     _WORK+6
               00147 _ADIN16_HI      equ     _WORK+7
               00148 _ADIN16CMD
               00149                                 bsf             _STACK+8,7      ;Force Right Justified but
               00150 
               00151                                 clrf    _ADIN16_LO
               00152                                 clrf    _ADIN16_HI
               00153                                 
               00154                 ifdef ADRES
               00155                                 movlw   0
               00156                 else                
               00157                                 movlw   -64
               00158                 endif                
               00159                                 movwf   _ADIN16_CNT
               00160                                 
               00161                                 call    _ADIN_INIT
               00162 _adin16_lp                              
               00163                                 call    _ADIN_CONV
               00164 
               00165                                 movfw   _STACK
               00166                                 addwf   _ADIN16_LO,F
               00167                                 skpnc
               00168                                 incf    _ADIN16_HI,F
               00169                                 movfw   _STACK+1
               00170                                 addwf   _ADIN16_HI,F
               00171                                 
               00172                 incfsz  _ADIN16_CNT,F
               00173                 goto    _adin16_lp
               00174                 
               00175                                 movfw   _ADIN16_LO
               00176                                 movwf   _STACK
               00177                                 movfw   _ADIN16_HI
               00178                                 movwf   _STACK+1
               00179                 
               00180                 _@CALL  _LETFUNC
               00181                                 call    _ADIN_STOP
               00182 
               00183                 _@CLRSP
               00184                                 _@DONE
               00185         endif
               00186         endif
               00130 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB495C~1.LIB" ;mbasic14\mbasichard.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003         ifdef _DEFSETHTMR0
               00004 ;SETHTMR0               _EXP _EXEC:             ;WORK0:3
               00005 _SETHTMR0CMD
               00006                 ifdef _DEFENABLEHTIMER0
               00007                                 movlw   B'11000000'
               00008                                 bsf     STATUS,RP0
               00009                                 andwf   OPTION_REG&0x7F,W
               00010                                 bcf     STATUS,RP0
               00011                                 iorwf   _WORK,W
               00012                                 clrf    TMR0
               00013                                 clrwdt
               00014                                 bsf     STATUS,RP0
               00015                                 movwf   OPTION_REG&0x7F
               00016                                 bcf     STATUS,RP0
               00017                                 bsf             INTCON,T0IE
               00018                                 bsf             INTCON,GIE
               00019                                 _@DONE
               00020                 else
               00021                                 messg "The Hardware Timer0 must been ENABLED before using SETHTMR0"
               00022                                 _@DONE
               00023                 endif
               00024         endif
               00025                 
               00026         ifdef _DEFSETHTMR1
               00027 ;SETHTMR1               _EXP _EXEC:             ;WORK0:3
               00028         _@ALIGNPAGE D'30'
               00029 _SETHTMR1CMD
               00030                 ifdef _DEFENABLEHTIMER1
               00031                                 clrf    T1CON
               00032                                 movfw   _WORK
               00033                                 skpnz
               00034                                 goto    _sethtmr1_off
               00035                                 movwf   T1CON
               00036                                 bsf             STATUS,RP0
               00037                                 bsf             PIE1&0x7F,TMR1IE
               00038                                 bcf             STATUS,RP0
               00039                                 bsf             INTCON,GIE
               00040                                 bsf             INTCON,PEIE
               00041                                 _@DONE
               00042 _sethtmr1_off:
               00043                                 bsf             STATUS,RP0
               00044                                 bcf             PIE1&0x7F,TMR1IE
               00045                                 bcf             STATUS,RP0
               00046                                 _@DONE
               00047                 else
               00048                                 messg "The Hardware Timer1 must been ENABLED before using SETHTMR1"
               00049                                 _@DONE
               00050                 endif
               00051         endif
               00052                 
               00053         ifdef _DEFSETHSERIAL
               00054 ;SETHSERIAL             _EXP _EXEC:             ;WORK0:3
               00055         _@ALIGNPAGE D'50'
               00056 _SETHSERIALCMD
               00057                 ifdef _DEFENABLEHSERIAL
               00058                 banksel _HSERINSTART
               00059                 movlw   _HSERINBUFFERSTART&0xff
               00060                 movwf   _HSERINSTART&0x7f
               00061                 movwf   _HSERINEND&0x7f
               00062                 movlw   _HSEROUTBUFFERSTART&0xff
               00063                 movwf   _HSEROUTSTART&0x7f
               00064                 movwf   _HSEROUTEND&0x7f
               00065                 
               00066                 banksel _WORK
               00067                 movfw   _WORK+1
               00068                 iorwf   _WORK,W
               00069                 skpnz
               00070                 goto    _sethserial_off
               00071                 banksel _WORK
               00072                 rlf     _WORK+1,W       ;Save BRGH flag in Carry
               00073                 movfw   _WORK
               00074                 bsf     STATUS,RP0
               00075                 ifndef PORTC
               00076                 bcf     PORTB,2
               00077                 bsf     PORTB,1
               00078                 else
               00079                 bcf     PORTC,6
               00080                 bsf     PORTC,7
               00081                 endif
               00082                 bcf     TXSTA&0x7f,BRGH
               00083                 skpnc
               00084                 bsf     TXSTA&0x7f,BRGH
               00085                 movwf   SPBRG&0x7f
               00086                 bsf     TXSTA&0x7f,TXEN
               00087                 bcf     TXSTA&0x7f,SYNC
               00088                 bsf     PIE1&0x7f,RCIE
               00089                 bcf     STATUS,RP0
               00090                 bsf     RCSTA,SPEN
               00091                 bsf     RCSTA,CREN
               00092                 bsf     INTCON,GIE
               00093                 bsf     INTCON,PEIE
               00094                                 _@DONE
               00095 _sethserial_off:
               00096                 bcf     RCSTA,SPEN              ;disable serial port
               00097                 bsf     STATUS,RP0
               00098                 bcf     TXSTA&0x7f,TXEN ;Disable transmit
               00099                 bcf     PIE1&0x7f,RCIE  ;disable recieve interrupt
               00100                 ifndef PORTC
               00101                 bsf     PORTB,2                 ;set pins to inputs
               00102                 bsf     PORTB,1
               00103                 else
               00104                 bsf     PORTC,6
               00105                 bsf     PORTC,7
               00106                 endif
               00107                 bcf     STATUS,RP0
               00108                                 _@DONE
               00109                 else
               00110                                 messg "The Hardware Serial port must been ENABLED before using SETHSERIAL"
               00111                                 _@DONE
               00112                 endif
               00113         endif
               00114                 
               00115         ifdef _DEFHSERINFUNC
               00116 #define _HSERIN_TTIMEOUT1       _STACK
               00117 #define _HSERIN_TTIMEOUT2       _STACK+1
               00118 #define _HSERIN_TTIMEOUT3       _STACK+2
               00119 #define _HSERIN_TTIMEOUT4       _STACK+3
               00120 
               00121 #define _HSERIN_TIMEOUT1        _STACK+4
               00122 #define _HSERIN_TIMEOUT2        _STACK+5
               00123 #define _HSERIN_TIMEOUT3        _STACK+6
               00124 #define _HSERIN_TIMEOUT4        _STACK+7
               00125 
               00126 #define _HSERIN_ADDRESS_L       _STACK+8
               00127 #define _HSERIN_ADDRESS_H       _STACK+9
               00128 
               00129         _@ALIGNPAGE D'60'
               00130 _HSERINFUNC
               00131         ifdef _DEFENABLEHSERIAL
               00132                 if _BANK3_START != 0
               00133                                 bsf     STATUS,IRP
               00134                 else
               00135                         if _BANK2_START != 0
               00136                                 bsf     STATUS,IRP
               00137                         endif
               00138                 endif
               00139                 movfw   _HSERIN_TIMEOUT1                ;Load Timeout into TTimeout
               00140                 movwf   _HSERIN_TTIMEOUT1
               00141                 movfw   _HSERIN_TIMEOUT2
               00142                 movwf   _HSERIN_TTIMEOUT2
               00143                 movfw   _HSERIN_TIMEOUT3
               00144                 movwf   _HSERIN_TTIMEOUT3
               00145                 movfw   _HSERIN_TIMEOUT4
               00146                 movwf   _HSERIN_TTIMEOUT4
               00147                 
               00148 _HSERIN_MAIN
               00149                                 clrwdt                                                  ;1(24cycles in loop) Keep wdt happy
               00150                 
               00151                 banksel _HSERINSTART                    ;2 Check Buffer state
               00152                 movfw   _HSERINSTART&0x7f               ;1
               00153                 subwf   _HSERINEND&0x7f,W               ;1
               00154                 skpz                                                    ;1 Byte available in Buffer?
               00155                 goto    _HSERINFINISH                   ;1 Yes, finish
               00156 
               00157                 banksel _WORK                                   ;2
               00158                 movfw   _HSERIN_ADDRESS_H               ;1
               00159                 iorwf   _HSERIN_ADDRESS_L,W             ;1
               00160                 skpnz                                                   ;1
               00161                 goto    _HSERIN_MAIN                    ;1 No,Skip Timeout check/delay
               00162 
               00163                                 _@SETCYCLES 38                                  ;6
               00164                                 movfw   _CMD+2                                  ;1
               00165                                 subwf   _CMD,F                                  ;1
               00166                                 movfw   _CMD+3                                  ;1
               00167                                 skpc                                                    ;1
               00168                                 addlw   1                                               ;1
               00169                                 subwf   _CMD+1,F                                ;1
               00170                                 movfw   _CMD+4                                  ;1
               00171                                 skpc                                                    ;1
               00172                                 addlw   1                                               ;1
               00173                                 subwf   _HSERIN_TTIMEOUT1,F             ;1 Sub Used     Time
               00174                                 movlw   1                                               ;1 Set sub
               00175                                 skpc                                                    ;1 Carry?
               00176                                 subwf   _HSERIN_TTIMEOUT2,F             ;1
               00177                                 skpc                                                    ;1 Carry?
               00178                                 subwf   _HSERIN_TTIMEOUT3,F             ;1
               00179                                 skpc                                                    ;1 Carry?
               00180                                 subwf   _HSERIN_TTIMEOUT4,F             ;1
               00181                                 skpnc                                                   ;1 Carry?
               00182                 goto    _HSERIN_MAIN                    ;2 No Timeout
               00183 _HSERINTIMEDOUT
               00184                 movfw   _HSERIN_ADDRESS_L
               00185                 movwf   _PC
               00186                 movfw   _HSERIN_ADDRESS_H
               00187                 movwf   _PCH
               00188                 _@CLRSP
               00189                 _@GOTO  _RESET                                  ;Goto Exception Address
               00190 _HSERINFINISH
               00191                 movfw   _HSERINEND&0x7f                 ;Get Byte address
               00192                 movwf   FSR
               00193                 movfw   INDF                                    ;Get Byte
               00194                 banksel _WORK
               00195                 movwf   _STACK                                  ;Save in Stack
               00196                 clrf    _STACK+1
               00197                 clrf    _STACK+2
               00198                 clrf    _STACK+3
               00199 
               00200                 banksel _HSERINSTART                    ;Incr Byte ptr
               00201                 movlw   _HSERINBUFFEREND&0xff
               00202                 subwf   _HSERINEND&0x7f,w
               00203                 movlw   _HSERINBUFFERSTART&0xff
               00204                 skpz
               00205                 incf    _HSERINEND&0x7f,w
               00206                 movwf   _HSERINEND&0x7f
               00207                 banksel _WORK
               00208         if _BANK2_START != 0
               00209                                 bcf     STATUS,IRP
               00210                 endif
               00211                                 _@DONE
               00212                 endif
               00213         endif
               00214 
               00215         ifdef _DEFHSERIN
               00216 ;HSERIN                 #                                       ;STACK0:3
               00217 ;                               {_EXP|0,                        ;STACK4:7
               00218 ;                               _ADDRESS|$FFFF,}        ;STACK8:11
               00219 ;                               [_ENHVAR]*CLRSP:        ;WORK0:3
               00220 
               00221 _HSERINCMD
               00222         ifdef _DEFENABLEHSERIAL
               00223                 _@CALL  _HSERINFUNC
               00224                 _@GOTO  _LETFUNC
               00225                 else
               00226                                 messg "The Hardware Serial port must been ENABLED before using HSERIN"
               00227                                 _@CLRSP
               00228                                 _@DONE
               00229                 endif
               00230         endif
               00231 
               00232         ifdef _DEFHSEROUT
               00233 ;HSEROUT         [_ENHEXP]*CLRSP:       ;WORK0:3
               00234 
               00235 _HSEROUTCMD
               00236         ifdef _DEFENABLEHSERIAL
               00237                 _@BANK  _WORK,_HSEROUTSTART
               00238                 if _BANK3_START != 0
               00239                                 bsf     STATUS,IRP
               00240                 else
               00241                         if _BANK2_START != 0
               00242                                 bsf     STATUS,IRP
               00243                         endif
               00244                 endif
               00245                 movfw   _HSEROUTSTART&0x7f
               00246                 movwf   FSR
               00247                 _@BANK  _HSEROUTSTART,_WORK
               00248                 movfw   _WORK
               00249                 movwf   INDF
               00250 
               00251                 _@BANK  _WORK,_HSEROUTSTART
               00252                 movlw   _HSEROUTBUFFEREND&0xff  ;Incr to next output byte
               00253                 subwf   _HSEROUTSTART&0x7f,w
               00254                 movlw   _HSEROUTBUFFERSTART&0xff
               00255                 skpz
               00256                 incf    _HSEROUTSTART&0x7f,w
               00257                 movwf   _HSEROUTSTART&0x7f
               00258                 _@BANK  _HSEROUTSTART,PIE1
               00259                 bsf     PIE1&0x7f,TXIE                  ;Set Send flag
               00260                 _@BANK  PIE1,_HSEROUTSTART
               00261 _HSEROUTWAIT                
               00262                                 clrwdt                                                  ;Keep Watchdog happy
               00263                 movlw   _HSEROUTBUFFEREND&0xff
               00264                 subwf   _HSEROUTSTART&0x7f,w
               00265                 movlw   _HSEROUTBUFFERSTART&0xff
               00266                 skpz
               00267                 incf    _HSEROUTSTART&0x7f,w
               00268                 subwf   _HSEROUTEND&0x7f,w
               00269                 skpnz
               00270                 goto    _HSEROUTWAIT
               00271                 _@BANK  _HSEROUTSTART,_WORK
               00272         if _BANK2_START != 0
               00273                                 bcf     STATUS,IRP
               00274                 endif
               00275                                 _@DONE
               00276                 else
               00277                                 messg "The Hardware Serial port must been ENABLED before using HSEROUT"
               00278                                 _@DONE
               00279                 endif
               00280         endif
               00281 
               00282                 ifdef _DEFHSERSTAT
               00283 ;HSERSTAT               _EXP                                    ;STACK0:3
               00284 ;                               {,_ADDRESS|0} _EXEC:    ;WORK0:3
               00285                                 
               00286         _@ALIGNPAGE D'100'
               00287 #define _HSERSTAT_MODE          _STACK
               00288 #define _HSERSTAT_WORK          _STACK+1
               00289 
               00290 _HSERSTATCMD
               00291         ifdef _DEFENABLEHSERIAL
               00292                         movlw   HIGH _HSERSTAT_CMDTBL
               00293                         movwf   PCLATH
               00294                         movfw   _HSERSTAT_MODE
               00295                                 _@BANK _WORK,_HSERINSTART
               00296                         andlw   0x07
               00297                         addwf   PCL,F
               00298 _HSERSTAT_CMDTBL
               00299                                 goto    _HSERSTAT_INCLEAR               ;0
               00300                                 goto    _HSERSTAT_OUTCLEAR              ;1
               00301                                 goto    _HSERSTAT_CLEAR                 ;2
               00302                                 goto    _HSERSTAT_INDATA                ;3
               00303                                 goto    _HSERSTAT_INNODATA              ;4
               00304                                 goto    _HSERSTAT_OUTDATA               ;5
               00305                                 goto    _HSERSTAT_OUTNODATA             ;6
               00306                                 goto    _HSERSTAT_FINISH                ;7
               00307 _HSERSTAT_INCLEAR               ;0
               00308                                 movfw   _HSERINSTART&0x7F
               00309                                 movwf   _HSERINEND&0x7F
               00310                                 goto    _HSERSTAT_FINISH
               00311 _HSERSTAT_OUTCLEAR              ;1
               00312                                 movfw   _HSEROUTSTART&0x7F
               00313                                 movwf   _HSEROUTEND&0x7F
               00314                                 goto    _HSERSTAT_FINISH
               00315 _HSERSTAT_CLEAR                 ;2
               00316                                 movfw   _HSERINSTART&0x7F
               00317                                 movwf   _HSERINEND&0x7F
               00318                                 movfw   _HSEROUTSTART&0x7F
               00319                                 movwf   _HSEROUTEND&0x7F
               00320                                 goto    _HSERSTAT_FINISH
               00321 _HSERSTAT_INDATA                ;7
               00322                                 movfw   _HSERINSTART&0x7F
               00323                                 subwf   _HSERINEND&0x7F,W
               00324                                 skpz
               00325                                 goto    _HSERSTAT_GOTO
               00326                                 goto    _HSERSTAT_FINISH
               00327 _HSERSTAT_INNODATA              ;8
               00328                                 movfw   _HSERINSTART&0x7F
               00329                                 subwf   _HSERINEND&0x7F,W
               00330                                 skpnz
               00331                                 goto    _HSERSTAT_GOTO
               00332                                 goto    _HSERSTAT_FINISH
               00333 _HSERSTAT_OUTDATA               ;9
               00334                                 movfw   _HSEROUTSTART&0x7F
               00335                                 subwf   _HSEROUTEND&0x7F,W
               00336                                 skpz
               00337                                 goto    _HSERSTAT_GOTO
               00338                                 goto    _HSERSTAT_FINISH
               00339 _HSERSTAT_OUTNODATA             ;10
               00340                                 movfw   _HSEROUTSTART&0x7F
               00341                                 subwf   _HSEROUTEND&0x7F,W
               00342                                 skpz
               00343                                 goto    _HSERSTAT_FINISH
               00344 _HSERSTAT_GOTO
               00345                                 _@BANK _HSERINSTART,_WORK
               00346                                 movfw   _WORK
               00347                                 iorwf   _WORK+1,W
               00348                                 skpnz
               00349                                 goto    _HSERSTAT_FINISH
               00350                 movfw   _WORK
               00351                 movwf   _PC
               00352                 movfw   _WORK+1
               00353                 movwf   _PCH
               00354 _HSERSTAT_FINISH                                
               00355                                 _@BANK _HSERINSTART,_WORK
               00356                                 _@CLRSP
               00357                                 _@DONE
               00358                 else
               00359                                 messg "The Hardware Serial port must been ENABLED before using HSERSTAT"
               00360                                 _@CLRSP
               00361                                 _@DONE
               00362                 endif
               00363                 endif
               00364                 
               00365         ifdef _DEFSETOPTION_REG
               00366 #define _NEW_OPTION_REG _WORK
               00367 _SETOPTION_REG
               00368                         bsf     STATUS,RP0
               00369                         andwf   OPTION_REG&0x7F,W
               00370                         bcf     STATUS,RP0
               00371                         iorwf   _NEW_OPTION_REG,W
               00372                         clrf    TMR0
               00373                         clrwdt
               00374                         bsf     STATUS,RP0
               00375                         movwf   OPTION_REG&0x7F
               00376                         bcf     STATUS,RP0
               00377                                                 _@DONE
               00378         endif
               00379 
               00380         ifdef _DEFSETPULLUPS
               00381 ;SETPULLUPS             _EXP _EXEC:
               00382 _SETPULLUPSCMD
               00383                                                 movlw   B'01111111'
               00384                                                 _@GOTO  _SETOPTION_REG
               00385         endif
               00386 
               00387         ifdef _DEFSETEXTINT
               00388 ;SETEXTINT              _EXP _EXEC:
               00389 _SETEXTINTCMD
               00390                                                 movlw   B'10111111'
               00391                                                 _@GOTO  _SETOPTION_REG
               00392         endif
               00393 
               00394         ifdef _DEFSETTMR0
               00395 ;SETTMR0                        _EXP _EXEC:
               00396 _SETTMR0CMD
               00397                                                 movlw   B'11000000'
               00398                                                 _@GOTO  _SETOPTION_REG
               00399         endif
               00400 
               00401         ifdef _DEFSETTMR1
               00402 ;SETTMR1                        _EXP _EXEC:
               00403 #define _TMR1_CONFIG _WORK
               00404 _SETTMR1CMD
               00405                         clrf    T1CON
               00406                         movfw   _TMR1_CONFIG
               00407                         movwf   T1CON
               00408                                                 _@DONE
               00409         endif
               00410 
               00411         ifdef _DEFRESETTMR1
               00412 ;RESETTMR1              _EXP _EXEC:
               00413 #define _TMR1_L _WORK
               00414 #define _TMR1_H _WORK+1
               00415 _RESETTMR1CMD
               00416                         clrf    TMR1L
               00417                         movfw   _TMR1_H
               00418                         movwf   TMR1H
               00419                         movfw   _TMR1_L
               00420                         movwf   TMR1L
               00421                                                 _@DONE
               00422         endif
               00423 
               00424         ifdef _DEFGETTMR1
               00425 ;GETTMR1                        _VAR _EXEC:
               00426 _GETTMR1CMD
               00427                                                 movfw   TMR1H
               00428                                                 movwf   _STACK+1
               00429                                                 movfw   TMR1L
               00430                                                 movwf   _STACK
               00431                                                 sublw   0x02            ;Check for 8bit overflow while reading time.
               00432                                                 movfw   TMR1H           ;Preload new High time
               00433                                                 skpnc                           ;If we overflowed load the correct High time
               00434                                                 movwf   _STACK+1
               00435                                                 
               00436                                                 clrf    _STACK+2
               00437                                                 clrf    _STACK+3
               00438                                                 _@CALL  _LETFUNC
               00439                                 
               00440                                                 _@DONE
               00441         endif
               00442                 
               00443         ifdef _DEFSETTMR2
               00444 ;SETTMR2                        _EXP,_EXP _EXEC:
               00445 #define _TMR2_CONFIG    _STACK
               00446 #define _TMR2_PR2               _WORK
               00447 _SETTMR2CMD
               00448                         clrf    T2CON
               00449                         movfw   _TMR2_CONFIG
               00450                         movwf   T2CON
               00451                         movfw   _TMR2_PR2
               00452                         _@BANK _WORK,PR2
               00453                         _@MOVWF PR2
               00454                         _@BANK PR2,_WORK
               00455                         _@CLRSP
               00456                                                 _@DONE
               00457         endif
               00458 
               00459         ifdef _DEFSETCAPTURE
               00460 ;SETCAPTURE             _EXP,_EXP _EXEC:
               00461 #define _SETCAPTURE_PIN         _STACK
               00462 #define _SETCAPTURE_MODE        _WORK
               00463 _SETCAPTURECMD
               00464         ifdef CCP1CON
               00465                         movlw   TRISC
               00466                         movwf   FSR
               00467                         movlw   B'00000100'             ;Set Mask
               00468                         btfsc   _SETCAPTURE_PIN,0       ;is NOT CCP2
               00469                         movlw   B'00000010'             ;Set Mask
               00470                         iorwf   INDF,F                  ;Set as Input
               00471                         movfw   _SETCAPTURE_MODE
               00472         ifdef CCP2CON
               00473                         btfss   _SETCAPTURE_PIN,0       ;is NOT CCP1
               00474         endif
               00475                         movwf   CCP1CON                 ;Set CCP1CON
               00476         ifdef CCP2CON
               00477                         btfsc   _SETCAPTURE_PIN,0       ;is NOT CCP2
               00478                         movwf   CCP2CON                 ;Set CCP2CON
               00479         endif
               00480         endif
               00481                                         _@CLRSP
               00482                                                 _@DONE
               00483         endif
               00484 
               00485         ifdef _DEFGETCAPTURE
               00486 ;GETCAPTURE             _EXP,_VAR _EXEC:
               00487 #define _GETCAPTURE_PIN _STACK+2
               00488 _GETCAPTURECMD
               00489                                                 movfw   _STACK                                  ;Move PIN number
               00490                                                 movwf   _STACK+2
               00491         ifdef CCP1CON
               00492         ifdef CCP2CON
               00493                         btfss   _GETCAPTURE_PIN,0       ;is NOT CCP1
               00494         endif
               00495                         movfw   CCPR1L                  ;Get Low
               00496         ifdef CCP2CON
               00497                         btfsc   _GETCAPTURE_PIN,0       ;is NOT CCP2
               00498                         movfw   CCPR2L                  ;Get Low
               00499         endif
               00500                         movwf   _STACK
               00501                         movfw   CCPR1H                  ;Get Low
               00502         ifdef CCP2CON
               00503                         btfsc   _GETCAPTURE_PIN,0       ;is NOT CCP2
               00504                         movfw   CCPR2H                  ;Get Low
               00505         endif
               00506                         movwf   _STACK+1
               00507                         clrf    _STACK+2
               00508                         clrf    _STACK+3
               00509                         _@CALL  _LETFUNC
               00510         endif
               00511                                         _@CLRSP
               00512                                                 _@DONE
               00513         endif
               00514 
               00515         ifdef _DEFSETCOMPARE
               00516 ;SETCOMPARE             _EXP,_EXP,_EXP _EXEC:
               00517 #define _SETCOMPARE_PIN         _STACK
               00518 #define _SETCOMPARE_MODE        _STACK+4
               00519 #define _SETCOMPARE_L           _WORK
               00520 #define _SETCOMPARE_H           _WORK+1
               00521 _SETCOMPARECMD
               00522         ifdef CCP1CON
               00523         ifdef CCP2CON
               00524                         btfss   _SETCOMPARE_PIN,0       ;is NOT CCP2
               00525         endif                        
               00526                         clrf    CCP1CON
               00527         ifdef CCP2CON
               00528                         btfsc   _SETCOMPARE_PIN,0       ;is NOT CCP1
               00529                         clrf    CCP2CON
               00530         endif                        
               00531                         movlw   TRISC
               00532                         movwf   FSR
               00533                         movlw   B'11111011'             ;Set Mask
               00534                         btfsc   _SETCOMPARE_PIN,0       ;is NOT CCP2
               00535                         movlw   B'11111101'             ;Set Mask
               00536                         andwf   INDF,F                  ;Set as Output
               00537                         movfw   _SETCOMPARE_L
               00538         ifdef CCP2CON
               00539                         btfss   _SETCOMPARE_PIN,0       ;is NOT CCP1
               00540         endif
               00541                         movwf   CCPR1L                  ;Set CCP1CON
               00542         ifdef CCP2CON
               00543                         btfsc   _SETCOMPARE_PIN,0       ;is NOT CCP2
               00544                         movwf   CCPR2L                   ;Set CCP2CON
               00545         endif
               00546                         movfw   _SETCOMPARE_H
               00547         ifdef CCP2CON
               00548                         btfss   _SETCOMPARE_PIN,0       ;is NOT CCP1
               00549         endif
               00550                         movwf   CCPR1H                  ;Set CCP1CON
               00551         ifdef CCP2CON
               00552                         btfsc   _SETCOMPARE_PIN,0       ;is NOT CCP2
               00553                         movwf   CCPR2H                  ;Set CCP2CON
               00554         endif
               00555                         movfw   _SETCOMPARE_MODE
               00556         ifdef CCP2CON
               00557                         btfss   _SETCOMPARE_PIN,0       ;is NOT CCP1
               00558         endif
               00559                         movwf   CCP1CON                 ;Set CCP1CON
               00560         ifdef CCP2CON
               00561                         btfsc   _SETCOMPARE_PIN,0       ;is NOT CCP2
               00562                         movwf   CCP2CON                 ;Set CCP2CON
               00563         endif
               00564         endif
               00565                                         _@CLRSP
               00566                                                 _@DONE
               00567         endif
               00568 
               00569         ifdef _DEFHPWM
               00570 ;HPWM            _EXP,_EXP,_EXP _EXEC:
               00571 #define _HPWM_PIN       _STACK
               00572 #define _HPWM_WORK      _STACK+1
               00573 
               00574 #define _HPWM_PERIOD_LO _STACK+4
               00575 #define _HPWM_PERIOD_HI _STACK+5
               00576 
               00577 #define _HPWM_DUTY_LO   _WORK
               00578 #define _HPWM_DUTY_HI   _WORK+1
               00579 
               00580         _@ALIGNPAGE D'90'
               00581 _HPWMCMD
               00582         ifdef CCP1CON
               00583         ifdef DC1B1
               00584 #define CCP1X DC1B1
               00585                 endif
               00586         ifdef DC1B0
               00587 #define CCP1Y DC1B0
               00588                 endif
               00589                 ifndef PORTC
               00590 _HPWMPORT equ PORTB             
               00591 _HPWMMASK equ B'11110111'
               00592                 else
               00593 _HPWMPORT equ PORTC
               00594 _HPWMMASK equ B'11111011'
               00595                 endif           
               00596                         movlw   _HPWMMASK
               00597                 ifdef CCP2CON
               00598                         btfsc   _HPWM_PIN,0     ;is NOT CCP1
               00599                         movlw   B'11111101'
               00600                 endif                        
               00601                         bsf     STATUS,RP0
               00602                         andwf   _HPWMPORT,F             ;Set Pin to output
               00603                         bcf     STATUS,RP0
               00604                         clrc
               00605                         rrf     _HPWM_PERIOD_HI,F
               00606                         rrf     _HPWM_PERIOD_LO,F
               00607                         clrc
               00608                         rrf     _HPWM_PERIOD_HI,F
               00609                         rrf     _HPWM_PERIOD_LO,F
               00610                         clrf    T2CON
               00611                         movlw   h'0F'
               00612                         andwf   _HPWM_PERIOD_HI,W
               00613                         skpnz
               00614                         goto    _HPWM_PS1
               00615                         bsf     T2CON,T2CKPS0
               00616                         bcf     T2CON,T2CKPS1
               00617                         movlw   h'0C'
               00618                         andwf   _HPWM_PERIOD_HI,W
               00619                         skpnz
               00620                         goto    _HPWM_PS4
               00621 _HPWM_PS16
               00622                         bsf     T2CON,T2CKPS1
               00623                         clrc
               00624                         rrf     _HPWM_PERIOD_HI,F
               00625                         rrf     _HPWM_PERIOD_LO,F
               00626                         clrc
               00627                         rrf     _HPWM_PERIOD_HI,F
               00628                         rrf     _HPWM_PERIOD_LO,F
               00629                         clrc
               00630                         rrf     _HPWM_DUTY_HI,F
               00631                         rrf     _HPWM_DUTY_LO,F
               00632                         clrc
               00633                         rrf     _HPWM_DUTY_HI,F
               00634                         rrf     _HPWM_DUTY_LO,F
               00635 _HPWM_PS4
               00636                         clrc
               00637                         rrf     _HPWM_PERIOD_HI,F
               00638                         rrf     _HPWM_PERIOD_LO,F
               00639                         clrc
               00640                         rrf     _HPWM_PERIOD_HI,F
               00641                         rrf     _HPWM_PERIOD_LO,F
               00642                         clrc
               00643                         rrf     _HPWM_DUTY_HI,F
               00644                         rrf     _HPWM_DUTY_LO,F
               00645                         clrc
               00646                         rrf     _HPWM_DUTY_HI,F
               00647                         rrf     _HPWM_DUTY_LO,F
               00648 _HPWM_PS1
               00649                         movfw   _HPWM_PERIOD_LO ;Get NORMALIZED period
               00650                         _@BANK _WORK,PR2        ;Check bank
               00651                         _@MOVWF PR2             ;Save period
               00652                         _@BANK PR2,_WORK        ;Check bank
               00653                         clrf    _HPWM_WORK
               00654                         clrc
               00655                         rrf     _HPWM_DUTY_HI,F ;Get duty bit 0
               00656                         rrf     _HPWM_DUTY_LO,F ;Get duty bit 0
               00657                         skpnc                   ;Need to set?
               00658                         bsf     _HPWM_WORK,CCP1Y;Yes
               00659                         clrc
               00660                         rrf     _HPWM_DUTY_HI,F ;Get duty bit 1
               00661                         rrf     _HPWM_DUTY_LO,W ;Get duty bit 1
               00662                         skpnc                   ;Need to set?
               00663                         bsf     _HPWM_WORK,CCP1X;Yes
               00664 
               00665         ifdef CCP2CON
               00666                         btfss   _HPWM_PIN,0     ;is NOT CCP1
               00667                 endif                        
               00668                         movwf   CCPR1L          ;Set (10:2) duty
               00669         ifdef CCP2CON
               00670                         btfsc   _HPWM_PIN,0     ;is NOT CCP2
               00671                         movwf   CCPR2L          ;Set (10:2) duty
               00672         endif
               00673                                         movfw   _HPWM_DUTY_HI
               00674                                         iorwf   _HPWM_DUTY_LO,w ;Test Duty = 0
               00675                                         skpz
               00676                         movlw   b'00001111'
               00677                         iorwf   _HPWM_WORK,W    ;Calc CCPxCON value
               00678 
               00679         ifdef CCP2CON
               00680                         btfss   _HPWM_PIN,0     ;is NOT CCP1
               00681                 endif                        
               00682                         movwf   CCP1CON         ;Set CCPxCON
               00683         ifdef CCP2CON
               00684                         btfsc   _HPWM_PIN,0     ;is NOT CCP2
               00685                         movwf   CCP2CON         ;Set CCPxCON
               00686         endif
               00687                         bsf     T2CON,TMR2ON
               00688         endif
               00689                                         _@CLRSP
               00690                                                 _@DONE
               00691         endif
               00131 #include "C:\PROGRA~1\BASICA~1\system\mbasic14\MB4095~1.LIB" ;mbasic14\mbasiccmd.lib
               00001 ;Copyright 2000-2006 BasicMicro Inc.
               00002 
               00003 ;==========================================================================
               00004 ;
               00005 ;       CMD pointers
               00006 ;
               00007 ;==========================================================================
01A2           00008 _CMDLST
               00009                         _xsys    _NOPCMD,_NOP
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000000         M command = _SYS
  00000001         M _SYS+=1
01A2 2847          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00010                         _xsys    _PUSHCMD,_PUSH
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000001         M command = _SYS
  00000002         M _SYS+=1
01A3 285A          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00011                         _xsys    _POPCMD,_POP
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000002         M command = _SYS
  00000003         M _SYS+=1
01A4 286A          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00012                         _xsys    _STOPCMD,_STOP
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000003         M command = _SYS
  00000004         M _SYS+=1
01A5 2857          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00013                         _xsys    _ENDCMD,_END
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000004         M command = _SYS
  00000005         M _SYS+=1
01A6 2857          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00014         ifdef   _DEBUGMODE
               00015         ifdef   _DEFDEBUGIN
               00016                         _xsys    _DEBUGINCMD,_DEBUGIN
               00017                   endif
               00018                   ifdef _DEFDEBUGINFUNC
               00019                         _xsys    _DEBUGINFUNC,_DEBUGINMOD
               00020         endif
               00021         ifdef   _DEFDEBUG
               00022                         _xsys    _DEBUGCMD,_DEBUG
               00023         endif
               00024         endif
               00025 
               00026         ifdef   _DEFADDRESSP
               00027                         _xsys    _ADDRESSPCMD,_ADDRESSP
               00028         endif
               00029         ifdef   _DEFADDRESS
               00030                         _xsys    _ADDRESSCMD,_ADDRESS
               00031         endif
               00032         ifdef   _DEFBYTETABLEP
               00033                         _xsys    _BYTETABLEPCMD,_BYTETABLEP
               00034         endif
               00035         ifdef   _DEFBYTETABLE
               00036                         _xsys    _BYTETABLECMD,_BYTETABLE
               00037         endif
               00038         ifdef   _DEFSBYTETABLEP
               00039                         _xsys    _SBYTETABLEPCMD,_SBYTETABLEP
               00040         endif
               00041         ifdef   _DEFSBYTETABLE
               00042                         _xsys    _SBYTETABLECMD,_SBYTETABLE
               00043         endif
               00044         ifdef   _DEFWORDTABLEP
               00045                         _xsys    _WORDTABLEPCMD,_WORDTABLEP
               00046         endif
               00047         ifdef   _DEFWORDTABLE
               00048                         _xsys    _WORDTABLECMD,_WORDTABLE
               00049         endif
               00050         ifdef   _DEFSWORDTABLEP
               00051                         _xsys    _SWORDTABLEPCMD,_SWORDTABLEP
               00052         endif
               00053         ifdef   _DEFSWORDTABLE
               00054                         _xsys    _SWORDTABLECMD,_SWORDTABLE
               00055         endif
               00056         ifdef   _DEFLONGTABLEP
               00057                         _xsys    _LONGTABLEPCMD,_LONGTABLEP
               00058         endif
               00059         ifdef   _DEFLONGTABLE
               00060                         _xsys    _LONGTABLECMD,_LONGTABLE
               00061         endif
               00062         ifdef   _DEFVARP
               00063                         _xsys    _VARPCMD,_VARP
               00064         endif
               00065         ifdef   _DEFVAR
               00066                         _xsys    _VARCMD,_VAR
               00067         endif
               00068         ifdef   _DEFCONBP
               00069                         _xsys    _CONBPCMD,_CONBP
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000005         M command = _SYS
  00000006         M _SYS+=1
01A7 2946          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00070                   endif
               00071         ifdef   _DEFCONB
               00072                         _xsys    _CONBCMD,_CONB
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000006         M command = _SYS
  00000007         M _SYS+=1
01A8 293E          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00073                   endif
               00074 
               00075         ifdef   _DEFCONP
               00076                         _xsys    _CONPCMD,_CONP
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000007         M command = _SYS
  00000008         M _SYS+=1
01A9 2948          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00077                   endif
               00078 
               00079         ifdef   _DEFCON
               00080                         _xsys    _CONCMD,_CON
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000008         M command = _SYS
  00000009         M _SYS+=1
01AA 2933          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00081         endif
               00082 
               00083         ifdef   _DEFCONLP
               00084                         _xsys    _CONLPCMD,_CONLP
               00085                   endif
               00086         ifdef   _DEFCONL
               00087                         _xsys    _CONLCMD,_CONL
               00088         endif
               00089         ifdef   _DEFILET
               00090                         _xsys    _ILETCMD,_ILET
               00091         endif
               00092         ifdef   _DEFTLET
               00093                         _xsys    _TLETCMD,_TLET
               00094         endif
               00095         ifdef   _DEFLET
               00096                         _xsys    _LETCMD,_LET
               00097         endif
               00098         ifdef   _DEFLETSTACK
               00099                         _xsys    _LETSTACKCMD,_LETSTACK
               00100         endif
               00101         ifdef   _DEFCLRSP
               00102                         _xsys    _DONECLRSP,_CLRSP
               00103         endif
               00104         ifdef   _DEFCLRWP8
               00105                         _xsys    _CLRWP8CMD,_CLRWP8
               00106         endif
               00107         ifdef   _DEFCLRWP7
               00108                         _xsys    _CLRWP7CMD,_CLRWP7
               00109         endif
               00110         ifdef   _DEFCLRWP6
               00111                         _xsys    _CLRWP6CMD,_CLRWP6
               00112         endif
               00113         ifdef   _DEFCLRWP5
               00114                         _xsys    _CLRWP5CMD,_CLRWP5
               00115         endif
               00116         ifdef   _DEFCLRWP4
               00117                         _xsys    _CLRWP4CMD,_CLRWP4
               00118         endif
               00119         ifdef   _DEFCLRWP3
               00120                         _xsys    _CLRWP3CMD,_CLRWP3
               00121         endif
               00122         ifdef   _DEFCLRWP2
               00123                         _xsys    _CLRWP2CMD,_CLRWP2
               00124         endif
               00125         ifdef   _DEFCLRWP1
               00126                         _xsys    _CLRWP1CMD,_CLRWP1
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  00000009         M command = _SYS
  0000000A         M _SYS+=1
01AB 287F          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00127         endif
               00128         ifdef   _DEFCLRW
               00129                         _xsys    _CLRWCMD,_CLRW
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  0000000A         M command = _SYS
  0000000B         M _SYS+=1
01AC 287A          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00130         endif
               00131         ifdef   _DEFCLEAR
               00132                         _xsys    _CLEARCMD,_CLEAR
               00133         endif
               00134         ifdef   _DEFREV
               00135                         _xsys    _REVCMD,_REV
               00136         endif
               00137         ifdef   _DEFDIG
               00138                         _xsys    _DIGCMD,_DIG
               00139         endif
               00140         ifdef   _DEFSHR
               00141                         _xsys    _SHRCMD,_SHR
               00142         endif
               00143         ifdef   _DEFSHL
               00144                         _xsys    _SHLCMD,_SHL
               00145         endif
               00146         ifdef   _DEFFMAX
               00147                         _xsys    _FMAXCMD,_FMAX
               00148         endif
               00149         ifdef   _DEFFMIN
               00150                         _xsys    _FMINCMD,_FMIN
               00151         endif
               00152         ifdef   _DEFMAX
               00153                         _xsys    _MAXCMD,_MAX
               00154         endif
               00155         ifdef   _DEFMIN
               00156                         _xsys    _MINCMD,_MIN
               00157         endif
               00158         ifdef   _DEFAND
               00159                         _xsys    _ANDCMD,_AND
               00160         endif
               00161         ifdef   _DEFIOR
               00162                         _xsys    _IORCMD,_IOR
               00163         endif
               00164         ifdef   _DEFXOR
               00165                         _xsys    _XORCMD,_XOR
               00166         endif
               00167         ifdef   _DEFNAND
               00168                         _xsys    _NANDCMD,_NAND
               00169         endif
               00170         ifdef   _DEFNIOR
               00171                         _xsys    _NIORCMD,_NIOR
               00172         endif
               00173         ifdef   _DEFNXOR
               00174                         _xsys    _NXORCMD,_NXOR
               00175         endif
               00176         ifdef   _DEFNOT
               00177                         _xsys    _NOTCMD,_NOT
               00178         endif
               00179         ifdef   _DEFFNEG
               00180                         _xsys    _FNEGCMD,_FNEG
               00181         endif
               00182         ifdef   _DEFTOINT
               00183                         _xsys    _TOINTCMD,_TOINT
               00184         endif
               00185         ifdef   _DEFTOFLOAT
               00186                         _xsys    _TOFLOATCMD,_TOFLOAT
               00187         endif
               00188         ifdef   _DEFFMUL
               00189                         _xsys    _FMULCMD,_FMUL
               00190         endif
               00191         ifdef   _DEFFDIV
               00192                         _xsys    _FDIVCMD,_FDIV
               00193         endif
               00194         ifdef   _DEFFADD
               00195                         _xsys    _FADDCMD,_FADD
               00196         endif
               00197         ifdef   _DEFFSUB
               00198                         _xsys    _FSUBCMD,_FSUB
               00199         endif
               00200         ifdef   _DEFMULH
               00201                         _xsys    _MULHCMD,_MULH
               00202         endif
               00203         ifdef   _DEFMULM
               00204                         _xsys    _MULMCMD,_MULM
               00205         endif
               00206         ifdef   _DEFMULL
               00207                         _xsys    _MULLCMD,_MULL
               00208         endif
               00209         ifdef   _DEFDIV
               00210                         _xsys    _DIVCMD,_DIV
               00211         endif
               00212         ifdef   _DEFMOD
               00213                         _xsys    _MODCMD,_MOD
               00214         endif
               00215         ifdef   _DEFADD
               00216                         _xsys    _ADDCMD,_ADD
               00217         endif
               00218         ifdef   _DEFSUB
               00219                         _xsys    _SUBCMD,_SUB
               00220         endif
               00221         ifdef   _DEFABS
               00222                         _xsys    _ABSCMD,_ABS
               00223         endif
               00224         ifdef   _DEFSIN
               00225                         _xsys    _SINCMD,_SIN
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  0000000B         M command = _SYS
  0000000C         M _SYS+=1
01AD 2997          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00226         endif
               00227         ifdef   _DEFCOS
               00228                         _xsys    _COSCMD,_COS
               00229         endif
               00230         ifdef   _DEFDCD
               00231                         _xsys    _DCDCMD,_DCD
               00232         endif
               00233         ifdef   _DEFNCD
               00234                         _xsys    _NCDCMD,_NCD
               00235         endif
               00236         ifdef   _DEFSQR
               00237                         _xsys    _SQRCMD,_SQR
               00238         endif
               00239         ifdef   _DEFRANDOM
               00240                         _xsys    _RANDOMCMD,_RANDOM
               00241         endif
               00242         ifdef   _DEFNEG
               00243                         _xsys    _NEGCMD,_NEG
               00244         endif
               00245         ifdef   _DEFBCD2BIN
               00246                         _xsys    _BCD2BINCMD,_BCD2BIN
               00247         endif
               00248         ifdef   _DEFBIN2BCD
               00249                         _xsys    _BIN2BCDCMD,_BIN2BCD
               00250         endif
               00251         ifdef   _DEFLNOT
               00252                         _xsys    _LNOTCMD,_LNOT
               00253         endif
               00254         ifdef   _DEFLAND
               00255                         _xsys    _LANDCMD,_LAND
               00256         endif
               00257         ifdef   _DEFLOR
               00258                         _xsys    _LORCMD,_LOR
               00259         endif
               00260         ifdef   _DEFLXOR
               00261                         _xsys    _LXORCMD,_LXOR
               00262         endif
               00263         ifdef   _DEFFLESS
               00264                         _xsys    _FLESSCMD,_FLESS
               00265         endif
               00266         ifdef   _DEFFLESSEQUAL
               00267                         _xsys    _FLESSEQUALCMD,_FLESSEQUAL
               00268         endif
               00269         ifdef   _DEFFEQUAL
               00270                         _xsys    _FEQUALCMD,_FEQUAL
               00271         endif
               00272         ifdef   _DEFFGREATEQUAL
               00273                         _xsys    _FGREATEQUALCMD,_FGREATEQUAL
               00274         endif
               00275         ifdef   _DEFFGREAT
               00276                         _xsys    _FGREATCMD,_FGREAT
               00277         endif
               00278         ifdef   _DEFFNOTEQUAL
               00279                         _xsys    _FNOTEQUALCMD,_FNOTEQUAL
               00280         endif
               00281         ifdef   _DEFFLFOR
               00282                         _xsys    _FLFORCMD,_FLFOR
               00283         endif
               00284         ifdef   _DEFFNEXT
               00285                         _xsys    _FNEXTCMD,_FNEXT
               00286         endif
               00287         ifdef   _DEFLESS
               00288                         _xsys    _LESSCMD,_LESS
               00289         endif
               00290         ifdef   _DEFLESSEQUAL
               00291                         _xsys    _LESSEQUALCMD,_LESSEQUAL
               00292         endif
               00293         ifdef   _DEFEQUAL
               00294                         _xsys    _EQUALCMD,_EQUAL
               00295         endif
               00296         ifdef   _DEFGREATEQUAL
               00297                         _xsys    _GREATEQUALCMD,_GREATEQUAL
               00298         endif
               00299         ifdef   _DEFGREAT
               00300                         _xsys    _GREATCMD,_GREAT
               00301         endif
               00302         ifdef   _DEFNOTEQUAL
               00303                         _xsys    _NOTEQUALCMD,_NOTEQUAL
               00304         endif
               00305         ifdef   _DEFLFOR
               00306                         _xsys    _LFORCMD,_LFOR
               00307         endif
               00308         ifdef   _DEFNEXT
               00309                         _xsys    _NEXTCMD,_NEXT
               00310         endif
               00311         ifdef   _DEFLGOTO
               00312                         _xsys    _LGOTOCMD,_LGOTO
               00313         endif
               00314         ifdef   _DEFLNOTGOTO
               00315                         _xsys    _LNOTGOTOCMD,_LNOTGOTO
               00316         endif
               00317         ifdef   _DEFLGOSUB
               00318                         _xsys    _LGOSUBCMD,_LGOSUB
               00319         endif
               00320         ifdef   _DEFGOTO
               00321                         _xsys    _GOTOCMD,_GOTO
               00322         endif
               00323         ifdef   _DEFGOSUB
               00324                         _xsys    _GOSUBCMD,_GOSUB
               00325         endif
               00326         ifdef   _DEFRESUME
               00327                         _xsys    _RESUMECMD,_RESUME
               00328         endif
               00329         ifdef   _DEFRETURN
               00330                         _xsys    _RETURNCMD,_RETURN
               00331         endif
               00332         ifdef   _DEFBRANCH
               00333                         _xsys    _BRANCHCMD,_BRANCH
               00334         endif
               00335         ifdef   _DEFBUTTON
               00336                         _xsys    _BUTTONCMD,_BUTTON
               00337         endif
               00338         ifdef   _DEFCOUNT
               00339                         _xsys    _COUNTCMD,_COUNT
               00340         endif
               00341         ifdef   _DEFFREQOUT
               00342                         _xsys    _FREQOUTCMD,_FREQOUT
                   M                 errorlevel -306
                   M         local address = $ & 0f800h
                   M         local address2 = label & 0f800h
                   M         if address != address2
                   M                 if(address==0x000)
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                         if(address2=0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2=0x1800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,4
                   M                         endif
                   M                 endif
                   M                 if(address==0x1000)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bsf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bsf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 if(address==0x1800)
                   M                         if(address2==0x000)
                   M command = _SYS
                   M _SYS+=3
                   M                                 bcf     PCLATH,3
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x800)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,4
                   M                         endif
                   M                         if(address2==0x1000)
                   M command = _SYS
                   M _SYS+=2
                   M                                 bcf     PCLATH,3
                   M                         endif
                   M                 endif
                   M                 goto    label&0x7ff
                   M         else
  0000000C         M command = _SYS
  0000000D         M _SYS+=1
01AE 28D2          M                 goto    label&0x7ff
                   M         endif
                   M                 errorlevel +306
               00343         endif
               00344         ifdef   _DEFHIGH
               00345                         _xsys    _HIGHCMD,_HIGH
               00346         endif
               00347         ifdef   _DEFLOW
               00348                         _xsys    _LOWCMD,_LOW
               00349         endif
               00350         ifdef   _DEFREVERSE
               00351                         _xsys    _REVERSECMD,_REVERSE
               00352         endif
               00353         ifdef   _DEFINPUT
               00354                         _xsys    _INPUTCMD,_INPUT
               00355         endif
               00356         ifdef   _DEFOUTPUT
               00357                         _xsys    _OUTPUTCMD,_OUTPUT
               00358         endif
               00359         ifdef   _DEFTOGGLE
               00360                         _xsys    _TOGGLECMD,_TOGGLE
               00361         endif
               00362         ifdef   _DEFNAP
               00363                         _xsys    _NAPCMD,_NAP
               00364         endif
               00365         ifdef   _DEFPAUSE
               00366                         _xsys    _PAUSECMD,_PAUSE
               00367         endif
               00368         ifdef   _DEFPAUSEUS
               00369                         _xsys    _PAUSEUSCMD,_PAUSEUS
               00370         endif
               00371         ifdef   _DEFPAUSECLK
               00372                         _xsys    _PAUSECLKCMD,_PAUSECLK
               00373         endif
               00374         ifdef   _DEFSLEEP
               00375                         _xsys    _SLEEPCMD,_SLEEP
               00376         endif
               00377         ifdef   _DEFRCTIME
               00378                         _xsys    _RCTIMECMD,_RCTIME
               00379         endif
               00380         ifdef   _DEFPULSIN
               00381                         _xsys    _PULSINCMD,_PULSIN
               00382         endif
               00383         ifdef   _DEFPULSOUT
               00384                         _xsys    _PULSOUTCMD,_PULSOUT
               00385         endif
               00386         ifdef   _DEFPWM
               00387                         _xsys    _PWMCMD,_PWM
               00388         endif
               00389         ifdef   _DEFREAD
               00390                         _xsys    _READCMD,_READ
               00391         endif
               00392         ifdef   _DEFREADDM
               00393                         _xsys    _READDMCMD,_READDM
               00394         endif
               00395         ifdef   _DEFREADDMFUNC
               00396                         _xsys    _READDMFUNC,_READDMMOD
               00397         endif
               00398         ifdef   _DEFWRITE
               00399                         _xsys    _WRITECMD,_WRITE
               00400         endif
               00401         ifdef   _DEFWRITEDM
               00402                         _xsys    _WRITEDMCMD,_WRITEDM
               00403         endif
               00404         ifdef   _DEFDTMFOUT
               00405                         _xsys    _DTMFOUTCMD,_DTMFOUT
               00406         endif
               00407         ifdef   _DEFLOOKDOWN
               00408                         _xsys    _LOOKDOWNCMD,_LOOKDOWN
               00409         endif
               00410         ifdef   _DEFLOOKUP
               00411                         _xsys    _LOOKUPCMD,_LOOKUP
               00412         endif
               00413         ifdef   _DEFSHIFTIN
               00414                         _xsys    _SHIFTINCMD,_SHIFTIN
               00415         endif
               00416         ifdef   _DEFSHIFTOUT
               00417                         _xsys    _SHIFTOUTCMD,_SHIFTOUT
               00418         endif
               00419         ifdef   _DEFSERIN
               00420                         _xsys    _SERINCMD,_SERIN
               00421         endif
               00422         ifdef   _DEFSERINFUNC
               00423                         _xsys    _SERINFUNC,_SERINMOD
               00424         endif
               00425         ifdef   _DEFSEROUT
               00426                         _xsys    _SEROUTCMD,_SEROUT
               00427         endif
               00428         ifdef   _DEFDECOUT
               00429                         _xsys    _DECOUTCMD,_DECOUT
               00430         endif
               00431         ifdef   _DEFNDECOUT
               00432                         _xsys    _NDECOUTCMD,_NDECOUT
               00433         endif
               00434         ifdef   _DEFHEXOUT
               00435                         _xsys    _HEXOUTCMD,_HEXOUT
               00436         endif
               00437         ifdef   _DEFNHEXOUT
               00438                         _xsys    _NHEXOUTCMD,_NHEXOUT
               00439         endif
               00440         ifdef   _DEFBINOUT
               00441                         _xsys    _BINOUTCMD,_BINOUT
               00442         endif
               00443         ifdef   _DEFNBINOUT
               00444                         _xsys    _NBINOUTCMD,_NBINOUT
               00445         endif
               00446         ifdef   _DEFREALOUT
               00447                         _xsys    _REALOUTCMD,_REALOUT
               00448         endif
               00449         ifdef   _DEFCONSTROUT
               00450                         _xsys    _CONSTROUTCMD,_CONSTROUT
               00451         endif
               00452         ifdef   _DEFCONWORDSTROUT
               00453                         _xsys    _CONWORDSTROUTCMD,_CONWORDSTROUT
               00454         endif
               00455         ifdef   _DEFCONLONGSTROUT
               00456                         _xsys    _CONLONGSTROUTCMD,_CONLONGSTROUT
               00457         endif
               00458         ifdef   _DEFBYTETABLESTROUT
               00459                         _xsys    _BYTETABLESTROUTCMD,_BYTETABLESTROUT
               00460         endif
               00461         ifdef   _DEFWORDTABLESTROUT
               00462                         _xsys    _WORDTABLESTROUTCMD,_WORDTABLESTROUT
               00463         endif
               00464         ifdef   _DEFLONGTABLESTROUT
               00465                         _xsys    _LONGTABLESTROUTCMD,_LONGTABLESTROUT
               00466         endif
               00467         ifdef   _DEFFLOATTABLESTROUT
               00468                         _xsys    _FLOATTABLESTROUTCMD,_FLOATTABLESTROUT
               00469         endif
               00470         ifdef   _DEFSTROUT
               00471                         _xsys    _STROUTCMD,_STROUT
               00472         endif
               00473         ifdef   _DEFBYTETABLESTROUTEOL
               00474                         _xsys    _BYTETABLESTROUTEOLCMD,_BYTETABLESTROUTEOL
               00475         endif
               00476         ifdef   _DEFWORDTABLESTROUTEOL
               00477                         _xsys    _WORDTABLESTROUTEOLCMD,_WORDTABLESTROUTEOL
               00478         endif
               00479         ifdef   _DEFLONGTABLESTROUTEOL
               00480                         _xsys    _LONGTABLESTROUTEOLCMD,_LONGTABLESTROUTEOL
               00481         endif
               00482         ifdef   _DEFFLOATTABLESTROUTEOL
               00483                         _xsys    _FLOATTABLESTROUTEOLCMD,_FLOATTABLESTROUTEOL
               00484         endif
               00485         ifdef   _DEFSTROUTEOL
               00486                         _xsys    _STROUTEOLCMD,_STROUTEOL
               00487         endif
               00488         ifdef   _DEFREPOUT
               00489                         _xsys    _REPOUTCMD,_REPOUT
               00490         endif
               00491         ifdef   _DEFDECIN
               00492                         _xsys    _DECINCMD,_DECIN
               00493         endif
               00494         ifdef   _DEFHEXIN
               00495                         _xsys    _HEXINCMD,_HEXIN
               00496         endif
               00497         ifdef   _DEFBININ
               00498                         _xsys    _BININCMD,_BININ
               00499         endif
               00500         ifdef   _DEFSTRIN
               00501                         _xsys    _STRINCMD,_STRIN
               00502         endif
               00503         ifdef   _DEFSTRINEOL
               00504                         _xsys    _STRINEOLCMD,_STRINEOL
               00505         endif
               00506         ifdef   _DEFWAITCONSTR
               00507                         _xsys    _WAITCONSTRCMD,_WAITCONSTR
               00508         endif
               00509         ifdef   _DEFBYTETABLEWAITSTR
               00510                         _xsys    _BYTETABLEWAITSTRCMD,_BYTETABLEWAITSTR
               00511         endif
               00512         ifdef   _DEFWORDTABLEWAITSTR
               00513                         _xsys    _WORDTABLEWAITSTRCMD,_WORDTABLEWAITSTR
               00514         endif
               00515         ifdef   _DEFLONGTABLEWAITSTR
               00516                         _xsys    _LONGTABLEWAITSTRCMD,_LONGTABLEWAITSTR
               00517         endif
               00518         ifdef   _DEFFLOATTABLEWAITSTR
               00519                         _xsys    _FLOATTABLEWAITSTRCMD,_FLOATTABLEWAITSTR
               00520         endif
               00521         ifdef   _DEFWAITSTR
               00522                         _xsys    _WAITSTRCMD,_WAITSTR
               00523         endif
               00524         ifdef   _DEFBYTETABLEWAITSTREOL
               00525                         _xsys    _BYTETABLEWAITSTREOLCMD,_BYTETABLEWAITSTREOL
               00526         endif
               00527         ifdef   _DEFWORDTABLEWAITSTREOL
               00528                         _xsys    _WORDTABLEWAITSTREOLCMD,_WORDTABLEWAITSTREOL
               00529         endif
               00530         ifdef   _DEFLONGTABLEWAITSTREOL
               00531                         _xsys    _LONGTABLEWAITSTREOLCMD,_LONGTABLEWAITSTREOL
               00532         endif
               00533         ifdef   _DEFFLOATTABLEWAITSTREOL
               00534                         _xsys    _FLOATTABLEWAITSTREOLCMD,_FLOATTABLEWAITSTREOL
               00535         endif
               00536         ifdef   _DEFWAITSTREOL
               00537                         _xsys    _WAITSTREOLCMD,_WAITSTREOL
               00538         endif
               00539         ifdef   _DEFSKIP
               00540                         _xsys    _SKIPCMD,_SKIP
               00541         endif
               00542         ifdef   _DEFI2CIN
               00543                         _xsys    _I2CINCMD,_I2CIN
               00544         endif
               00545         ifdef   _DEFI2CINFUNC
               00546                         _xsys    _I2CINFUNC,_I2CINMOD
               00547         endif
               00548         ifdef   _DEFI2COUT
               00549                         _xsys    _I2COUTCMD,_I2COUT
               00550         endif
               00551         ifdef   _DEFI2CEND
               00552                         _xsys    _I2CENDCMD,_I2CEND
               00553         endif
               00554         ifdef   _DEFLCDINIT
               00555                         _xsys    _LCDINITCMD,_LCDINIT
               00556         endif
               00557         ifdef   _DEFLCDREAD
               00558                         _xsys    _LCDREADCMD,_LCDREAD
               00559         endif
               00560         ifdef   _DEFLCDREADFUNC
               00561                         _xsys    _LCDREADFUNC,_LCDREADMOD
               00562         endif
               00563         ifdef   _DEFLCDWRITE
               00564                         _xsys    _LCDWRITECMD,_LCDWRITE
               00565         endif
               00566         ifdef   _DEFPEEK
               00567                         _xsys    _PEEKCMD,_PEEK
               00568         endif
               00569         ifdef   _DEFPOKE
               00570                         _xsys    _POKECMD,_POKE
               00571         endif
               00572         ifdef   _DEFSERVO
               00573                         _xsys    _SERVOCMD,_SERVO
               00574         endif
               00575         ifdef   _DEFSPMOTOR
               00576                         _xsys    _SPMOTORCMD,_SPMOTOR
               00577         endif
               00578         ifdef   _DEFSWAP
               00579                         _xsys    _SWAPCMD,_SWAP
               00580         endif
               00581         ifdef   _DEFADIN
               00582                         _xsys    _ADINCMD,_ADIN
               00583         endif
               00584         ifdef   _DEFADIN16
               00585                         _xsys    _ADIN16CMD,_ADIN16
               00586         endif
               00587         ifdef   _DEFDTMFOUT2
               00588                         _xsys    _DTMFOUT2CMD,_DTMFOUT2
               00589         endif
               00590         ifdef   _DEFSOUND
               00591                         _xsys    _SOUNDCMD,_SOUND
               00592         endif
               00593         ifdef   _DEFSOUND2
               00594                         _xsys    _SOUND2CMD,_SOUND2
               00595         endif
               00596         ifdef   _DEFSOUND8
               00597                         _xsys    _SOUND8CMD,_SOUND8
               00598         endif
               00599         ifdef   _DEFREADPM
               00600                         _xsys    _READPMCMD,_READPM
               00601         endif
               00602         ifdef   _DEFREADPMFUNC
               00603                         _xsys    _READPMFUNC,_READPMMOD
               00604         endif
               00605         ifdef   _DEFWRITEPM
               00606                         _xsys    _WRITEPMCMD,_WRITEPM
               00607         endif
               00608         ifdef   _DEFSERDETECT
               00609                         _xsys    _SERDETECTCMD,_SERDETECT
               00610         endif
               00611         ifdef   _DEFHPWM
               00612                         _xsys    _HPWMCMD,_HPWM
               00613         endif
               00614         ifdef   _DEFSETPULLUPS
               00615                         _xsys    _SETPULLUPSCMD,_SETPULLUPS
               00616         endif
               00617         ifdef   _DEFSETEXTINT
               00618                         _xsys    _SETEXTINTCMD,_SETEXTINT
               00619         endif
               00620         ifdef   _DEFSETTMR0
               00621                         _xsys    _SETTMR0CMD,_SETTMR0
               00622         endif
               00623         ifdef   _DEFSETTMR1
               00624                         _xsys    _SETTMR1CMD,_SETTMR1
               00625         endif
               00626         ifdef   _DEFGETTMR1
               00627                         _xsys    _GETTMR1CMD,_GETTMR1
               00628         endif
               00629         ifdef   _DEFRESETTMR1
               00630                         _xsys    _RESETTMR1CMD,_RESETTMR1
               00631         endif
               00632         ifdef   _DEFSETTMR2
               00633                         _xsys    _SETTMR2CMD,_SETTMR2
               00634         endif
               00635         ifdef   _DEFSETCAPTURE
               00636                         _xsys    _SETCAPTURECMD,_SETCAPTURE
               00637         endif
               00638         ifdef   _DEFGETCAPTURE
               00639                         _xsys    _GETCAPTURECMD,_GETCAPTURE
               00640         endif
               00641         ifdef   _DEFSETCOMPARE
               00642                         _xsys    _SETCOMPARECMD,_SETCOMPARE
               00643         endif
               00644         ifdef   _DEFOWIN
               00645                         _xsys    _OWIREINCMD,_OWIN
               00646         endif
               00647         ifdef   _DEFOWINFUNC
               00648                         _xsys    _OWIREINFUNC,_OWINMOD
               00649         endif
               00650         ifdef   _DEFOWOUT
               00651                         _xsys    _OWIREOUTCMD,_OWOUT
               00652         endif
               00653         ifdef   _DEFXIN
               00654                         _xsys    _XINCMD,_XIN
               00655         endif
               00656         ifdef   _DEFXINFUNC
               00657                         _xsys    _XINFUNC,_XINMOD
               00658         endif
               00659         ifdef   _DEFXOUT
               00660                         _xsys    _XOUTCMD,_XOUT
               00661         endif
               00662         ifdef   _DEFTIMEWATCHDOG
               00663                         _xsys    _TIMEWATCHDOGCMD,_TIMEWATCHDOG
               00664         endif
               00665         ifdef   _DEFGETWATCHDOG
               00666                         _xsys    _GETWATCHDOGCMD,_GETWATCHDOG
               00667         endif
               00668         ifdef   _DEFENABLEHSERIAL
               00669         ifdef   _DEFSETHSERIAL
               00670                         _xsys    _SETHSERIALCMD,_SETHSERIAL
               00671         endif
               00672         ifdef   _DEFHSERIN
               00673                         _xsys    _HSERINCMD,_HSERIN
               00674         endif
               00675         ifdef   _DEFHSERINFUNC
               00676                         _xsys    _HSERINFUNC,_HSERINMOD
               00677         endif
               00678         ifdef   _DEFHSEROUT
               00679                         _xsys    _HSEROUTCMD,_HSEROUT
               00680         endif
               00681         ifdef   _DEFHSERSTAT
               00682                         _xsys    _HSERSTATCMD,_HSERSTAT
               00683         endif
               00684         endif
               00685         ifdef   _DEFENABLEHTIMER0
               00686         ifdef   _DEFSETHTMR0
               00687                         _xsys    _SETHTMR0CMD,_SETHTMR0
               00688         endif
               00689         endif
               00690         ifdef   _DEFENABLEHTIMER1
               00691         ifdef   _DEFSETHTMR1
               00692                         _xsys    _SETHTMR1CMD,_SETHTMR1
               00693         endif
               00694                   endif
               00695         ifdef   _DEFINTERRUPT
               00696                         _xsys    _INTERRUPTCMD,_INTERRUPT
               00697                         _xsys    _INTSETUPCMD,_INTSETUP
               00698         endif
               00699         ifdef   _DEFEXCEPTION
               00700                         _xsys    _EXCEPTIONCMD,_EXCEPTION
               00701         endif
               00702         ifdef   _DEFPACKEDTOKENS
               00703         ifdef   _DEFINLINE
               00704                         _xsys    _INLINECMD,_INLINE
               00705                   endif
               00706         endif
               00707 
               00708         ;_START must be on word boundary if using _PACKEDTOKENS
               00709         ifdef _PACKEDTOKENS
               00710            if(($&0x03)!=0)
               00711               org ($&0xFFFFFFFC)+4
               00712            endif
               00713         endif
               00132    LIST n=0
               00133    _@PACKEDBUFFER
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc != 0
                   M                                 if _packedpc == 1
                   M _packeddata1h = (_NOP>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((_NOP&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = _NOP&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (_NOP>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((_NOP&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = _NOP&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 5
                   M _packeddata3h = (_NOP>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (_NOP&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 6
                   M _packeddata4 = _NOP&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc = 0
                   M                         endif
                   M                 endif
01AF           00134 _START
               00135    _@DEBUGDATA 0x1
  00000001         M _DEBUGLINE = line
  000001AF         M _DEBUGADDRESS = $
  00000000         M _DEBUGPACKEDPC = _packedpc
               00136    _@CMD _CONBP
                   M                 _@PACKEDDATA name
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01AF 3405          M                         retlw arg
                   M                 endif
               00137    _@ARGB 009h ;P9
                   M                 _@PACKEDDATA value
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B0 3409          M                         retlw arg
                   M                 endif
               00138    _@CMD _CLRWP1
                   M                 _@PACKEDDATA name
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B1 3409          M                         retlw arg
                   M                 endif
               00139    _@CMD _CONP
                   M                 _@PACKEDDATA name
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B2 3407          M                         retlw arg
                   M                 endif
               00140    _@ARGW 003e8h ;1000
                   M                 _@PACKEDDATA ((value>>8)&0xFF)
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B3 3403          M                         retlw arg
                   M                 endif
                   M                 _@PACKEDDATA value&0xFF
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B4 34E8          M                         retlw arg
                   M                 endif
               00141    _@CMD _CONP
                   M                 _@PACKEDDATA name
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B5 3407          M                         retlw arg
                   M                 endif
               00142    _@ARGW 03e80h ;16000
                   M                 _@PACKEDDATA ((value>>8)&0xFF)
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B6 343E          M                         retlw arg
                   M                 endif
                   M                 _@PACKEDDATA value&0xFF
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B7 3480          M                         retlw arg
                   M                 endif
               00143    _@CMD _CLRW
                   M                 _@PACKEDDATA name
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B8 340A          M                         retlw arg
                   M                 endif
               00144    _@CMD _FREQOUT
                   M                 _@PACKEDDATA name
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01B9 340C          M                         retlw arg
                   M                 endif
               00145    _@END
                   M                 _@PACKEDDATA _END
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc == 6
                   M _packeddata4 = arg&0xFF
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc=0
                   M                         else
                   M                                 if _packedpc == 5
                   M _packeddata3h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (arg&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = arg&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 1
                   M _packeddata1h = (arg>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((arg&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 0
                   M _packeddata1 = arg&0xFF
                   M _packeddata1h = 0
                   M _packeddata2 = 0
                   M _packeddata2h = 0
                   M _packeddata3 = 0
                   M _packeddata3h = 0
                   M _packeddata4 = 0
                   M _packeddata4h = 0
                   M _packedpc++
                   M                                 endif
                   M                         endif
                   M                 else
01BA 3404          M                         retlw arg
                   M                 endif
                   M                 _@PACKEDBUFFER
                   M                 ifdef _PACKEDTOKENS
                   M                         if _packedpc != 0
                   M                                 if _packedpc == 1
                   M _packeddata1h = (_NOP>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((_NOP&0x03)<<4)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 2
                   M _packeddata2 = _NOP&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 3
                   M _packeddata2h = (_NOP>>2)&0x3f
                   M _packeddata4h = _packeddata4h | ((_NOP&0x03)<<2)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 4
                   M _packeddata3 = _NOP&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 5
                   M _packeddata3h = (_NOP>>2)&0x3f
                   M _packeddata4h = _packeddata4h | (_NOP&0x03)
                   M _packedpc++
                   M                                 endif
                   M                                 if _packedpc == 6
                   M _packeddata4 = _NOP&0xFF
                   M _packedpc++
                   M                                 endif
                   M                                 db _packeddata1h,_packeddata1
                   M                                 db _packeddata2h,_packeddata2
                   M                                 db _packeddata3h,_packeddata3
                   M                                 db _packeddata4h,_packeddata4
                   M _packedpc = 0
                   M                         endif
                   M                 endif
  000001BB         M _CODEEND = $
gpasm-0.13.3 beta               C:\MYDOCU~1\MYCODE~1\ATOM\TEST1\TEST1.ASM11-12-2006  01:23:45         PAGE  1


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CIS                               00000003
CKE                               00000006
CKP                               00000004
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             0000009C
CMIE                              00000006
CMIF                              00000006
CREN                              00000004
CSRC                              00000007
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            0000009D
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FERR                              00000002
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
P                                 00000004
P9                                00000009
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_ADDRESSMASK                      000001FF
_ADIN0                            00000000
_ADIN1                            00000001
_ADIN2                            00000002
_ADIN3                            00000003
_ADIN4                            FFFFFFFF
_ADIN5                            FFFFFFFF
_ADIN6                            FFFFFFFF
_ADIN7                            FFFFFFFF
_ADIN8                            FFFFFFFF
_ADIN9                            FFFFFFFF
_ARRAYMASK                        00008000
_BANK0_END                        00000070
_BANK0_START                      00000020
_BANK1_END                        000000F0
_BANK1_START                      000000A0
_BANK2_END                        00000170
_BANK2_START                      00000110
_BANK3_END                        000001F0
_BANK3_START                      00000190
_BITMASK                          00000081
_BITTYPE                          00000800
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BYTETYPE                         00000200
_CALLCMD                          00000036
_CLRW                             0000000A
_CLRWCMD                          0000007A
_CLRWP1                           00000009
_CLRWP1CMD                        0000007F
_CMD                              00000075
_CMD2                             00000076
_CMD3                             00000077
_CMD4                             00000078
_CMD5                             00000079
_CMDLST                           000001A2
_CODEEND                          000001BB
_CON                              00000008
_CONB                             00000006
_CONBCMD                          0000013E
_CONBP                            00000005
_CONBPCMD                         00000146
_CONCMD                           00000133
_CONP                             00000007
_CONPCMD                          00000148
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00001FFF
_CP_OFF                           00003FFF
_DEBUGADDRESS                     000001AF
_DEBUGLINE                        00000001
_DEBUGPACKEDPC                    00000000
_DEBUGWORK                        00000075
_DEBUGWORK2                       00000076
_DEBUGWORK3                       00000077
_DEBUGWORK4                       00000078
_DEBUGWORK5                       00000079
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DONE                             00000047
_DONECLRSP                        00000045
_END                              00000004
_ENDCMD                           00000057
_ENHWORK                          00000024
_ENHWORK2                         00000025
_ENHWORK3                         00000026
_ENHWORK4                         00000027
_ENHWORK5                         00000028
_ENHWORK6                         00000029
_ENHWORK7                         0000002A
_ENHWORK8                         0000002B
_FLOATTYPE                        00000E00
_FREQFACT                         00000100
_FREQOUT                          0000000C
_FREQOUTCMD                       000000D2
_F_AARGB0                         00000022
_F_AARGB1                         00000021
_F_AARGB2                         00000020
_F_AARGB3                         0000002A
_F_AARGB4                         00000029
_F_AARGB5                         00000028
_F_AEXP                           00000023
_F_BARGB0                         00000026
_F_BARGB1                         00000025
_F_BARGB2                         00000024
_F_BARGB3                         0000002B
_F_BEXP                           00000027
_F_DOM                            00000005
_F_EXP                            00000023
_F_EXPBIAS                        0000007F
_F_FDZ                            00000003
_F_FOV                            00000001
_F_FPFLAGS                        00000076
_F_FUN                            00000002
_F_IOV                            00000000
_F_LSB                            00000000
_F_MSB                            00000007
_F_NAN                            00000004
_F_RND                            00000006
_F_SIGN                           00000075
_F_TEMP                           00000078
_F_TEMPB1                         00000077
_GETCMD                           0000003E
_GETPIN                           00000091
_HS_OSC                           00003FFE
_I2CADDRESS_FLAG                  0000003E
_I2CADDRESS_H                     0000003D
_I2CADDRESS_L                     0000003C
_I2CCTRL                          00000038
_I2CERRLABEL_H                    00000035
_I2CERRLABEL_L                    00000034
_I2CFLAG                          00000039
_I2CSCLPIN                        00000030
_I2CSCLPORT                       00000031
_I2CSCRAP1                        0000002C
_I2CSCRAP2                        0000002D
_I2CSCRAP3                        0000002E
_I2CSCRAP4                        0000002F
_I2CSDAPIN                        00000032
_I2CSDAPORT                       00000033
_INDEXMASK                        00007000
_INDEXOFFSET                      0000000C
_INTSTATE                         0000007A
_INTSTATEH                        0000007B
_ISREND                           0000000D
_ISRSTART                         0000000D
_LONGTYPE                         00000A00
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_MHZ                              01312D00
_NIBTYPE                          00000400
_NOP                              00000000
_NOPCMD                           00000047
_PC                               00000070
_PCH                              00000071
_PCSP                             00000073
_PCSTACK                          00000070
_PCU                              00000072
_PIN0                             00000010
_PIN1                             00000011
_PIN10                            00000022
_PIN11                            00000023
_PIN12                            00000024
_PIN13                            00000025
_PIN14                            00000026
_PIN15                            00000027
_PIN16                            00000000
_PIN17                            00000001
_PIN18                            00000002
_PIN19                            00000003
_PIN2                             00000012
_PIN3                             00000013
_PIN32                            00000000
_PIN33                            00000001
_PIN34                            00000002
_PIN35                            00000003
_PIN4                             00000014
_PIN40                            00000004
_PIN41                            00000004
_PIN5                             00000015
_PIN6                             00000016
_PIN7                             00000017
_PIN8                             00000020
_PIN9                             00000021
_POP                              00000002
_POPCMD                           0000006A
_POR_SKIP                         0000002F
_PROCSETUP                        00000029
_PUSH                             00000001
_PUSHCMD                          0000005A
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_RESET                            00000048
_RESETPROC                        00000018
_SBYTETYPE                        00004200
_SIGNMASK                         00004000
_SIN                              0000000B
_SINCMD                           00000197
_SINCMD2                          0000014A
_SINCMD3                          0000014B
_SLONGTYPE                        00004A00
_SP                               00000074
_STACK                            0000002C
_START                            000001AF
_STOP                             00000003
_STOPCMD                          00000057
_SWORDTYPE                        00004600
_SYS                              0000000D
_TYPEMASK                         00000E00
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WORDTYPE                         00000600
_WORK                             00000020
_WORK2                            00000021
_WORK3                            00000022
_WORK4                            00000023
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
_XT_OSC                           00003FFD
__16F876A                         00000001
__BASICATOM                       00000001
_acyclescnt                       00000000
_bittbl                           00000089
_cyclescnt                        00000000
_freqm1                           000000E4
_freqm2                           000000EE
_freqoutloop                      00000103
_fsr_temp                         0000007C
_labelnumber                      00000000
_packedpc                         00000000
_pclath_temp                      0000007D
_pintbl                           000000A2
_pinval                           0000009A
_procloop                         00000030
_resetlp                          00000053
_scyclescnt                       00000000
_sintbl                           00000156
_status_temp                      0000007E
_w_temp                           0000007F
_BITCNT                           _STACK+25       
_CTSMASK                          _STACK+5        
_CTSPORT                          _STACK+4        
_DATAHI                           _STACK+27		
_DATALO                           _STACK+26		
_DEBUGINPIN                       4
_DEBUGOUTPIN                      4
_DEBUGPORT                        PORTA
_DEFBITMASK                       
_DEFCLRW                          
_DEFCLRWP1                        
_DEFCON                           
_DEFCONB                          
_DEFCONBP                         
_DEFCONP                          
_DEFFREQOUT                       
_DEFGETPIN                        
_DEFSIN                           
_FREQACC                          _STACK+1
_FREQCNT                          _STACK
_FREQHI                           _STACK+13
_FREQHI2                          _STACK+15
_FREQLO                           _STACK+12
_FREQLO2                          _STACK+14
_FREQMASK                         _STACK+2
_FREQNEWHI                        _STACK+5
_FREQNEWHI2                       _STACK+7
_FREQNEWLO                        _STACK+4
_FREQNEWLO2                       _STACK+6
_FREQON1                          _STACK+8
_FREQON2                          _STACK+9
_FREQON3                          _STACK+10
_FREQON4                          _STACK+11
_FREQPORT                         _STACK+3
_FREQSIN                          _WORK
_FREQSIN2                         _WORK+1
_LCD_CLK                          _STACK+8
_LCD_NIB                          _STACK+17
_LCD_PORT                         _STACK+16
_LCD_RDADDRESS                    _STACK+20
_LCD_RDWR                         _STACK+12
_LCD_REGSEL                       _STACK+4
_LCD_WORK1                        _STACK
_LCD_WORK2                        _STACK+1
_LCD_WORK3                        _STACK+2
_LCD_WORK4                        _STACK+3
_LCD_WORK5                        _STACK+5
_LCD_WORK6                        _STACK+9
_LCD_WORK7                        _STACK+13
_OWIRE_ADDRESSHI                  _STACK+13
_OWIRE_ADDRESSLO                  _STACK+12
_OWIRE_BER                        1
_OWIRE_BITCT                      _STACK+9
_OWIRE_DATA                       _STACK+16
_OWIRE_ERROR                      6
_OWIRE_FER                        0
_OWIRE_MASK                       _STACK+4
_OWIRE_MODE                       _STACK+8
_OWIRE_PORT                       _STACK+5
_OWIRE_SIZE                       2
_OWIRE_SPEED                      3
_OWIRE_START                      7
_OWIRE_WORK1                      _STACK
_OWIRE_WORK2                      _STACK+1
_OWIRE_WORK3                      _STACK+2
_OWIRE_WORK4                      _STACK+3
_PACE1                            _STACK+16       
_PACE2                            _STACK+17       
_PACE3                            _STACK+18       
_PACE4                            _STACK+19       
_PRTYHI                           _STACK+13       
_PRTYLO                           _STACK+12       
_PRTYWORK                         _STACK+14		
_RATE1                            _STACK+8        
_RATE2                            _STACK+9        
_RATE3                            _STACK+10        
_RATE4                            _STACK+11        
_RTSMASK                          _STACK+5        
_RTSPIN                           _STACK+4        
_RXMASK                           _STACK+7        
_RXPORT                           _STACK+6        
_SERFLAG                          _STACK+24       
_SERWORK1                         _STACK          
_SERWORK2                         _STACK+1        
_SERWORK3                         _STACK+2        
_SERWORK4                         _STACK+3        
_SER_DATAB                        _RATE3,2
_SER_DRIVE                        _RATE3,1
_SER_INVERT                       _RATE3,0
_SER_PARITYENABLE                 _RATE3,4
_SER_PARITYMODE                   _RATE3,5
_SER_STOPB                        _RATE3,3
_SHIFT_CLKMASK                    _STACK+4
_SHIFT_CLKPORT                    _STACK+5
_SHIFT_COUNT                      _WORK
_SHIFT_DATAHI                     _STACK+13
_SHIFT_DATALO                     _STACK+12
_SHIFT_DATAMASK                   _STACK+6
_SHIFT_DATAPORT                   _STACK+7
_SHIFT_MODE                       _STACK+8
_SHIFT_WORK1                      _STACK
_SHIFT_WORK2                      _STACK+1
_SHIFT_WORK3                      _STACK+2
_SHIFT_WORK4                      _STACK+3
_SHIFT_WORK5                      _STACK+14
_SHIFT_WORK6                      _STACK+15
_TOADDHI                          _STACK+21       
_TOADDLO                          _STACK+20       
_TOT1                             _STACK+16       
_TOT2                             _STACK+17       
_TOT3                             _STACK+18       
_TOT4                             _STACK+19       
_TXMASK                           _STACK+7        
_TXPORT                           _STACK+6        
_X10_ADDRESSHI                    _STACK+17
_X10_ADDRESSLO                    _STACK+16
_X10_BITCT                        _STACK+14
_X10_DATA                         _STACK+15
_X10_DATAMASK                     _STACK+4
_X10_DATAPORT                     _STACK+5
_X10_HOUSE                        _STACK+12
_X10_TIMEOUT1                     _STACK+20
_X10_TIMEOUT2                     _STACK+21
_X10_TIMEOUT3                     _STACK+22
_X10_TIMEOUT4                     _STACK+23
_X10_TTIMEOUT1                    _STACK+6
_X10_TTIMEOUT2                    _STACK+7
_X10_TTIMEOUT3                    _STACK+10
_X10_TTIMEOUT4                    _STACK+11
_X10_WORK1                        _STACK+0	
_X10_WORK2                        _STACK+1	
_X10_WORK3                        _STACK+18
_X10_WORK4                        _STACK+19
_X10_WORK5                        _STACK+13 
_X10_ZEROMASK                     _STACK+8
_X10_ZEROPORT                     _STACK+9


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

00000000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000000c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00000180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXX-----
00002000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used: 444


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

